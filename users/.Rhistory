rgb(198,224,180, maxColorValue=255)), # green yellow
labels = c("1999 (Year 1)", "2008 (Year 9)") ) +
labs(x=element_blank(), y="City (mpg)")
# ===========================================================================
# Hide the entire legend
mpg %>%
filter( !is.na(year_f) ) %>%  # Pick up only those that are not NA as X axis.
ggplot( aes(x=    year_f ,
y=    cty ,
fill= year_f ) ) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
theme(legend.position = "none") +
labs(x=element_blank(), y="City (mpg)")
# ===========================================================================
# Change the legend text.
mpg %>%
filter( !is.na(year_f) ) %>%  # Pick up only those that are not NA as X axis.
ggplot( aes(x=    year_f ,
y=    cty ,
fill= year_f ) ) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
theme(legend.position = "none") +
scale_fill_manual(values = c(rgb(237,125,49, maxColorValue=255),  # dark orange
rgb(198,224,180, maxColorValue=255)), # green yellow
labels = c("1999 (Year 1)", "2008 (Year 9)") ) +
labs(x=element_blank(), y="City (mpg)")
# ===========================================================================
# Change the legend text.
mpg %>%
filter( !is.na(year_f) ) %>%  # Pick up only those that are not NA as X axis.
ggplot( aes(x=    year_f ,
y=    cty ,
fill= year_f ) ) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
# theme(legend.position = "none") +
scale_fill_manual(values = c(rgb(237,125,49, maxColorValue=255),  # dark orange
rgb(198,224,180, maxColorValue=255)), # green yellow
labels = c("1999 (Year 1)", "2008 (Year 9)") ) +
labs(x=element_blank(), y="City (mpg)")
# ===========================================================================
# Change the legend text.
mpg %>%
filter( !is.na(year_f) ) %>%  # Pick up only those that are not NA as X axis.
ggplot( aes(x=    year_f ,
y=    cty ,
fill= year_f ) ) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
labs(x=element_blank(), y="City (mpg)") +
# theme(legend.position = "none") +
scale_fill_manual(values = c(rgb(237,125,49, maxColorValue=255),  # dark orange
rgb(198,224,180, maxColorValue=255)), # green yellow
labels = c("1999 (Year 1)", "2008 (Year 9)") )
# ===========================================================================
# Change the legend text.
mpg %>%
filter( !is.na(year_f) ) %>%  # Pick up only those that are not NA as X axis.
ggplot( aes(x=    year_f ,
y=    cty ,
fill= year_f ) ) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
labs(x=element_blank(), y="City (mpg)")
# ===========================================================================
# Change the legend text.
mpg %>%
filter( !is.na(year_f) ) %>%  # Pick up only those that are not NA as X axis.
ggplot( aes(x=    year_f ,
y=    cty ,
fill= year_f ) ) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
labs(x=element_blank(), y="City (mpg)") +
theme(axis.text.x = element_blank()) +
# theme(legend.position = "none") +
scale_fill_manual(values = c(rgb(237,125,49, maxColorValue=255),  # dark orange
rgb(198,224,180, maxColorValue=255)), # green yellow
labels = c("1999 (Year 1)", "2008 (Year 9)") )
# ===========================================================================
# Change the legend text.
# Create a vector that has color names to be used.
# (color names need to be specified in order to edit legend text)
colnames = c("cyan", "magenta")
# ===========================================================================
# Change the legend text.
# Create a vector that has color names to be used.
# (color names need to be specified in order to edit legend text)
colornames = c("cyan", "magenta")
mpg %>%
filter( !is.na(year_f) ) %>%  # Pick up only those that are not NA as X axis.
ggplot( aes(x=    year_f ,
y=    cty ,
fill= year_f ) ) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
labs(x=element_blank(), y="City (mpg)") +
theme(axis.text.x = element_blank()) +
scale_fill_manual(values = colornames, # green yellow
labels = c("1999 (Year 1)", "2008 (Year 9)") )
mpg %>%
filter( !is.na(year_f) ) %>%  # Pick up only those that are not NA as X axis.
ggplot( aes(x=    year_f ,
y=    cty ,
fill= year_f ) ) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
labs(x=element_blank(), y="City (mpg)", fill = "Edited factor names") +
theme(axis.text.x = element_blank()) +
scale_fill_manual(values = colornames, # green yellow
labels = c("1999 (Year 1)", "2008 (Year 9)") )
mpg %>%
filter( !is.na(year_f) ) %>%  # Pick up only those that are not NA as X axis.
ggplot( aes(x=    year_f ,
y=    cty ,
fill= year_f ) ) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
labs(x=element_blank(), y="City (mpg)", fill = "Edited factor names") +
theme(axis.text.x = element_blank()) +
scale_fill_manual(values = colornames,
labels = c("1999 (Year 1)", "2008 (Year 9)") )
# ===========================================================================
# Remove inner grid and increase margin between axis title and axis.
mpg %>%
ggplot(aes( x=cty, y=hwy )) +
geom_point() +
theme_bw(base_size=15) +
# xlim(10, 90) + ylim(10, 90) +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ) ) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) )
# ===========================================================================
# Remove inner grid and increase margin between axis title and axis.
mpg %>%
ggplot(aes( x=cty, y=hwy )) +
geom_point() +
theme_bw(base_size=15) +
# xlim(10, 90) + ylim(10, 90) +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# ===========================================================================
# Change the factor names on x axis of the plot.
mpg %>%
filter( !is.na(year_f) ) %>%  # Pick up only those that are not NA as X axis.
ggplot( aes(x=    year_f ,
y=    cty ,
fill= year_f ) ) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
theme(legend.position = "none") +
labs(x=element_blank(), y="City (mpg)")
# ===========================================================================
# Change the factor names on x axis of the plot.
mpg %>%
filter( !is.na(year_f) ) %>%  # Pick up only those that are not NA as X axis.
ggplot( aes(x=    year_f ,
y=    cty ,
fill= year_f ) ) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
theme(legend.position = "none") +
labs(x=element_blank(), y="City (mpg)") +
scale_x_discrete(labels = c("Year 1999", "Year 2008"))
# ===========================================================================
# Sort by median
table(mpg$model)
# ===========================================================================
# Sort by median
table(mpg$cyl)
plot(mpg$cyl, mpg$cty)
plot(mpg$cyl,_f mpg$cty)
plot(mpg$cyl_f , mpg$cty)
str(mpg)
# ===========================================================================
# Sort by median
table(mpg$trans)
plot(mpg$trans , mpg$cty)
mpg$trans_f = factor(mpg$trans)
plot(mpg$trans , mpg$cty)
plot(mpg$trans_f , mpg$cty)
# ===========================================================================
# Sort by median
table(mpg$drv)
plot(mpg$drv , mpg$cty)
mpg$drv_f = factor(mpg$drv)
plot(mpg$drv_f , mpg$cty)
# ===========================================================================
# Sort by median
# Need "forcats" package.
library(forcats)
mpg %>%
ggplot( aes(x= fct_reorder(drv_f, cty, .desc = F),
y = cty,
fill = fct_reorder(drv_f, cty, .desc = F)))
mpg %>%
ggplot( aes(x= fct_reorder(drv_f, cty, .desc = F),
y = cty,
fill = fct_reorder(drv_f, cty, .desc = F))) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" )
mpg %>%
ggplot( aes(x= fct_reorder(drv_f, cty, .desc = F),
y = cty,
fill = fct_reorder(drv_f, cty, .desc = F))) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
lab(fill = "Drive")
mpg %>%
ggplot( aes(x= fct_reorder(drv_f, cty, .desc = F),
y = cty,
fill = fct_reorder(drv_f, cty, .desc = F))) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
labs(fill = "Drive")
mpg %>%
ggplot( aes(x= fct_reorder(drv_f, cty, .desc = F),
y = cty,
fill = fct_reorder(drv_f, cty, .desc = F))) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
labs(x=element_blank(), y="City (mpg)", fill = "Drive")
# ===========================================================================
# Add a rectangular shape and a horizontal line in your chart
mpg %>%
ggplot( aes(x= fct_reorder(drv_f, cty, .desc = F),
y = cty,
fill = fct_reorder(drv_f, cty, .desc = F))) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
labs(x=element_blank(), y="City (mpg)", fill = "Drive") +
geom_rect( aes(xmin = -Inf, xmax = Inf, ymin = -5, ymax = 5), fill = "grey93") +
geom_hline(yintercept = 0, color="grey48", size=1, linetype=1)
# ===========================================================================
# Add a rectangular shape and a horizontal line in your chart
mpg %>%
ggplot( aes(x= fct_reorder(drv_f, cty, .desc = F),
y = cty,
fill = fct_reorder(drv_f, cty, .desc = F))) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
labs(x=element_blank(), y="City (mpg)", fill = "Drive") +
geom_rect( aes(xmin = -Inf, xmax = Inf, ymin = 15, ymax = 25), fill = "grey93") +
geom_hline(yintercept = 0, color="grey48", size=1, linetype=1)
# ===========================================================================
# Add a rectangular shape and a horizontal line in your chart
mpg %>%
ggplot( aes(x= fct_reorder(drv_f, cty, .desc = F),
y = cty,
fill = fct_reorder(drv_f, cty, .desc = F))) +
theme_bw(base_size = 15) +
geom_rect( aes(xmin = -Inf, xmax = Inf, ymin = 15, ymax = 25), fill = "grey93") +
geom_hline(yintercept = 0, color="grey48", size=1, linetype=1) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
labs(x=element_blank(), y="City (mpg)", fill = "Drive")
# ===========================================================================
# Add a rectangular shape and a horizontal line in your chart
mpg %>%
ggplot( aes(x= fct_reorder(drv_f, cty, .desc = F),
y = cty,
fill = fct_reorder(drv_f, cty, .desc = F))) +
theme_bw(base_size = 15) +
geom_hline(yintercept = 0, color="grey48", size=1, linetype=1) +
geom_rect( aes(xmin = -Inf, xmax = Inf, ymin = 15, ymax = 25), fill = "grey93") +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
labs(x=element_blank(), y="City (mpg)", fill = "Drive")
# ===========================================================================
# Add a rectangular shape and a horizontal line in your chart
mpg %>%
ggplot( aes(x= fct_reorder(drv_f, cty, .desc = F),
y = cty,
fill = fct_reorder(drv_f, cty, .desc = F))) +
geom_rect( aes(xmin = -Inf, xmax = Inf, ymin = 15, ymax = 25), fill = "grey93") +
geom_hline(yintercept = 0, color="grey48", size=1, linetype=1) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
labs(x=element_blank(), y="City (mpg)", fill = "Drive")
# ===========================================================================
# Add a rectangular shape and a horizontal line in your chart
mpg %>%
ggplot( aes(x= fct_reorder(drv_f, cty, .desc = F),
y = cty,
fill = fct_reorder(drv_f, cty, .desc = F))) +
geom_rect( aes(xmin = -Inf, xmax = Inf, ymin = 15, ymax = 25), fill = "grey93") +
geom_hline(yintercept = 20, color="grey48", size=1, linetype=1) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
labs(x=element_blank(), y="City (mpg)", fill = "Drive")
# ===========================================================================
# Add a rectangular shape and a horizontal line in your chart
mpg %>%
ggplot( aes(x= fct_reorder(drv_f, cty, .desc = F),
y = cty,
fill = fct_reorder(drv_f, cty, .desc = F))) +
geom_rect( aes(xmin = -Inf, xmax = Inf, ymin = 17, ymax = 23), fill = "grey93") +
geom_hline(yintercept = 20, color="grey48", size=1, linetype=1) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
labs(x=element_blank(), y="City (mpg)", fill = "Drive")
# ===========================================================================
# Add a rectangular shape and a horizontal line in your chart
mpg %>%
ggplot( aes(x= fct_reorder(drv_f, cty, .desc = F),
y = cty,
fill = fct_reorder(drv_f, cty, .desc = F))) +
geom_rect( aes(xmin = -Inf, xmax = Inf, ymin = 15, ymax = 25), fill = "grey93") +
geom_hline(yintercept = 20, color="grey48", size=1, linetype=1) +
theme_bw(base_size = 15) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if using jitter to avoid duplicated points.
geom_jitter(color="black", width=0.2) +
ggtitle("My title" ) +
labs(x=element_blank(), y="City (mpg)", fill = "Drive")
UserNameColors <- c("#e6194b",
"#3cb44b",
"#ffe119",
"#4363d8",
"#f58231",
"#911eb4",
"#42d4f4",
"#f032e6",
"#bfef45",
"#fabebe",
"#469990",
"#e6beff",
"#9a6324",
"#fffac8",
"#800000",
"#aaffc3",
"#808000",
"#ffd8b1",
"#000075",
"#a9a9a9",
"#000000",
"#ffffff",
"#7460d2",
"#ff0000",
"#ec943c",
"#faee69",
"#0055fd",
"#ff007e",
"#4d4949",
"#a6f1ff",
"#2dff00",
"#ff6300",
"#965353",
"#4600f8")
names(UserNameColors) <- c("MCTs03", "MCTs07", "MCTs22", "MCTs10", "MCTs13", "MCTs14",
"MCTs15", "MCTs16", "MCTs18", "MCTs20", "MCTs21", "MCTs09", "MCTs23",
"MCTs24", "MCTs25", "MCTs26", "MCTs32", "MCTs33", "MCTs35",
"MCTs01", "MCTs04", "MCTs05", "MCTs06", "MCTs08", "MCTs11",
"MCTs12", "MCTs19", "MCTs27", "MCTs28", "MCTs29", "MCTs31", "MCTs34",
"MCTs36", "MCTs37")
UserNameColors
is(UserNameColors)
source('http://bioconductor.org/biocLite.R')
biocLite('phyloseq')
source("https://raw.githubusercontent.com/joey711/phyloseq/master/inst/scripts/installer.R",
local = TRUE)
install_phyloseq(branch = "devel")
packageVersion("phyloseq")
# As suggested for opt-out option on testing by users, recommended by CRAN
# http://adv-r.had.co.nz/Testing.html
# Previously, best practice was to put all test files in inst/tests and ensure that R CMD check ran them by putting the following code in tests/test-all.R:
# library(testthat)
# library(yourpackage)
# test_package("yourpackage")
# Now, recommended practice is to put your tests in tests/testthat, and ensure R CMD check runs them by putting the following code in tests/test-all.R:
# library(testthat)
# test_check("yourpackage")
# The advantage of this new structure is that the user has control over whether or not tests are installed using the âinstall-tests parameter to R CMD install, or INSTALL_opts = c(ââinstall-testsâ) argument to install.packages(). Iâm not sure why you wouldnât want to install the tests, but now you have the flexibility as requested by CRAN maintainers.
test_check("phyloseq")
# As suggested for opt-out option on testing by users, recommended by CRAN
# http://adv-r.had.co.nz/Testing.html
# Previously, best practice was to put all test files in inst/tests and ensure that R CMD check ran them by putting the following code in tests/test-all.R:
library(testthat)
data(GlobalPatterns)
# Create a pretend OTU table that you read from a file, called otumat
otumat = matrix(sample(1:100, 100, replace = TRUE), nrow = 10, ncol = 10)
otumat
rownames(otumat) <- paste0("OTU", 1:nrow(otumat))
colnames(otumat) <- paste0("Sample", 1:ncol(otumat))
otumat
taxmat = matrix(sample(letters, 70, replace = TRUE), nrow = nrow(otumat), ncol = 7)
taxmat
rownames(taxmat) <- rownames(otumat)
colnames(taxmat) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
taxmat
library("phyloseq")
OTU = otu_table(otumat, taxa_are_rows = TRUE)
TAX = tax_table(taxmat)
OTU
TAX
physeq = phyloseq(OTU, TAX)
physeq
plot_bar(physeq, fill = "Family")
# other types of data.
sampledata = sample_data(data.frame(
Location = sample(LETTERS[1:4], size=nsamples(physeq), replace=TRUE),
Depth = sample(50:1000, size=nsamples(physeq), replace=TRUE),
row.names=sample_names(physeq),
stringsAsFactors=FALSE
))
sampledata
# phylogenetic tree.
library("ape")
random_tree = rtree(ntaxa(physeq), rooted=TRUE, tip.label=taxa_names(physeq))
random_tree
sampledata
plot(random_tree)
# Combine
physeq1 = merge_phyloseq(physeq, sampledata, random_tree)
physeq1
physeq2 = phyloseq(OTU, TAX, sampledata, random_tree)
physeq2
identical(physeq1, physeq2)
plot_tree(physeq1, color="Location",
label.tips="taxa_names",
ladderize="left", plot.margin=0.3)
plot_tree(physeq1, color="Depth", shape="Location",
label.tips="taxa_names", ladderize="right",
plot.margin=0.3)
plot_heatmap(physeq1)
plot_heatmap(physeq1, taxa.label="Phylum")
?plot_heatmap
rich_dense_biom  = system.file("extdata", "rich_dense_otu_table.biom",  package="phyloseq")
rich_sparse_biom = system.file("extdata", "rich_sparse_otu_table.biom", package="phyloseq")
min_dense_biom   = system.file("extdata", "min_dense_otu_table.biom",   package="phyloseq")
min_sparse_biom  = system.file("extdata", "min_sparse_otu_table.biom",  package="phyloseq")
treefilename = system.file("extdata", "biom-tree.phy",  package="phyloseq")
refseqfilename = system.file("extdata", "biom-refseq.fasta",  package="phyloseq")
import_biom(rich_dense_biom, treefilename,
refseqfilename, parseFunction=parse_taxonomy_greengenes)
import_biom(min_dense_biom, treefilename,
refseqfilename, parseFunction=parse_taxonomy_greengenes)
myData = import_biom(rich_dense_biom, treefilename,
refseqfilename, parseFunction=parse_taxonomy_greengenes)
myData
plot_tree(myData, color="Genus", shape="BODY_SITE", size="abundance")
plot_richness(myData, x="BODY_SITE", color="Description")
plot_bar(myData, fill="Genus")
refseq(myData)
source(Methods.R)
setwd("E:/MSU OneDrive 20210829/ContinuingEd/22. R source")
source(Methods.R)
source("Methods.R")
# Name the main directory for future use.
main.wd <- file.path(getwd())
main.wd
library("phyloseq"); packageVersion("phyloseq")
library("ggplot2"); packageVersion("ggplot2")
theme_set(theme_bw())
# Import source code to run the analyses to follow.
source("../lib/load_and_check.R")
# Import source code to run the analyses to follow.
source("../lib/load_and_check.R")
setwd("~/GitHub/dietary_patterns")
setwd("~/GitHub/dietary_patterns/users")
# Import source code to run the analyses to follow.
source("../lib/load_and_check.R")
# Import source code to run the analyses to follow.
source("../lib/load_and_check.R")
# Name the main directory for future use.
main.wd <- file.path(getwd())
main.wd
SpecifyDataDirectory("../eg_data/dietstudy//")
SpecifyDataDirectory("../eg_data/dietstudy//")
SpecifyDataDirectory("../eg_data/dietstudy//")
