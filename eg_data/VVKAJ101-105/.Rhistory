setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Import source code to run the analyses to follow.
source("lib/specify_dir_and_check_col.R")
# Call color palette.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# You can come back to the main directory by:
setwd(main_wd)
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
PrepLinePlot <- function(inputdf, day, username, all.fn, full.days.only.fn, partial.days.only.fn){
df <- inputdf
# Define users and days in your df
users <- unique(df[, username])
days  <- order(unique(df[, day]), decreasing = F)
# Make day as a factor.
df[, day]  <-  factor(df[, day])
# Create a character vector to be "users"
usersvector = rep(users, length(days))
# Create a character vector to be "days"
daysvector <- character(0)
k = length(users)
# Repeat each day as many as there are users.
for(i in 1:length(days)){
if(i==1){daysvector = rep(days[i], k)}else{daysvector = c(daysvector, rep(days[i], k) ) }
}
full_user_day <-  data.frame(UserName = usersvector, RecallNo = daysvector)
# Add a column of user_day
full_user_day$User_Day = paste(full_user_day$UserName, full_user_day$RecallNo, sep="_")
# Change the colnames slightly so that .x or .y won't be inserted after merging.
# Leave "User_Day" as is, because this is needed for merging.
colnames(full_user_day) <- c("UserName_a", "RecallNo_a", "User_Day")
print(full_user_day)
# Also add a column of user_day to df.
# df may already have User_Day, but it won't hurt to make it again.
# df$User_Day = paste(df$UserName, df$RecallNo, sep="_")
df$User_Day = paste(df[, username], df[, day], sep="_")
# Merge, so that the rows absent in full_user_day will be NA.
df_w_NA <<- merge(x=full_user_day, y=df, by="User_Day", all.x=TRUE)
print('df_w_NA is')
print(df_w_NA)
# pick up UserName that has NA values
NAonlyrows <- df_w_NA[ is.na(df_w_NA[, username]), ]
print('NAonlyrows is')
print(NAonlyrows)
# vector of partial users
partial_users <- unique(NAonlyrows$UserName_a) # UserName_a has actual UserNames.
# pick up df records of users who are not partial.
# First, get T or F for each row of df
partialTF <- df[, username] %in% partial_users
# Then, take only rows that are marked as T.
df_partial <- df[partialTF, ]
# Define "Not in"
`%!in%` <- Negate(`%in%`)
# First, get T or F for each row of df
fullonlyTF <-  df[, username] %!in% partial_users
# Then, take only rows that are marked as T.
df_fullonly <- df[fullonlyTF, ]
# full_df <<- subset(df, !Users %in% partial_users)  #####  this one is problematic #####
# full_users <- unique(rows_wo_NA$UserName_a)
#
# print('full_users is')
# print(full_users)
#
# full_users <- unique(full_df[, username]) # Not needed for ggplot, but FYI...
# all data with NA inserted
write.table( x=df_w_NA, file = all.fn, sep="\t", row.names = F, quote=F)
# Save users' rows with full data only
write.table( x=df_fullonly, file = full.days.only.fn, sep="\t", row.names = F, quote=F)
# Save users' rows with partial data only
write.table( x=df_partial, file = partial.days.only.fn, sep="\t", row.names = F, quote=F)
}
# Example dataframe
df = data.frame(Users= c("VVKAJ102", "VVKAJ102", "VVKAJ103", "VVKAJ103", "VVKAJ103", "VVKAJ104", "VVKAJ104", "VVKAJ104", "VVKAJ105", "VVKAJ105"),
KCAL = c(1440, 1834, 1345, 2541, 1735, 2772, 1883, 2675, 2544, 1323),
Day = c("1", "3", "1", "2", "3", "1", "2", "3", "2", "3"))
PrepLinePlot <- function(inputdf, day, username, all.fn, full.days.only.fn, partial.days.only.fn){
df <- inputdf
# Define users and days in your df
users <- unique(df[, username])
days  <- order(unique(df[, day]), decreasing = F)
# Make day as a factor.
df[, day]  <-  factor(df[, day])
# Create a character vector to be "users"
usersvector = rep(users, length(days))
# Create a character vector to be "days"
daysvector <- character(0)
k = length(users)
# Repeat each day as many as there are users.
for(i in 1:length(days)){
if(i==1){daysvector = rep(days[i], k)}else{daysvector = c(daysvector, rep(days[i], k) ) }
}
full_user_day <-  data.frame(UserName = usersvector, RecallNo = daysvector)
# Add a column of user_day
full_user_day$User_Day = paste(full_user_day$UserName, full_user_day$RecallNo, sep="_")
# Change the colnames slightly so that .x or .y won't be inserted after merging.
# Leave "User_Day" as is, because this is needed for merging.
colnames(full_user_day) <- c("UserName_a", "RecallNo_a", "User_Day")
print(full_user_day)
# Also add a column of user_day to df.
# df may already have User_Day, but it won't hurt to make it again.
# df$User_Day = paste(df$UserName, df$RecallNo, sep="_")
df$User_Day = paste(df[, username], df[, day], sep="_")
# Merge, so that the rows absent in full_user_day will be NA.
df_w_NA <<- merge(x=full_user_day, y=df, by="User_Day", all.x=TRUE)
print('df_w_NA is')
print(df_w_NA)
# pick up UserName that has NA values
NAonlyrows <- df_w_NA[ is.na(df_w_NA[, username]), ]
print('NAonlyrows is')
print(NAonlyrows)
# vector of partial users
partial_users <- unique(NAonlyrows$UserName_a) # UserName_a has actual UserNames.
# pick up df records of users who are not partial.
# First, get T or F for each row of df
partialTF <- df[, username] %in% partial_users
# Then, take only rows that are marked as T.
df_partial <- df[partialTF, ]
# Define "Not in"
`%!in%` <- Negate(`%in%`)
# First, get T or F for each row of df
fullonlyTF <-  df[, username] %!in% partial_users
# Then, take only rows that are marked as T.
df_fullonly <- df[fullonlyTF, ]
# full_df <<- subset(df, !Users %in% partial_users)  #####  this one is problematic #####
# full_users <- unique(rows_wo_NA$UserName_a)
#
# print('full_users is')
# print(full_users)
#
# full_users <- unique(full_df[, username]) # Not needed for ggplot, but FYI...
# all data with NA inserted
write.table( x=df_w_NA, file = all.fn, sep="\t", row.names = F, quote=F)
# Save users' rows with full data only
write.table( x=df_fullonly, file = full.days.only.fn, sep="\t", row.names = F, quote=F)
# Save users' rows with partial data only
write.table( x=df_partial, file = partial.days.only.fn, sep="\t", row.names = F, quote=F)
}
df
PrepLinePlot(inputdf=df, day="Day", username="Users",
all.fn=           "df_UserDay_wNA.txt",
full.days.only.fn="df_UserDay_fullonly.txt",
partial.days.only.fn='df_UserDay_partialonly.txt')
# Load your QC-ed totals data to be analyzed.
tot_m_QCed <- read.table("VVKAJ_2021-11-09_7963_Tot_m_QCed.txt", sep="\t", header=T)
# Note that each row is a total dietary intake of each user on each day.
head(tot_m_QCed)
# Define ggpplot theme - white background, no inner grid.
theme_set(theme_bw(base_size = 14))
no_grid <- theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Load ggplot2 package if you have not done so.
library(ggplot2)
# Define ggpplot theme - white background, no inner grid.
theme_set(theme_bw(base_size = 14))
no_grid <- theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# ---------------------------------------------------------------------------------------------------------------
# Boxplot of KCAL by users. This is a variation of the days, and note that
# some users may have less number of days due to QC.
ggplot(tot_m_QCed, aes(x=UserName, y=KCAL)) +
geom_boxplot() + no_grid
# Boxplot of KCAL by gender.
ggplot(tot_m_QCed, aes(x=Gender, y=KCAL)) +
geom_boxplot() + no_grid
PrepLinePlot(inputdf= tot_m_QCed, day="RecallNo", username="UserName",
all.fn=           "VVKAJ_2021-11-09_7963_Tot_m_QCed_wNA.txt",
full.days.only.fn="VVKAJ_2021-11-09_7963_Tot_m_QCed_fullonly.txt",
partial.days.only.fn="VVKAJ_2021-11-09_7963_Tot_m_QCed_partialonly.txt")
PrepLinePlot <- function(inputdf, day, username, all.fn, full.days.only.fn, partial.days.only.fn){
df <- inputdf
# Define users and days in your df
users <- unique(df[, username])
days  <- order(unique(df[, day]), decreasing = F)
# Make day as a factor.
df[, day]  <-  factor(df[, day])
# Create a character vector to be "users"
usersvector = rep(users, length(days))
# Create a character vector to be "days"
daysvector <- character(0)
k = length(users)
# Repeat each day as many as there are users.
for(i in 1:length(days)){
if(i==1){daysvector = rep(days[i], k)}else{daysvector = c(daysvector, rep(days[i], k) ) }
}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create a dataframe with UserName and RecallNo.
full_user_day <-  data.frame(UserName = usersvector, RecallNo = daysvector)
# Add a column of user_day
full_user_day$User_Day = paste(full_user_day$UserName, full_user_day$RecallNo, sep="_")
# Change the colnames slightly so that .x or .y won't be inserted after merging.
# Leave "User_Day" as is, because this is needed for merging.
colnames(full_user_day) <- c("UserName_a", "RecallNo_a", "User_Day")
# Also add a column of user_day to df.
# df may already have User_Day, but it won't hurt to make it again.
# df$User_Day = paste(df$UserName, df$RecallNo, sep="_")
df$User_Day = paste(df[, username], df[, day], sep="_")
# Merge, so that the rows absent in full_user_day will be NA.
df_w_NA <<- merge(x=full_user_day, y=df, by="User_Day", all.x=TRUE)
# all data with NA inserted
write.table( x=df_w_NA, file = all.fn, sep="\t", row.names = F, quote=F)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# pick up UserName that has NA values
NAonlyrows <- df_w_NA[ is.na(df_w_NA[, username]), ]
# vector of partial users
partial_users <- unique(NAonlyrows$UserName_a) # UserName_a has actual UserNames.
# pick up df records of users who are not partial.
# First, get T or F for each row of df
partialTF <- df[, username] %in% partial_users
# Then, take only rows that are marked as T.
df_partial <- df[partialTF, ]
# Save users' rows with partial data only
write.table( x=df_partial, file = partial.days.only.fn, sep="\t", row.names = F, quote=F)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Define "Not in"
`%!in%` <- Negate(`%in%`)
# First, get T or F for each row of df
fullonlyTF <-  df[, username] %!in% partial_users
# Then, take only rows that are marked as T.
df_fullonly <- df[fullonlyTF, ]
# Save users' rows with full data only
write.table( x=df_fullonly, file = full.days.only.fn, sep="\t", row.names = F, quote=F)
}
# Prepare your totals dataset for line plot - insert NA to missing combinations of UserName and RecallNo (day),
# and separate rows into NA's and no NAs.
PrepLinePlot(inputdf= tot_m_QCed, day="RecallNo", username="UserName",
all.fn=           "VVKAJ_2021-11-09_7963_Tot_m_QCed_wNA.txt",
full.days.only.fn="VVKAJ_2021-11-09_7963_Tot_m_QCed_fullonly.txt",
partial.days.only.fn="VVKAJ_2021-11-09_7963_Tot_m_QCed_partialonly.txt")
# Load the files.
tot_m_QCed_all_w_NA <- read.table("VVKAJ_2021-11-09_7963_Tot_m_QCed_wNA.txt", sep="\t", header=T)
tot_m_QCed_all_fullonly <- read.table("VVKAJ_2021-11-09_7963_Tot_m_QCed_fullonly.txt", sep="\t", header=T)
tot_m_QCed_all_partialonly <- read.table("VVKAJ_2021-11-09_7963_Tot_m_QCed_partialonly.txt", sep="\t", header=T)
ggplot() +
geom_point(tot_m_QCed_all_w_NA, mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName)) +
geom_line(tot_m_QCed_all_fullonly, mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName),
linetype="dashed") +
no_grid
# Make RecallNo as a factor.
tot_m_QCed_all_w_NA$RecallNo <- as.factor(tot_m_QCed_all_w_NA$RecallNo)
ggplot() +
geom_point(tot_m_QCed_all_w_NA, mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName)) +
geom_line(tot_m_QCed_all_fullonly, mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName),
linetype="dashed") +
no_grid
tot_m_QCed_all_fullonly$RecallNo <- as.factor(tot_m_QCed_all_fullonly$RecallNo)
tot_m_QCed_all_partialonly$RecallNo <- as.factor(tot_m_QCed_all_partialonly$RecallNo)
ggplot() +
geom_point(tot_m_QCed_all_w_NA, mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName)) +
geom_line(tot_m_QCed_all_fullonly, mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName),
linetype="dashed") +
no_grid
ggplot() +
geom_point(tot_m_QCed_all, mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName)) +
geom_line(tot_m_QCed_all_fullonly, mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName),
linetype="dashed") +
no_grid
# Load the files.
tot_m_QCed_w_NA <- read.table("VVKAJ_2021-11-09_7963_Tot_m_QCed_wNA.txt", sep="\t", header=T)
tot_m_QCed_fullonly <- read.table("VVKAJ_2021-11-09_7963_Tot_m_QCed_fullonly.txt", sep="\t", header=T)
tot_m_QCed_partialonly <- read.table("VVKAJ_2021-11-09_7963_Tot_m_QCed_partialonly.txt", sep="\t", header=T)
# Make RecallNo as a factor.
tot_m_QCed_w_NA$RecallNo <- as.factor(tot_m_QCed_w_NA$RecallNo)
tot_m_QCed_fullonly$RecallNo <- as.factor(tot_m_QCed_fullonly$RecallNo)
tot_m_QCed_partialonly$RecallNo <- as.factor(tot_m_QCed_partialonly$RecallNo)
ggplot() +
geom_point(tot_m_QCed, mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName)) +
geom_line(tot_m_QCed_all_fullonly, mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName),
linetype="dashed") +
no_grid
ggplot() +
geom_point(tot_m_QCed, mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName)) +
geom_line(tot_m_QCed_fullonly, mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName),
linetype="dashed") +
no_grid
# Load the files.
tot_m_QCed_w_NA <- read.table("VVKAJ_2021-11-09_7963_Tot_m_QCed_wNA.txt", sep="\t", header=T)
tot_m_QCed_fullonly <- read.table("VVKAJ_2021-11-09_7963_Tot_m_QCed_fullonly.txt", sep="\t", header=T)
tot_m_QCed_partialonly <- read.table("VVKAJ_2021-11-09_7963_Tot_m_QCed_partialonly.txt", sep="\t", header=T)
tot_m_QCed
# Make RecallNo as a factor.
tot_m_QCed$RecallNo <- as.factor(tot_m_QCed$RecallNo)
ggplot() +
geom_point(tot_m_QCed, mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName)) +
geom_line(tot_m_QCed_fullonly, mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName),
linetype="dashed") +
no_grid
ggplot() +
geom_point(tot_m_QCed, mapping = aes(x=RecallNo, y=TFAT, group=UserName, color=UserName)) +
geom_line(tot_m_QCed_fullonly, mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName),
linetype="dashed") + no_grid
ggplot() +
geom_point(tot_m_QCed,         mapping = aes(x=RecallNo, y=TFAT, group=UserName, color=UserName)) +
geom_line(tot_m_QCed_fullonly, mapping = aes(x=RecallNo, y=TFAT, group=UserName, color=UserName),
linetype="dashed") + no_grid
# ---------------------------------------------------------------------------------------------------------------
# Boxplot of KCAL by users. This is a variation of the days, and note that
# some users may have less number of days due to QC.
ggplot(tot_m_QCed, aes(x=UserName, y=KCAL)) +
geom_boxplot() + no_grid
# Boxplot of KCAL by gender.
ggplot(tot_m_QCed, aes(x=Gender, y=KCAL)) +
geom_boxplot() + no_grid
# Scaterplot of two variables.
ggplot(tot_m_QCed, aes(x=TFAT, y=KCAL)) +
geom_point() + no_grid
# Test if the two variables are correlated.
# The output should show p-value and R correlation coefficient
cor.test(x=tot_m_QCed$TFAT, y=tot_m_QCed$KCAL)
