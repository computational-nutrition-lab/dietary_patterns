write.table(V1table, "clipboard", sep="\t", row.names = F)
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
V1table = as.data.frame(table(mydata$V1))
V1table
length(unique(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
sortedV1table = V1table[ order(V1table$Freq, decreasing = T), ]  # sort by col totals
write.table(sortedV1table, "clipboard", sep="\t", row.names = F)
# generate a two-way parents' frequency table
female = read.table(file="clipboard", sep="\t", header=T)
head(female, 20)
nrow(female)
# generate a two-way parents' frequency table
female = read.table(file="clipboard", sep="\t", header=F)
head(female, 20)
nrow(female)
names(female)
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
sortedV1table = V1table[ order(V1table$Freq, decreasing = T), ]  # sort by col totals
write.table(sortedV1table, "clipboard", sep="\t", row.names = F)
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
sortedV1table = V1table[ order(V1table$Freq, decreasing = T), ]  # sort by col totals
write.table(sortedV1table, "clipboard", sep="\t", row.names = F)
# generate a two-way parents' frequency table
female = read.table(file="clipboard", sep="\t", header=F)
head(female, 20)
nrow(female)
# generate a two-way parents' frequency table
female = read.table(file="clipboard", sep="\t", header=F)
head(female, 20)
nrow(female)
names(female)[2] <- "female_freq"
male = read.table(file="clipboard", sep="\t", header=T)
head(male, 20)
nrow(male)
nrow(male)
names(male)[2] <- "male_freq"
head(female, 20)
# generate a two-way parents' frequency table
female = read.table(file="clipboard", sep="\t", header=T)
head(female, 20)
nrow(female)
names(female)[2] <- "female_freq"
head(female, 20)
head(male, 20)
fandm <- merge(x=female, y=male, all = T, by="Val1")
fandm <- merge(x=female, y=male, all = T, by="Var1")
head(fandm)
# replace NAs with zero.
fandm_zeros[ is.na(fandm_zeros) ] <- 0
fandm_zeros <- fandm # make a copy
# replace NAs with zero.
fandm_zeros[ is.na(fandm_zeros) ] <- 0
head(fandm_zeros)
write.table(fandm_zeros, "clipboard", sep='\t', row.names = F)
ttwoway <- fandm_zeros
Total = colSums(t(ttwoway)) # Column totals
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
sortedV1table = V1table[ order(V1table$Freq, decreasing = T), ]  # sort by col totals
write.table(V1table, "clipboard", sep="\t", row.names = F)
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# You can come back to the main directory by:
setwd(main_wd)
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
# Import source code to run the analyses to follow.
source("lib/specify_dir_and_check_col.R")
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
# Load your items data to be analyzed.
items_f_s_m <- read.table("VVKAJ_2021-11-09_7963_Items_f_s_m.txt", sep="\t", header=T)
head(items_f_s_m)
summary(items_f_s_m$KCAL)
# View standard deviation.
sd(items_f_s_m$KCAL)
# plot
boxplot(items_f_s_m$KCAL)
# plot
histogram(items_f_s_m$KCAL)
# plot
histo(items_f_s_m$KCAL)
# plot
hist(items_f_s_m$KCAL)
# Create an empty table to save results.
summarybox <- data.frame(Variables=names(items_f_s_m),
Min=NA, FirstQu=NA, Median=NA, Mean=NA, ThirdQu=NA, Max=NA, SD=NA)
# Define input.
input <- items_f_s_m
# For each column (variable), calculate summary statistics. If not numeric, indicate so.
for(i in 1:ncol(input)){
ith_col <- input[, i]
# if numeric, calculate summary stats.
if(is.numeric(ith_col)){
summarybox[i, 2] <- min(ith_col)
summarybox[i, 3] <- quantile(ith_col, 0.25)
summarybox[i, 4] <- median(ith_col)
summarybox[i, 5] <- mean(ith_col)
summarybox[i, 6] <- quantile(ith_col, 0.75)
summarybox[i, 7] <- max(ith_col)
summarybox[i, 8] <- sd(ith_col)
}else{
# if not numeric, say not numeric.
summarybox[i, 2:8] <- "not_numeric"
}
}
summarybox
names(items_f_s_m)
# Create an empty table to save results.
summarybox <- data.frame(Variables=names(items_f_s_m),
Min=NA, FirstQu=NA, Median=NA, Mean=NA, ThirdQu=NA, Max=NA, SD=NA)
summarybox
# Define input.
input <- items_f_s_m
# For each column (variable), calculate summary statistics. If not numeric, indicate so.
for(i in 1:ncol(input)){
ith_col <- input[, i]
# if numeric, calculate summary stats.
if(is.numeric(ith_col)){
summarybox[i, 2] <- min(ith_col)
summarybox[i, 3] <- quantile(ith_col, 0.25)
summarybox[i, 4] <- median(ith_col)
summarybox[i, 5] <- mean(ith_col)
summarybox[i, 6] <- quantile(ith_col, 0.75)
summarybox[i, 7] <- max(ith_col)
summarybox[i, 8] <- sd(ith_col)
}else{
# if not numeric, say not numeric.
summarybox[i, 2:8] <- "not_numeric"
}
}
summarybox
# Generate a boxplot to see variables' distribution.
library(ggplot2)
items_f_s_m
# Generate a boxplot with several variables.
# Variables to plot
ggplot(items_f_s_m, aes(x=UserName, y=KCAL)) +
geom_boxplot()
# Define ggpplot theme - white background
theme_set(theme_bw(base_size = 14))
# Generate a boxplot with several variables.
# Variables to plot
ggplot(items_f_s_m, aes(x=UserName, y=KCAL)) +
geom_boxplot()
# Boxplot by gender.
ggplot(items_f_s_m, aes(x=Gender, y=KCAL)) +
geom_boxplot()
# Scaterplot of two variables.
ggplot(items_f_s_m, aes(x=KCAL, y=TFAT)) +
geom_point()
names(items_f_s_m)
ggplot(items_f_s_m, aes(x=KCAL, y=FoodAmt)) +
geom_point()
ggplot(items_f_s_m, aes(x=MOIS, y=FoodAmt)) +
geom_point()
ggplot(items_f_s_m, aes(x=MOIS, y=FoodAmt)) +
geom_point()
ggplot(items_f_s_m, aes(x=MOIS, y=TFAT)) +
geom_point()
ggplot(items_f_s_m, aes(x=KCAL, y=TFAT)) +
geom_point()
# Scaterplot of two variables.
ggplot(items_f_s_m, aes(x=TFAT, y=KCAL)) +
geom_point()
# Define ggpplot theme - white background
theme_set(theme_bw(base_size = 14),
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank() ))
# Define ggpplot theme - white background
theme_set(theme_bw(base_size = 14,
)
)
# Define ggpplot theme - white background
theme_set(theme_bw(base_size = 14,
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())))
NoInnerGrid <- theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Define ggpplot theme - white background
theme_set(theme_bw(base_size = 14))
NoInnerGrid <- theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
no_grid <- theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Boxplot by users.
ggplot(items_f_s_m, aes(x=UserName, y=KCAL)) +
geom_boxplot() + no_grid
# Boxplot by gender.
ggplot(items_f_s_m, aes(x=Gender, y=KCAL)) +
geom_boxplot() + no_grid
# Boxplot by gender.
ggplot(items_f_s_m, aes(x=Gender, y=KCAL)) +
geom_boxplot() #+ no_grid
# Boxplot by gender.
ggplot(items_f_s_m, aes(x=Gender, y=KCAL)) +
geom_boxplot() + no_grid
# Scaterplot of two variables.
ggplot(items_f_s_m, aes(x=TFAT, y=KCAL)) +
geom_point() + no_grid
# Test if the two variables are correlated.
cor.test(x=items_f_s_m$TFAT, y=items_f_s_m$KCAL)
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
# Load your QC-ed totals data to be analyzed.
tot_m_QCed <- read.table("VVKAJ_2021-11-09_7963_Tot_m_QCed.txt", sep="\t", header=T)
head(tot_m_QCed)
# View min, quantiles, mean, etc. for a variable in your dataset.
summary(tot_m_QCed$KCAL)
# View min, quantiles, mean, etc. for a variable in your dataset.
summary(items_f_s_m$KCAL)
# View min, quantiles, mean, etc. for a variable in your dataset.
summary(tot_m_QCed$KCAL)
SummaryStats <- function(inputdf, outfn){
# Create an empty table to save results.
summarybox <- data.frame(Variables=names(inputdf),
Min=NA, FirstQu=NA, Median=NA, Mean=NA, ThirdQu=NA, Max=NA, SD=NA)
# Define input.
input <- inputdf
# For each column (variable), calculate summary statistics. If not numeric, indicate so.
for(i in 1:ncol(input)){
ith_col <- input[, i]
# if numeric, calculate summary stats.
if(is.numeric(ith_col)){
summarybox[i, 2] <- min(ith_col)
summarybox[i, 3] <- quantile(ith_col, 0.25)
summarybox[i, 4] <- median(ith_col)
summarybox[i, 5] <- mean(ith_col)
summarybox[i, 6] <- quantile(ith_col, 0.75)
summarybox[i, 7] <- max(ith_col)
summarybox[i, 8] <- sd(ith_col)
}else{
# if not numeric, say not numeric.
summarybox[i, 2:8] <- "not_numeric"
}
}
# Save the summary information.
write.table(summarybox, file=outfn, sep="\t", row.names=F, quote=F)
}
SummaryStats(inputdf = items_f_s_m, outfn = "VVKAJ_2021-11-09_7963_Items_f_s_m_summ_fun.txt")
SummaryStats <- function(inputdf, outfn){
# Create an empty table to save results.
summarybox <- data.frame(Variables=names(inputdf),
Min=NA, FirstQu=NA, Median=NA, Mean=NA, ThirdQu=NA, Max=NA, SD=NA)
# Define input.
input <- inputdf
# For each column (variable), calculate summary statistics. If not numeric, indicate so.
for(i in 1:ncol(input)){
ith_col <- input[, i]
# if numeric, calculate summary stats.
if(is.numeric(ith_col)){
summarybox[i, 2] <- min(ith_col)
summarybox[i, 3] <- quantile(ith_col, 0.25)
summarybox[i, 4] <- median(ith_col)
summarybox[i, 5] <- mean(ith_col)
summarybox[i, 6] <- quantile(ith_col, 0.75)
summarybox[i, 7] <- max(ith_col)
summarybox[i, 8] <- sd(ith_col)
}else{
# if not numeric, say not numeric.
summarybox[i, 2:8] <- "not_numeric"
}
}
# Save the summary information.
write.table(summarybox, file=outfn, sep="\t", row.names=F, quote=F)
}
# You can come back to the main directory by:
setwd(main_wd)
source("lib/data_overview.R")
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
View(SummaryStats)
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
# Load your QC-ed totals data to be analyzed.
tot_m_QCed <- read.table("VVKAJ_2021-11-09_7963_Tot_m_QCed.txt", sep="\t", header=T)
# ---------------------------------------------------------------------------------------------------------------
# Summary statistics of one variable
SummaryStats(inputdf = tot_m_QCed,
outfn = "VVKAJ_2021-11-09_7963_Tot_m_QCed_summ.txt")
# ---------------------------------------------------------------------------------------------------------------
# Summary statistics of all the variables
# Calculate minimum, 1st quantile, median, mean, 3rd quantile, max, and standard deviation
# for each variable in the input dataframe and save as a .txt file.
SummaryStats(inputdf = items_f_s_m,
outfn = "VVKAJ_2021-11-09_7963_Items_f_s_m_summ.txt")
# Boxplot of KCAL by users.
ggplot(items_f_s_m, aes(x=UserName, y=KCAL)) +
geom_boxplot() + no_grid
# Boxplot of KCAL by users.
ggplot(tot_m_QCed, aes(x=UserName, y=KCAL)) +
geom_boxplot() + no_grid
# Lineplot
ggplot(tot_m_QCed, aes(x=UserName, y=KCAL)) +
geom_point() +
geom_line() +
no_grid
names(tot_m_QCed)
# Lineplot
ggplot(tot_m_QCed, aes(x=RecallNo, y=KCAL, group=UserName)) +
geom_line() +
geom_point() +
no_grid
# Lineplot
ggplot(tot_m_QCed, aes(x=as.factor(RecallNo), y=KCAL, group=UserName)) +
geom_line() +
geom_point() +
no_grid
# Lineplot
ggplot(tot_m_QCed, aes(x=as.factor(RecallNo), y=KCAL, group=UserName)) +
geom_line(linetype="dashed") +
geom_point() +
no_grid
# Lineplot
ggplot(tot_m_QCed, aes(x=as.factor(RecallNo), y=KCAL, group=UserName)) +
geom_line(linetype="dashed") +
geom_point() #+
# Lineplot
ggplot(tot_m_QCed, aes(x=as.factor(RecallNo), y=KCAL, group=UserName)) +
geom_line(linetype="dashed") +
geom_point() +
no_grid
# Lineplot
ggplot(tot_m_QCed, aes(x=as.factor(RecallNo), y=KCAL, group=UserName)) +
geom_line(linetype="dashed", aes(color=UserName)) +
geom_point(aes(color=UserName)) +
no_grid
# Call color palette.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# Call color palette.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# You can come back to the main directory by:
setwd(main_wd)
# Call color palette.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
# Lineplot
ggplot(tot_m_QCed, aes(x=as.factor(RecallNo), y=KCAL, group=UserName)) +
geom_line(linetype="dashed", aes(color=UserName)) +
geom_point(aes(color=UserName)) +
no_grid
# Lineplot
ggplot(tot_m_QCed, aes(x=as.factor(RecallNo), y=KCAL, group=UserName)) +
geom_line(linetype="dashed", aes(color=UserName)) +
geom_point(aes(color=UserName)) +
xlab("Day") +
no_grid
# Do not connect participants with missing days.
tot_m_QCed[, c("UserName", "KCAL", "RecallNo")]
# Lineplot
ggplot(tot_m_QCed, aes(x=as.factor(RecallNo), y=KCAL, group=UserName)) +
geom_path(linetype="dashed", aes(color=UserName)) +
geom_point(aes(color=UserName)) +
xlab("Day") + # Re-annotate the X-axis label.
no_grid
# Lineplot - on each day.
# Keep only participants with all 3 days of data.
tot_m_QCed_alldays <- subset(tot_m_QCed, nrow(RecallNo) ==3)
res = by(tot_m_QCed, list(tot_m_QCed$RecallNo), function(x){
c(users = unique(x$UserName),
counted = nrow(x))
})
df = do.call(rbind, res)
res = by(tot_m_QCed, list(tot_m_QCed$UserName), function(x){
c(users = unique(x$UserName),
counted = nrow(x))
})
df = do.call(rbind, res)
df
res = by(tot_m_QCed, list(tot_m_QCed$UserName), function(x){
c(users = unique(x$UserName),
counted = as.numeric(nrow(x)))
})
df = do.call(rbind, res)
df = do.call(rbind, res)
df
#
res = by(tot_m_QCed, list(tot_m_QCed$UserName), function(x){
c(users = unique(x$UserName),
recorded_days = nrow(x))
})
user_days = do.call(rbind, res)
user_days
user_days = do.call(rbind, res)
user_days
user_days = as.data.frame(do.call(rbind, res))
user_days
#
subset(user_days, recorded_days =3)
#
subset(user_days, recorded_days == 3)
#
subset(user_days, recorded_days == 3)[, "users"]
ggplot(full_users, aes(x=as.factor(RecallNo), y=KCAL, group=UserName)) +
geom_path(linetype="dashed", aes(color=UserName)) +
geom_point(aes(color=UserName)) +
xlab("Day") + # Re-annotate the X-axis label.
no_grid
# Pick up only the users with all 3 days of data.
full_users <- subset(user_days, recorded_days == 3)[, "users"]
user_days
full_users
full_users_TF <- tot_m_QCed$UserName %in% full_users
full_users_TF
# Take only the users whose names are in full_users
tot_m_QCed_full_users <- tot_m_QCed[full_users_TF, ]
tot_m_QCed_full_users
# Lineplot with
ggplot(tot_m_QCed_full_users, aes(x=as.factor(RecallNo), y=KCAL, group=UserName)) +
geom_path(linetype="dashed", aes(color=UserName)) +
geom_point(aes(color=UserName)) +
xlab("Day") + # Re-annotate the X-axis label.
no_grid
# Lineplot with
ggplot(tot_m_QCed_full_users, aes(x=as.factor(RecallNo), y=KCAL, group=UserName)) +
geom_path(linetype="dashed", aes(color=UserName)) +
geom_point(aes(color=UserName)) +
scale_colour_manual(values = distinct100colors) +
xlab("Day") + # Re-annotate the X-axis label.
no_grid
# Lineplot with
ggplot(tot_m_QCed_full_users, aes(x=as.factor(RecallNo), y=KCAL, group=UserName)) +
geom_path(linetype="dashed", aes(color=UserName)) +
geom_point(aes(color=UserName)) +
xlab("Day") + # Re-annotate the X-axis label.
no_grid
# ---------------------------------------------------------------------------------------------------------------
# Boxplot of KCAL by users. This is a variation of the days, and note that
# some users may have less number of days due to QC.
ggplot(tot_m_QCed, aes(x=UserName, y=KCAL)) +
geom_boxplot() + no_grid
# Boxplot of KCAL by gender.
ggplot(items_f_s_m, aes(x=Gender, y=KCAL)) +
geom_boxplot() + no_grid
# Boxplot of KCAL by gender.
ggplot(tot_m_QCed, aes(x=Gender, y=KCAL)) +
geom_boxplot() + no_grid
# Boxplot of KCAL by gender.
ggplot(items_f_s_m, aes(x=Gender, y=KCAL)) +
geom_boxplot() + no_grid
# Boxplot of KCAL by gender.
ggplot(tot_m_QCed, aes(x=Gender, y=KCAL)) +
geom_boxplot() + no_grid
full_users
# Scaterplot of two variables.
ggplot(tot_m_QCed, aes(x=TFAT, y=KCAL)) +
geom_point() + no_grid
# Test if the two variables are correlated.
# The output should show p-value and R correlation coefficient
cor.test(x=tot_m_QCed$TFAT, y=tot_m_QCed$KCAL)
data(iris)
names(iris)
iris
data(chicken)
data(mtcars)
mtcars
data(orange)
data(potato)
data()
data(airquality )
airquality
df = airquality[1:30, ]
tot_m_QCed
tot_m_QCed[, c("UserName", "KCAL", "RecordNo")]
tot_m_QCed[, c("UserName", "KCAL", "RecallNo")]
tot_m_QCed$RecallNo
paste(tot_m_QCed$RecallNo, sep = " ,")
paste(tot_m_QCed$UserName, sep = " ,")
paste(tot_m_QCed$KCAL, sep = " ,")
tot_m_QCed$KCAL
df = c(UserName= c("VVKAJ102", "VVKAJ102", "VVKAJ103", "VVKAJ103", "VVKAJ103", "VVKAJ104", "VVKAJ104", "VVKAJ104", "VVKAJ105", "VVKAJ105"),
KCAL = c(1440, 1834, 1345, 2541, 1735, 2772, 1883, 2675, 2544, 1323),
Day = c("1", "3", "1", "2", "3", "1", "2", "3", "2", "3"))
df
df = data.frame(UserName= c("VVKAJ102", "VVKAJ102", "VVKAJ103", "VVKAJ103", "VVKAJ103", "VVKAJ104", "VVKAJ104", "VVKAJ104", "VVKAJ105", "VVKAJ105"),
KCAL = c(1440, 1834, 1345, 2541, 1735, 2772, 1883, 2675, 2544, 1323),
Day = c("1", "3", "1", "2", "3", "1", "2", "3", "2", "3"))
df
# Lineplot with full_users.
ggplot(df, aes(x=as.factor(Day), y=KCAL, group=UserName)) +
geom_path(linetype="dashed", aes(color=UserName)) +
geom_point(aes(color=UserName))
tot_m_QCed$PROT
tot_m_QCed$FoodAmt
