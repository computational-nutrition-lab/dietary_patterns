}
myvar <- c('disp', 'hp', 'qsec')
results <-  list()
myvar
for(i in 1:length(myvar)){
if(i==1){
subsetted <- mtcars[, c('cyl','vs', myvar[i])]
restable <- aggregate(subsetted[, 3] ~ subsetted[, 1] + subsetted[, 2], subsetted, FUN = mean)
colnames(restable) <- c('cyl', 'vs', paste(myvar[i]))
restable$cyl_vs <- paste(restable$cyl, restable$vs, sep = "_")
restable_sub <- restable[, c(4, 3)]  # take only cyl_vs and means.
results[[i]] <- restable_sub
aggtable <<- restable_sub
}else if(i>1){
subsetted <- mtcars[, c('cyl','vs', myvar[i])]
restable <- aggregate(subsetted[, 3] ~ subsetted[, 1] + subsetted[, 2], subsetted, FUN = mean)
colnames(restable) <- c('cyl', 'vs', paste(myvar[i]))
restable$cyl_vs <- paste(restable$cyl, restable$vs, sep = "_")
restable_sub <- restable[, c(4, 3)] # take only cyl_vs and means.
results[[i]] <- restable_sub
aggtable <<- merge(aggtable, results[[i]], by="cyl_vs", all=T)
}
}
View(Items_raw2)
# Define variables to calculate means for.
myvar <- names(Items_raw2[, -c(1,2,3)])
myvar[1]
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[1])]
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[1])]
str(subsetted)
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[1]))
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]  # take only ID_c and means.
# Define variables to calculate means for.
myvar <- names(Items_raw2[, -c(1,2,3)])
myvar[1]
length(myvar)
# Calculate totals for each variable of nutrients and food items.
for(i in 1:length(myvar)){
if(i==1){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
print(myvar[i])
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2], + subsetted[, 3],
data=subsetted, FUN = mean)
print(myvar[i])
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
print(myvar[i])
print(restable)
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]  # take only ID_c and means.
results[[i]] <- restable_sub
Items_by_User_Occ <<- restable_sub
}else if(i>1){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2], + subsetted[, 3],
data=subsetted, FUN = mean)
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]
results[[i]] <- restable_sub
Items_by_User_Occ <<- merge(Items_by_User_Occ, results[[i]], by="ID_c", all=T)
# all=T takes care of missing data ... inserts NA for combinations not found
}
}
# Calculate totals for each variable of nutrients and food items.
for(i in 1:length(myvar)){
if(i==1){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
print(myvar[i])
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
print(myvar[i])
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
print(myvar[i])
print(restable)
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]  # take only ID_c and means.
results[[i]] <- restable_sub
Items_by_User_Occ <<- restable_sub
}else if(i>1){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]
results[[i]] <- restable_sub
Items_by_User_Occ <<- merge(Items_by_User_Occ, results[[i]], by="ID_c", all=T)
# all=T takes care of missing data ... inserts NA for combinations not found
}
}
# Calculate totals for each variable of nutrients and food items.
for(i in 1:length(myvar)){
if(i==1){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
# print(myvar[i])
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
# print(myvar[i])
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
# print(myvar[i])
# print(restable)
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]  # take only ID_c and means.
results[[i]] <- restable_sub
Items_by_User_Occ <<- restable_sub
}else if(i>1){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]
results[[i]] <- restable_sub
Items_by_User_Occ <<- merge(Items_by_User_Occ, results[[i]], by="ID_c", all=T)
# all=T takes care of missing data ... inserts NA for combinations not found
}
}
Items_by_User_Occ
# shorter version
for(i in 1:length(myvar)){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]  # take only ID_c and means.
results[[i]] <- restable_sub
if(i==1){
Items_by_User_Occ <<- restable_sub
}else if(i>1){
Items_by_User_Occ <<- merge(Items_by_User_Occ, results[[i]], by="ID_c", all=T)
# all=T takes care of missing data ... inserts NA for combinations not found
}
}
Items_by_User_Occ
# shorter version
for(i in 1:length(myvar)){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]  # take only ID_c and means.
results[[i]] <- restable_sub
if(i==1){
Items_by_User_Occ_s <<- restable_sub
}else if(i>1){
Items_by_User_Occ_s <<- merge(Items_by_User_Occ, results[[i]], by="ID_c", all=T)
# all=T takes care of missing data ... inserts NA for combinations not found
}
}
# Calculate totals for each variable of nutrients and food items.
for(i in 1:length(myvar)){
if(i==1){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
# print(myvar[i])
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
# print(myvar[i])
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
# print(myvar[i])
# print(restable)
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]  # take only ID_c and means.
results[[i]] <- restable_sub
Items_by_User_Occ <<- restable_sub
}else if(i>1){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]
results[[i]] <- restable_sub
Items_by_User_Occ <<- merge(Items_by_User_Occ, results[[i]], by="ID_c", all=T)
# all=T takes care of missing data ... inserts NA for combinations not found
}
}
View(Items_by_User_Occ_s)
View(Items_by_User_Occ)
write.table(Items_by_User_Occ, 'clipboard', sep = "\t")
write.table(Items_by_User_Occ_s, 'clipboard', sep = "\t")
View(Items_by_User_Occ)
# Base R version ==============================================================
# Get the index number of "FoodAmt" in dataframe Items_raw.
FoodAmt_Index_No <- grep("FoodAmt", colnames(Items_raw))
A_DRINKS_Index_No <- grep("A_DRINKS", colnames(Items_raw))
# Subset necessary columns.
Items_raw2 <- subset(Items_raw, select = c(UserName,
IntakeStartDateTime,
Occ_No,
FoodAmt_Index_No:A_DRINKS_Index_No))
head(Items_raw2)
# Define variables to calculate means for.
myvar <- names(Items_raw2[, -c(1,2,3)])
myvar[1]
# Create an empty list to store results.
results <-  list()
# Calculate totals for each variable of nutrients and food items.
for(i in 1:length(myvar)){
if(i==1){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
# print(myvar[i])
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
# print(myvar[i])
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
# print(myvar[i])
# print(restable)
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]  # take only ID_c and means.
results[[i]] <- restable_sub
Items_by_User_Occ <<- restable_sub
}else if(i>1){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]
results[[i]] <- restable_sub
Items_by_User_Occ <<- merge(Items_by_User_Occ, results[[i]], by="ID_c", all=T)
# all=T takes care of missing data ... inserts NA for combinations not found
}
}
# Create an empty list to store results.
results <-  list()
# shorter version
for(i in 1:length(myvar)){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]  # take only ID_c and means.
results[[i]] <- restable_sub
if(i==1){
Items_by_User_Occ_s <<- restable_sub
}else if(i>1){
Items_by_User_Occ_s <<- merge(Items_by_User_Occ, results[[i]], by="ID_c", all=T)
# all=T takes care of missing data ... inserts NA for combinations not found
}
}
write.table(Items_by_User_Occ_s, 'clipboard', sep = "\t")
colnames(Items_by_User_Occ)
colnames(Items_by_User_Occ_s)
Items_by_User_Occ_s[, c( "A_DRINKS.x", "A_DRINKS.y" )]
# shorter version
for(i in 1:length(myvar)){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]  # take only ID_c and means.
results[[i]] <- restable_sub
Items_by_User_Occ_s <<- restable_sub
if(i>1){
Items_by_User_Occ_s <<- merge(Items_by_User_Occ, results[[i]], by="ID_c", all=T)
# all=T takes care of missing data ... inserts NA for combinations not found
}
}
# Create an empty list to store results.
results <-  list()
# Define variables to calculate means for.
myvar <- names(Items_raw2[, -c(1,2,3)])
myvar[1]
# Calculate totals for each variable of nutrients and food items.
for(i in 1:length(myvar)){
if(i==1){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
# print(myvar[i])
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
# print(myvar[i])
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
# print(myvar[i])
# print(restable)
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]  # take only ID_c and means.
results[[i]] <- restable_sub
Items_by_User_Occ <<- restable_sub
}else if(i>1){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]
results[[i]] <- restable_sub
Items_by_User_Occ <<- merge(Items_by_User_Occ, results[[i]], by="ID_c", all=T)
# all=T takes care of missing data ... inserts NA for combinations not found
}
}
# shorter version
for(i in 1:length(myvar)){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]  # take only ID_c and means.
results[[i]] <- restable_sub
Items_by_User_Occ_s <<- restable_sub
if(i>1){
Items_by_User_Occ_s <<- merge(Items_by_User_Occ_s, results[[i]], by="ID_c", all=T)
# all=T takes care of missing data ... inserts NA for combinations not found
}
}
View(Items_by_User_Occ)
# Create an empty list to store results.
results <-  list()
# Calculate totals for each variable of nutrients and food items.
for(i in 1:length(myvar)){
if(i==1){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
# print(myvar[i])
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
# print(myvar[i])
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
# print(myvar[i])
# print(restable)
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]  # take only ID_c and means.
results[[i]] <- restable_sub
Items_by_User_Occ <<- restable_sub
}else if(i>1){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
restable$ID_c <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]
results[[i]] <- restable_sub
Items_by_User_Occ <<- merge(Items_by_User_Occ, results[[i]], by="ID_c", all=T)
# all=T takes care of missing data ... inserts NA for combinations not found
}
}
Items_by_User_Occ
write.csv(Items_by_User_Occ, "Items_by_User_Occ.csv")
# Create an empty list to store results.
results <-  list()
# Calculate totals for each variable of nutrients and food items.
for(i in 1:length(myvar)){
if(i==1){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
# print(myvar[i])
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
# print(myvar[i])
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
# print(myvar[i])
# print(restable)
restable$User_Day_Occ <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]  # take only User_Day_Occ and means.
results[[i]] <- restable_sub
Items_by_User_Occ <<- restable_sub
}else if(i>1){
subsetted <- Items_raw2[, c('UserName','IntakeStartDateTime', 'Occ_No', myvar[i])]
restable <- aggregate(subsetted[, 4] ~ subsetted[, 1] + subsetted[, 2] + subsetted[, 3],
data=subsetted, FUN = mean)
colnames(restable) <- c('UserName', 'IntakeStartDateTime', 'Occ_No', paste(myvar[i]))
restable$User_Day_Occ <- paste(restable$UserName, restable$IntakeStartDateTime, restable$Occ_No, sep = "_")
restable_sub <- restable[, c(5, 4)]
results[[i]] <- restable_sub
Items_by_User_Occ <<- merge(Items_by_User_Occ, results[[i]], by="User_Day_Occ", all=T)
# all=T takes care of missing data ... inserts NA for combinations not found
}
}
Items_by_User_Occ
write.csv(Items_by_User_Occ, "Items_by_User_Occ.csv")
write.csv(Items_by_User_Occ, "Items_by_User_Occ.csv")
# Base R version ====================================================================
# Define variables to calculate means for.
aggrgate(Occ_Name ~ UserName + IntakeStartDateTime + Occ_No,
data=Items_raw,
FUN=mean)
# Base R version ====================================================================
# Define variables to calculate means for.
aggregate(Occ_Name ~ UserName + IntakeStartDateTime + Occ_No,
data=Items_raw,
FUN=mean)
# Get the type of occasion (breakfast, just a drink etc.) by user & by occasion.
# dplyr version ====================================================================
Occ_Names <-
Items_raw %>%
select(UserName, IntakeStartDateTime, Occ_No, Occ_Name) %>%
group_by(UserName, IntakeStartDateTime, Occ_No) %>%
summarise_each(funs(mean))
# Base R version ====================================================================
# Define variables to calculate means for.
Occ_Names_1 <- aggregate(Occ_Name ~ UserName + IntakeStartDateTime + Occ_No,
data=Items_raw,
FUN=mean)
View(Occ_Names)
View(Occ_Names_1)
write.table(Occ_Names, "clipbroad", sep = '/t')
# Get the type of occasion (breakfast, just a drink etc.) by user & by occasion.
# dplyr version ====================================================================
Occ_Names <-
Items_raw %>%
select(UserName, IntakeStartDateTime, Occ_No, Occ_Name) %>%
group_by(UserName, IntakeStartDateTime, Occ_No) %>%
summarise_each(funs(mean))
write.table(Occ_Names, "clipbroad", sep = '/t')
write.table(Occ_Names, "clipboard", sep = '/t')
write.table(Occ_Names, "clipboard", sep = '\t')
# Base R version ====================================================================
# Define variables to calculate means for.
Occ_Names_1 <- aggregate(Occ_Name ~ UserName + IntakeStartDateTime + Occ_No,
data=Items_raw,
FUN=mean)
write.table(Occ_Names_1, "clipboard", sep = '\t')
# Add a unique ID for each line for merging.
Occ_Names$uniqueid <- paste0(Occ_Names$UserName, "_",
Occ_Names$IntakeStartDateTime, "_",
Occ_Names$Occ_No)
head(Occ_Names)
# Take only uniqueid and Occ_Name.
Occ_Names_2 <- Occ_Names[, c("uniqueid", "Occ_Name")]
# Make a reference table that has Occ_Name and corresponding types.
Occ_Names_ref <- data.frame(Occ_Name=seq(1:8),
Occ_In_Words=c("Breakfast", "Brunch",
"Lunch",     "Dinner",
"Supper",    "Snack",
"Just a drink", "Just a supplement" ))
Occ_Names_ref
# Match the Occ_Nmes with the Occ_Names_ref (VLOOKUP)
Occ_Names_and_Words <- merge(x=Occ_Names_2, y=Occ_Names_ref, by="Occ_Name", all.x=T)
Occ_Names_and_Words
# ---------------------------------------------------------------------------------------------------------------
# dplyr version
mtcars1 %>% group_by(cyl, vs) %>% summerise_each(mean)
library(dplyr)
# ---------------------------------------------------------------------------------------------------------------
# dplyr version
mtcars1 %>% group_by(cyl, vs) %>% summerise_each(mean)
# ---------------------------------------------------------------------------------------------------------------
# dplyr version
mtcars1 %>% group_by(cyl, vs) %>% summarise_each(mean)
# ---------------------------------------------------------------------------------------------------------------
# dplyr version
mtcars1 %>% group_by(cyl, vs) %>% summarise(disp)
# ---------------------------------------------------------------------------------------------------------------
# dplyr version
mtcars1 %>% group_by(cyl, vs) %>% summarise(mean(disp))
# 1 variable, multiple functions to apply.
aggregate(disp ~ cyl + vs,
mtcars1,
function(x) c(mean = mean(x), n = length(x)))
# base R version
aggregate(disp ~ cyl + vs, mtcars1, FUN = mean)
# variables to calculate means.
myvar <- c('disp', 'hp', 'qsec')
# empty list to store results.
results <-  list()
# Run the same loop with mtcars2
# Calculate means for disp, hp, qsec for each combintion of cyl and vs.
for(i in 1:length(myvar)){
if(i==1){
subsetted <- mtcars2[, c('cyl','vs', myvar[i])]
restable <- aggregate(subsetted[, 3] ~ subsetted[, 1] + subsetted[, 2], subsetted, FUN = mean)
colnames(restable) <- c('cyl', 'vs', paste(myvar[i]))
restable$cyl_vs <- paste(restable$cyl, restable$vs, sep = "_")
restable_sub <- restable[, c(4, 3)]  # take only cyl_vs and means.
results[[i]] <- restable_sub
aggtable <<- restable_sub
}else if(i>1){
subsetted <- mtcars2[, c('cyl','vs', myvar[i])]
restable <- aggregate(subsetted[, 3] ~ subsetted[, 1] + subsetted[, 2], subsetted, FUN = mean)
colnames(restable) <- c('cyl', 'vs', paste(myvar[i]))
restable$cyl_vs <- paste(restable$cyl, restable$vs, sep = "_")
restable_sub <- restable[, c(4, 3)] # take only cyl_vs and means.
results[[i]] <- restable_sub
aggtable <<- merge(aggtable, results[[i]], by="cyl_vs", all=T)
}
}
# Duplicate the dataset so that the original will be intact.
mtcars2 <- mtcars
# Delete the only value for the cyl_vs combo to see what happens.
mtcars2[27,3] <- NA
mtcars2
# variables to calculate means.
myvar <- c('disp', 'hp', 'qsec')
# empty list to store results.
results <-  list()
# Run the same loop with mtcars2
# Calculate means for disp, hp, qsec for each combintion of cyl and vs.
for(i in 1:length(myvar)){
if(i==1){
subsetted <- mtcars2[, c('cyl','vs', myvar[i])]
restable <- aggregate(subsetted[, 3] ~ subsetted[, 1] + subsetted[, 2], subsetted, FUN = mean)
colnames(restable) <- c('cyl', 'vs', paste(myvar[i]))
restable$cyl_vs <- paste(restable$cyl, restable$vs, sep = "_")
restable_sub <- restable[, c(4, 3)]  # take only cyl_vs and means.
results[[i]] <- restable_sub
aggtable <<- restable_sub
}else if(i>1){
subsetted <- mtcars2[, c('cyl','vs', myvar[i])]
restable <- aggregate(subsetted[, 3] ~ subsetted[, 1] + subsetted[, 2], subsetted, FUN = mean)
colnames(restable) <- c('cyl', 'vs', paste(myvar[i]))
restable$cyl_vs <- paste(restable$cyl, restable$vs, sep = "_")
restable_sub <- restable[, c(4, 3)] # take only cyl_vs and means.
results[[i]] <- restable_sub
aggtable <<- merge(aggtable, results[[i]], by="cyl_vs", all=T)
}
}
aggtable
