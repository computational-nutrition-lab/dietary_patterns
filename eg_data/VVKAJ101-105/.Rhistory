# Show which has "yes" in the "Remove" column, and remove them.
subset(ind_to_rm, Remove == "yes")
# Remove the specified individuals.
# The output will be saved as a text file with the specified name.
# This assumes the usernames are in UserName column, and will print which user(s) will be removed.
RemoveRows(data=items_f,  metadata.file=ind_to_rm, output.name="VVKAJ_2021-11-09_7963_Items_f_s.txt")
# Load the output for further processing.
items_f_s <- read.table("VVKAJ_2021-11-09_7963_Items_f_s.txt", header=T, sep="\t")
# Show unique usernames in items_f_s and confirm "VVKAJ101" has been removed.
unique(items_f_s$UserName)
# Load ind_metadata.txt.
ind_metadata <- read.table("ind_metadata.txt", sep="\t", header=T)
# Look at what the metadata has.
head(ind_metadata)
# Add this metadata of each participant in totals or items.
# 'NA' will be inserted to UserNames which are not in ind_metadata.
items_f_s_m <- merge(x=items_f_s, y=ind_metadata, by="UserName", all.x=T)
# Check that the items data and metadata are merged.
head(items_f_s_m)
# Save the merged dataframe as a .txt file.
write.table(items_f_s_m, "VVKAJ_2021-11-09_7963_Items_f_s_m.txt", sep="\t", row.names=F, quote=F)
# The number of rows should be {No. of users x No. days}.
nrow(new_totals)
# Use one of the input files saved above as an input for calculating totals for.
# Specify which columns have usernames and Recall.No., which is the number of recorded days.
GenerateTotals(inputfn = "VVKAJ_2021-11-09_7963_Items_f_s_m.txt",
User.Name = 'UserName',
Recall.No = 'RecallNo',
outfn = "VVKAJ_2021-11-09_7963_Tot.txt")
# Load the total file generated above.
new_totals <- read.table("VVKAJ_2021-11-09_7963_Tot.txt", header=T, sep="\t")
# The number of rows should be {No. of users x No. days}.
nrow(new_totals)
# View the new_total
head(new_totals, 2)
# View the new_total
head(new_totals)
# Load ind_metadata.txt if you have not done so.
ind_metadata <- read.table("ind_metadata.txt", sep="\t", header=T)
# Add this metadata of each participant to totals.
# 'NA' will be inserted to UserNames which are not in ind_metadata.
new_totals_m <- merge(x=new_totals, y=ind_metadata, by="UserName", all.x=T)
# Check that the items data and metadata are merged.
head(new_totals_m)
# Load your totals if necessary - to be used as input for QC.
new_totals <- read.table("VVKAJ_2021-11-09_7963_Tot_m.txt", sep="\t", header=T)
# Define your totals dataset to be used as input.
QCtotals <- new_totals
# Flag if KCAL is <600 or >5700 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "KCAL", min = 600, max = 5700)
# Flag if PROT is <10 or >240 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "PROT", min = 10, max = 240)
# Flag if TFAT is <15 or >230 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "TFAT", min = 15, max = 230)
# Flag if VC (Vitamin C) is <5 or >400 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "VC", min = 5, max = 400)
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "BCAR", min = 15, max = 8200)
head(QCtotal)
QCtotal[, c("UserName", "Gender")]
# Flag outliers in the target column and min max values, and pop out a prompt asking whether to delete
# the outliers or not.
# Whether the outliers are removed or not, the output will be a df called 'QCtotals'.
QCOutliers <- function(input.data, target.colname, min, max){
temp <- input.data
# the nth column has the variable of interest.
nth_column <- which(colnames(temp) == target.colname )
# Extact rows that are NOT in the range of min-max.
Outlier_rows <<- temp[ temp[, nth_column] < min | temp[, nth_column] > max  , ]
# Report how many rows are outside the min-max range.
cat("There are", nrow(Outlier_rows), "observations with <", min, "or >", max, ". \n", sep = " ")
if(nrow(Outlier_rows) == 0){
QCtotals <<- temp
cat("There are no outlier rows, but the input data was renamed as QCtotals.\n",
nrow(QCtotals), "rows remained.\n")}
else{
answer <- askYesNo("Remove?")
if(answer==T){
# Save rows that are within the range of min-max as QCtotals.
QCtotals <<- temp[ temp[, nth_column] >= min & temp[, nth_column] <= max , ]
cat("Outlier rows were removed; the cleaned data is saved as an object called \"QCtotals\".\n",
nrow(QCtotals), "rows remained.\n")
}else{
QCtotals <<- temp
cat("Outlier rows were not removed, but the input data was renamed as QCtotals.\n",
nrow(QCtotals), "rows remained.\n")}
}
}
# Flag if KCAL is <600 or >5700 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "KCAL", min = 600, max = 5700)
# Flag if PROT is <10 or >240 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "PROT", min = 10, max = 240)
# Flag if TFAT is <15 or >230 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "TFAT", min = 15, max = 230)
# Flag if VC (Vitamin C) is <5 or >400 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "VC", min = 5, max = 400)
# You may find numerous potential outliers here. Then, click “No” and view those
# outliers with their other nutrient intake information.
VC_outlier_rows[, c('UserName', 'KCAL', 'VC', 'V_TOTAL', 'V_DRKGR', 'F_TOTAL')]  # F is fruits.
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "BCAR", min = 15, max = 8200)
# You may find numerous potential outliers here, too. Then, click “No” and
# view those outliers with their other nutrient intake information or sort them.
bcaroutliers <- BCAR_outlier_rows[, c('UserName', 'KCAL', 'BCAR')]
# You may find numerous potential outliers here. Then, click “No” and view those
# outliers with their other nutrient intake information.
subset(new_totals, VC < 5)    # F is fruits.
# You may find numerous potential outliers here. Then, click “No” and view those
# outliers with their other nutrient intake information.
VC_outliers <- subset(new_totals, VC < 5 | VC > 400)
VC_outliers
# You may find numerous potential outliers here. Then, click “No”, and view those
# outliers with their other nutrient intake information by running the following;
bcaroutliers <- subset(new_totals, BCAR < 15 | BCAR > 8200)
BCAR_outliers[, c('UserName', 'KCAL', 'BCAR')]
# You may find numerous potential outliers here. Then, click “No”, and view those
# outliers with their other nutrient intake information by running the following;
BCAR_outliers <- subset(new_totals, BCAR < 15 | BCAR > 8200)
BCAR_outliers[, c('UserName', 'KCAL', 'BCAR')]
BCAR_outliers[order(BCAR_outliers$BCAR, decreasing = T), ] # sort in the order of BCAR.
# You may find numerous potential outliers here. Then, click “No”, and view those
# outliers with their other nutrient intake information by running the following;
VC_outliers <- subset(new_totals, VC < 5 | VC > 400)
# sort in the order of VC and show only the specified variables.
VC_outliers[order(VC_outliers$BCAR, decreasing = T),
c('UserName', 'KCAL', 'VC', 'V_TOTAL', 'V_DRKGR', 'F_TOTAL')]  # F is fruits.
# You may find numerous potential outliers here. Then, click “No”, and view those
# outliers with their other nutrient intake information by running the following;
BCAR_outliers <- subset(new_totals, BCAR < 15 | BCAR > 8200)
# sort in the order of BCAR and show only the specified variables.
BCAR_outliers[order(BCAR_outliers$BCAR, decreasing = T), c('UserName', 'KCAL', 'BCAR')]
# Save as "Totals_QCed.txt"
write.table(QCtotals, "VVKAJ_2021-11-09_7963_Tot_m_QCed.txt", sep="\t", quote=F, row.names=F)
# Load your items data to be analyzed.
items_f_s_m <- read.table("VVKAJ_2021-11-09_7963_Items_f_s_m.txt", sep="\t", quote=F, row.names=F)
# Load your items data to be analyzed.
items_f_s_m <- read.table("VVKAJ_2021-11-09_7963_Items_f_s_m.txt", sep="\t", header=T)
head(items_f_s_m)
# Summary statistics
# Generate a table of
summary(items_f_s_m$RecallNo)
# Summary statistics
# Generate a table of
summary(items_f_s_m)
# Summary statistics
# Generate a table of
items_f_s_m_summ <- summary(items_f_s_m)
items_f_s_m_summ
as.data.frame(items_f_s_m_summ)
items_f_s_m_summ_df <- as.data.frame(items_f_s_m_summ)
write.table(items_f_s_m_summ_df, "VVKAJ_2021-11-09_7963_Items_f_s_m_summ.txt", sep="\t", row.names=F, quote=F)
write.table(items_f_s_m_summ, "VVKAJ_2021-11-09_7963_Items_f_s_m_summ.txt", sep="\t", row.names=F, quote=F)
summarybox <- data.frame()
summarybox
summarybox[1,1]
summarybox[10,1]
summary(items_f_s_m$UserName)
min(items_f_s_m$UserName)
max(items_f_s_m$UserName)
max(items_f_s_m$IntakeStartDateTime)
max(items_f_s_m$Food_Description)
summarybox <- data.frame(row.names = c("Min", "1st_Qu", "Median", "Mean", "3rd_Qu", "Max"))
summarybox
input <- items_f_s_m
for(i in ncol(input)){
}
for(i in ncol(input)){
# take ith column
ith_col <- input[, i]
cat(i)
# if not numeric, insert (not numeric)
if(is.numeric(ith_col)){
cat("numeric")
}else{
cat("not numeric")
}
}
View(items_f_s_m)
for(i in ncol(input)){
# take ith column
ith_col <- input[, i]
# if not numeric, insert (not numeric)
if(is.numeric(ith_col)){
summarybox[1, i] <- "numeric"
}else{
summarybox[1, i] <- "NONnumeric"
}
}
input <- items_f_s_m
input
# if it's numeric, calculate min, max, Qtl, etc.
ith_col <- input[,1]
ith_col
is.numeric(ith_col)
?data.frame
summarybox <- data.frame()
summarybox
summarybox[, 1]
summarybox <- data.frame(row.names = c("Min", "1st_Qu") )
summarybox
input <- items_f_s_m[, 1:3]
for(i in ncol(input)){
# take ith column
ith_col <- input[, i]
if(i==1){
# if not numeric, insert (not numeric)
if(is.numeric(ith_col)){
summarybox[1, 1] <- "numeric_row1"
summarybox[2, 1] <- "numeric_row2"
}else{
summarybox[1, 1] <- "NONnumeric_row1"
summarybox[2, 1] <- "NONnumeric_row1"
}
}else{
# if not numeric, insert (not numeric)
if(is.numeric(ith_col)){
summarybox[1, i] <- "numeric_row1coli"
summarybox[2, i] <- "numeric_row2coli"
}else{
summarybox[1, i] <- "NONnumeric_row1coli"
summarybox[2, i] <- "NONnumeric_row1coli"
}
}
}
summarybox
items_f_s_m[, 1:3]
summarybox <- data.frame(row.names = c("Min", "1st_Qu"),  Username=NA, Recallrecid=NA, userid=NA)
data.frame(1, 1:10, sample(L3, 10, replace = TRUE))
data.frame(1, 1:10)
summarybox <- data.frame(Username=NA, Recallrecid=NA, userid=NA)
summarybox
summarybox[, 1]
names(items_f_s_m)
summarybox <- data.frame(Col=names(items_f_s_m), Min=NA, FirstQu=NA)
summarybox
names(items_f_s_m)[1:3]
summarybox <- data.frame(Col=names(items_f_s_m)[1:3], Min=NA, FirstQu=NA)
summarybox
input <- items_f_s_m[, 1:3]
for(i in ncol(input)){
# take ith column
ith_col <- input[, i]
if(i==1){
# if not numeric, insert (not numeric)
if(is.numeric(ith_col)){
summarybox[1, 1] <- "numeric_row1"
summarybox[2, 1] <- "numeric_row2"
}else{
summarybox[1, 1] <- "NONnumeric_row1"
summarybox[2, 1] <- "NONnumeric_row1"
}
}else{
# if not numeric, insert (not numeric)
if(is.numeric(ith_col)){
summarybox[1, i] <- "numeric_row1coli"
summarybox[2, i] <- "numeric_row2coli"
}else{
summarybox[1, i] <- "NONnumeric_row1coli"
summarybox[2, i] <- "NONnumeric_row1coli"
}
}
}
summarybox
quantile(100)
input <- items_f_s_m[, 1:3]
# for each column (variable)
for(i in ncol(input)){
ith_col <- input[, i]
summarybox[i, 1] <- min(ith_col)
summarybox[i, 2] <- quantile(ith_col, 0.25)
}
summarybox
summarybox <- data.frame(Col=names(items_f_s_m)[1:3], Min=NA, FirstQu=NA)
summarybox
summarybox <- data.frame(Col=names(items_f_s_m)[1:3], Min=NA, FirstQu=NA)
summarybox[, 1]
summarybox
# for each column (variable)
for(i in ncol(input)){
ith_col <- input[, i]
summarybox[i+1, 2] <- min(ith_col)
summarybox[i+1, 3] <- quantile(ith_col, 0.25)
}
summarybox
summarybox <- data.frame(Col=names(items_f_s_m)[1:3], Min=NA, FirstQu=NA)
summarybox
# for each column (variable)
for(i in ncol(input)){
ith_col <- input[, i]
summarybox[i, 2] <- min(ith_col)
summarybox[i, 3] <- quantile(ith_col, 0.25)
}
items_f_s_m[, 10:12]
]
items_f_s_m[, 50:52]
input <- items_f_s_m[, 50:52]
# for each column (variable)
for(i in ncol(input)){
ith_col <- input[, i]
summarybox[i, 2] <- min(ith_col)
summarybox[i, 3] <- quantile(ith_col, 0.25)
}
summarybox
# for each column (variable)
for(i in ncol(input)){
ith_col <- input[, i]
print(i)
print(min(ith_col))
# summarybox[i, 2] <- min(ith_col)
# summarybox[i, 3] <- quantile(ith_col, 0.25)
}
ncol(input)
input <- items_f_s_m[, 50:52]
input
# for each column (variable)
for(i in ncol(input)){
ith_col <- input[, i]
print(i)
print(min(ith_col))
# summarybox[i, 2] <- min(ith_col)
# summarybox[i, 3] <- quantile(ith_col, 0.25)
}
input <- items_f_s_m[, 50:52]
# for each column (variable)
for(i in ncol(input)){
ith_col <- input[, i]
paste(i)
paste(min(ith_col))
# summarybox[i, 2] <- min(ith_col)
# summarybox[i, 3] <- quantile(ith_col, 0.25)
}
# for each column (variable)
for(i in ncol(input)){
ith_col <- input[, i]
paste0(i)
paste0(min(ith_col))
# summarybox[i, 2] <- min(ith_col)
# summarybox[i, 3] <- quantile(ith_col, 0.25)
}
# for each column (variable)
for(i in ncol(input)){
input$ith_col <- input[, i]
paste0(i)
paste0(min(ith_col))
# summarybox[i, 2] <- min(ith_col)
# summarybox[i, 3] <- quantile(ith_col, 0.25)
}
# for each column (variable)
for(i in ncol(input)){
input$ith_col <- input[, i]
# print(i)
print(min(ith_col))
# summarybox[i, 2] <- min(ith_col)
# summarybox[i, 3] <- quantile(ith_col, 0.25)
}
# for each column (variable)
for(i in ncol(input)){
ith_col <- input[, i]
# print(i)
print(min(ith_col))
# summarybox[i, 2] <- min(ith_col)
# summarybox[i, 3] <- quantile(ith_col, 0.25)
}
# for each column (variable)
for(i in 1:ncol(input)){
ith_col <- input[, i]
# print(i)
print(min(ith_col))
# summarybox[i, 2] <- min(ith_col)
# summarybox[i, 3] <- quantile(ith_col, 0.25)
}
input <- items_f_s_m[, 50:52]
# for each column (variable)
for(i in 1:ncol(input)){
ith_col <- input[, i]
# print(i)
print(min(ith_col))
# summarybox[i, 2] <- min(ith_col)
# summarybox[i, 3] <- quantile(ith_col, 0.25)
}
input
# for each column (variable)
for(i in 1:ncol(input)){
ith_col <- input[, i]
# print(i)
# print(min(ith_col))
summarybox[i, 2] <- min(ith_col)
summarybox[i, 3] <- quantile(ith_col, 0.25)
}
summarybox
# for each column (variable)
for(i in 1:ncol(input)){
ith_col <- input[, i]
# print(i)
# print(min(ith_col))
summarybox[i, 2] <- max(ith_col)
summarybox[i, 3] <- quantile(ith_col, 0.25)
}
summarybox
input <- items_f_s_m[, c(1,2,52)]
# for each column (variable)
for(i in 1:ncol(input)){
ith_col <- input[, i]
# print(i)
# print(min(ith_col))
summarybox[i, 2] <- max(ith_col)
summarybox[i, 3] <- quantile(ith_col, 0.25)
}
input <- items_f_s_m[, c(1,2,52)]
summarybox
summarybox <- data.frame(Col=names(items_f_s_m)[1,2,52], Min=NA, FirstQu=NA)
summarybox
summarybox <- data.frame(Col=names(items_f_s_m)[1,2,52], Min=NA, FirstQu=NA)
summarybox
names(items_f_s_m)[1,2,52]
summarybox <- data.frame(Col=names(items_f_s_m)[c(1,2,52)], Min=NA, FirstQu=NA)
summarybox
max(items_f_s_m$Food_Description)
input <- items_f_s_m[, c(1,2,52)]
# for each column (variable)
for(i in 1:ncol(input)){
ith_col <- input[, i]
# if numeric, calculate summary stats.
if(is.numeric(ith_col)){
summarybox[i, 2] <- min(ith_col)
summarybox[i, 3] <- quantile(ith_col, 0.25)
}else{
# if not numeric, say nonnumeric.
summarybox[i, 2] <- "NONnumeric"
summarybox[i, 3] <- "NONnumeric"
}
}
summarybox
names(items_f_s_m)
summarybox <- data.frame(Col=names(items_f_s_m)[c(1,2,31)], Min=NA, FirstQu=NA)
input <- items_f_s_m[, c(1,2,31)]
# for each column (variable)
for(i in 1:ncol(input)){
ith_col <- input[, i]
# if numeric, calculate summary stats.
if(is.numeric(ith_col)){
summarybox[i, 2] <- min(ith_col)
summarybox[i, 3] <- quantile(ith_col, 0.25)
}else{
# if not numeric, say nonnumeric.
summarybox[i, 2] <- "NONnumeric"
summarybox[i, 3] <- "NONnumeric"
}
}
summarybox
summarybox <- data.frame(Col=names(items_f_s_m), Min=NA, FirstQu=NA)
summarybox
input <- items_f_s_m
# for each column (variable)
for(i in 1:ncol(input)){
ith_col <- input[, i]
# if numeric, calculate summary stats.
if(is.numeric(ith_col)){
summarybox[i, 2] <- min(ith_col)
summarybox[i, 3] <- quantile(ith_col, 0.25)
}else{
# if not numeric, say nonnumeric.
summarybox[i, 2] <- "NONnumeric"
summarybox[i, 3] <- "NONnumeric"
}
}
summarybox
summarybox <- data.frame(Col=names(items_f_s_m), Min=NA, FirstQu=NA, Median=NA, Mean=NA, ThirdQu=NA, Max=NA)
summarybox[2, 2:7]
summarybox[2, 2:7] <- 5
summarybox[2, 2:7]
summarybox <- data.frame(Col=names(items_f_s_m), Min=NA, FirstQu=NA, Median=NA, Mean=NA, ThirdQu=NA, Max=NA)
input <- items_f_s_m
# for each column (variable)
for(i in 1:ncol(input)){
ith_col <- input[, i]
# if numeric, calculate summary stats.
if(is.numeric(ith_col)){
summarybox[i, 2] <- min(ith_col)
summarybox[i, 3] <- quantile(ith_col, 0.25)
summarybox[i, 4] <- median(ith_col)
summarybox[i, 5] <- mean(ith_col)
summarybox[i, 6] <- quantile(ith_col, 0.75)
summarybox[i, 7] <- max(ith_col)
}else{
# if not numeric, say nonnumeric.
summarybox[i, 2:7] <- "NONnumeric"
# summarybox[i, 3] <- "NONnumeric"
# summarybox[i, 4] <- "NONnumeric"
# summarybox[i, 5] <- "NONnumeric"
# summarybox[i, 6] <- "NONnumeric"
}
}
summarybox
for(i in 1:ncol(input)){
ith_col <- input[, i]
# if numeric, calculate summary stats.
if(is.numeric(ith_col)){
summarybox[i, 2] <- min(ith_col)
summarybox[i, 3] <- quantile(ith_col, 0.25)
summarybox[i, 4] <- median(ith_col)
summarybox[i, 5] <- mean(ith_col)
summarybox[i, 6] <- quantile(ith_col, 0.75)
summarybox[i, 7] <- max(ith_col)
}else{
# if not numeric, say not numeric.
summarybox[i, 2:7] <- "not_numeric"
}
}
summarybox
# Save the summary information.
write.table(summarybox, "VVKAJ_2021-11-09_7963_Items_f_s_m_summ.txt", sep="\t", row.names=F, quote=F)
