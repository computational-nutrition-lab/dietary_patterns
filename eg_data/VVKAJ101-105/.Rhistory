}else{
ith_user <- subset(input.df, UserName == individuals[i])
# CARBmeanval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "mean"]
PROTmeanval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "mean"]
TFATmeanval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "mean"]
CARBsdval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "sd"]
PROTsdval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "sd"]
TFATsdval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "sd"]
# sd values for stacked barchart.
ith_user$sd_base <- c(TFATmeanval+PROTmeanval,  # carb, on top of the stacked barchart.
TFATmeanval,              # prot, in the middle.
0)                        # tfat, on the bottom.
ith_user$sd_stacked <-  c(CARBsdval+PROTmeanval+TFATmeanval,    # carb, on top of the stacked barchart.
PROTsdval+TFATmeanval,                # prot, in the middle.
TFATsdval)                            # tfat, on the bottom.
# need another value k in order to specify the correct row.
k = i-2
# for i = 2,3,4,..., combine rows with the previously made CPT_kcal_forstacked.
CPT_kcal_forstacked[c(i+i+k, i+i+k+1, i+i+k+2), ] <- ith_user
print(CPT_kcal_forstacked)
}
}
# Save the resultant file as .txt file.
write.table(x=CPT_kcal_forstacked, file = out.fn, sep="\t", row.names=F, quote=F)
}
# Function to calculate the mean % of energy intake (kcal) and SD of CARB, PROT, and TFAT.
CPTpctKcalPerUser <- function(inputfn, user.name='UserName',
recall.no='RecallNo', outfn){
# Get index numbers for username, recallno, "CARB","PROT","TFAT", "KCAL"
indexno_username <- which(names(inputfn)== user.name)
indexno_recallno <- which(names(inputfn)== recall.no)
indexno_carb <-     which(names(inputfn)== "CARB")
indexno_prot <-     which(names(inputfn)== "PROT")
indexno_tfat <-     which(names(inputfn)== "TFAT")
indexno_kcal <-     which(names(inputfn)== "KCAL")
# Take only the relevant columns from inputfn.
totalssub2 <- inputfn[, c(indexno_username,
indexno_recallno,
indexno_carb,
indexno_prot,
indexno_tfat,
indexno_kcal)]
# Change the column names for the following process
colnames(totalssub2)[1:2] <- c("UserName", "RecallNo")
# % KCAL
# calculate calories
totalssub2$CARB_kcal <- totalssub2$CARB * 4
totalssub2$PROT_kcal <- totalssub2$PROT * 4
totalssub2$TFAT_kcal <- totalssub2$TFAT * 9
# calculate kcal of each macronutrient per engergy (%)
totalssub2$CARB_kcal_pct <- totalssub2$CARB_kcal / totalssub2$KCAL * 100
totalssub2$PROT_kcal_pct <- totalssub2$PROT_kcal / totalssub2$KCAL * 100
totalssub2$TFAT_kcal_pct <- totalssub2$TFAT_kcal / totalssub2$KCAL * 100
CARB_kcal_pctmean <- aggregate(totalssub2$CARB_kcal_pct, by = list(totalssub2$UserName), FUN = mean)
colnames(CARB_kcal_pctmean) <- c("UserName", "CARB_kcal_pct_mean")
CARB_kcal_pctsd <- aggregate(totalssub2$CARB_kcal_pct, by = list(totalssub2$UserName), FUN = sd)
colnames(CARB_kcal_pctsd) <- c("UserName", "CARB_kcal_pct_sd")
CARB_kcal_pctlength <- aggregate(totalssub2$CARB_kcal_pct, by = list(totalssub2$UserName), FUN = length)
colnames(CARB_kcal_pctlength) <- c("UserName", "CARB_kcal_pct_n")
C_length_mean <-   merge(x=CARB_kcal_pctlength, y=CARB_kcal_pctmean, all.x=T)
C_length_mean_sd <- merge(x=C_length_mean, y=CARB_kcal_pctsd, all.x=T)
C_length_mean_sd$macronutrient <- "CARB_kcal_pct"
PROT_kcal_pctmean <- aggregate(totalssub2$PROT_kcal_pct, by = list(totalssub2$UserName), FUN = mean)
colnames(PROT_kcal_pctmean) <- c("UserName", "PROT_kcal_pct_mean")
PROT_kcal_pctsd <-   aggregate(totalssub2$PROT_kcal_pct, by = list(totalssub2$UserName), FUN = sd)
colnames(PROT_kcal_pctsd) <- c("UserName", "PROT_kcal_pct_sd")
PROT_kcal_pctlength <- aggregate(totalssub2$PROT_kcal_pct, by = list(totalssub2$UserName), FUN = length)
colnames(PROT_kcal_pctlength) <- c("UserName", "PROT_kcal_pct_n")
P_length_mean <-   merge(x=PROT_kcal_pctlength, y=PROT_kcal_pctmean, all.x=T)
P_length_mean_sd <- merge(x=P_length_mean, y=PROT_kcal_pctsd, all.x=T)
P_length_mean_sd$macronutrient <- "PROT_kcal_pct"
TFAT_kcal_pctmean <- aggregate(totalssub2$TFAT_kcal_pct, by = list(totalssub2$UserName), FUN = mean)
colnames(TFAT_kcal_pctmean) <- c("UserName", "TFAT_kcal_pct_mean")
TFAT_kcal_pctsd <- aggregate(totalssub2$TFAT_kcal_pct, by = list(totalssub2$UserName), FUN = sd)
colnames(TFAT_kcal_pctsd) <- c("UserName", "TFAT_kcal_pct_sd")
TFAT_kcal_pctlength <- aggregate(totalssub2$TFAT_kcal_pct, by = list(totalssub2$UserName), FUN = length)
colnames(TFAT_kcal_pctlength) <- c("UserName", "TFAT_kcal_pct_n")
T_length_mean <-    merge(x=TFAT_kcal_pctlength, y=TFAT_kcal_pctmean, all.x=T)
T_length_mean_sd <- merge(x=T_length_mean, y=TFAT_kcal_pctsd, all.x=T)
T_length_mean_sd$macronutrient <- "TFAT_kcal_pct"
# Change column names for rbind
colnames(C_length_mean_sd)[2:4] <- c("n", "mean", "sd")
colnames(P_length_mean_sd)[2:4] <- c("n", "mean", "sd")
colnames(T_length_mean_sd)[2:4] <- c("n", "mean", "sd")
rbound <- rbind(C_length_mean_sd, P_length_mean_sd, T_length_mean_sd)
CPT_kcal_fn <- rbound[, c(1,5,2,3,4)] # bring macronutrient to 2nd
# Save CPT_kcal_fn. (fn stands for "function")
write.table(x=CPT_kcal_fn, file=outfn, sep="\t", row.names=F, quote=F)
}
# Function to calculate the mean and SD of CARB, PROT, and TFAT.
CPTgramsPerUser <- function(inputfn, user.name='UserName',
recall.no='RecallNo', outfn){
# Get index numbers for username, recallno, "CARB","PROT","TFAT", "KCAL"
indexno_username <- which(names(inputfn)== user.name)
indexno_recallno <- which(names(inputfn)== recall.no)
indexno_carb <-     which(names(inputfn)== "CARB")
indexno_prot <-     which(names(inputfn)== "PROT")
indexno_tfat <-     which(names(inputfn)== "TFAT")
# Take only the relevant columns from inputfn.
totalssub <- inputfn[, c(indexno_username,
indexno_recallno,
indexno_carb,
indexno_prot,
indexno_tfat)]
# Change the column names for the following process
colnames(totalssub)[1:2] <- c("UserName", "RecallNo")
# Calc grams of macronutrients.
CARBmean <- aggregate(totalssub$CARB, by = list(totalssub$UserName), FUN = mean)
colnames(CARBmean) <- c("UserName", "CARB_mean")
CARBsd <- aggregate(totalssub$CARB, by = list(totalssub$UserName), FUN = sd)
colnames(CARBsd) <- c("UserName", "CARB_sd")
CARBlength <- aggregate(totalssub$CARB, by = list(totalssub$UserName), FUN = length)
colnames(CARBlength) <- c("UserName", "CARB_n")
C_length_mean <-   merge(x=CARBlength, y=CARBmean, all.x=T)
C_length_mean_sd <- merge(x=C_length_mean, y=CARBsd, all.x=T)
C_length_mean_sd$macronutrient <- "CARB"
PROTmean <- aggregate(totalssub$PROT, by = list(totalssub$UserName), FUN = mean)
colnames(PROTmean) <- c("UserName", "PROT_mean")
PROTsd <-   aggregate(totalssub$PROT, by = list(totalssub$UserName), FUN = sd)
colnames(PROTsd) <- c("UserName", "PROT_sd")
PROTlength <- aggregate(totalssub$PROT, by = list(totalssub$UserName), FUN = length)
colnames(PROTlength) <- c("UserName", "PROT_n")
P_length_mean <-   merge(x=PROTlength, y=PROTmean, all.x=T)
P_length_mean_sd <- merge(x=P_length_mean, y=PROTsd, all.x=T)
P_length_mean_sd$macronutrient <- "PROT"
TFATmean <- aggregate(totalssub$TFAT, by = list(totalssub$UserName), FUN = mean)
colnames(TFATmean) <- c("UserName", "TFAT_mean")
TFATsd <- aggregate(totalssub$TFAT, by = list(totalssub$UserName), FUN = sd)
colnames(TFATsd) <- c("UserName", "TFAT_sd")
TFATlength <- aggregate(totalssub$TFAT, by = list(totalssub$UserName), FUN = length)
colnames(TFATlength) <- c("UserName", "TFAT_n")
T_length_mean <-    merge(x=TFATlength, y=TFATmean, all.x=T)
T_length_mean_sd <- merge(x=T_length_mean, y=TFATsd, all.x=T)
T_length_mean_sd$macronutrient <- "TFAT"
T_length_mean_sd
# Change column names for rbind
colnames(C_length_mean_sd)[2:4] <- c("n", "mean", "sd")
colnames(P_length_mean_sd)[2:4] <- c("n", "mean", "sd")
colnames(T_length_mean_sd)[2:4] <- c("n", "mean", "sd")
rbound <- rbind(C_length_mean_sd, P_length_mean_sd, T_length_mean_sd)
CPT_g_fn <- rbound[, c(1,5,2,3,4)] # bring macronutrient to 2nd
# Save CPT_g_fn. (fn stands for "function")
write.table(x=CPT_g_fn, file=outfn, sep="\t", row.names=F, quote=F)
}
source("lib/percent_kcal.R")
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
# Name your main directory for future use.
main_wd <- file.path(getwd())
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
totals <- read.table("VVKAJ_2021-11-09_7963_Tot_m_QCed.txt",  sep = "\t", header = T)
# Come back to the main directory
setwd(main_wd)
# Calculate the mean and SD of CARB, PROT, and TFAT.
CPTgramsPerUser(inputfn= totals, user.name = "UserName", recall.no = "RecallNo",
outfn='VVKAJ_2021-11-09_7963_Tot_m_QCed_CPT_g.txt')
# Load example totals data ===============================================================
# Specify the directory where the data is.
# SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
# Calculate the mean and SD of CARB, PROT, and TFAT.
CPTgramsPerUser(inputfn= totals, user.name = "UserName", recall.no = "RecallNo",
outfn='VVKAJ_2021-11-09_7963_Tot_m_QCed_CPT_g.txt')
# Calculate the mean % of energy intake (kcal) and SD of CARB, PROT, and TFAT.
CPTpctKcalPerUser(inputfn=totals, user.name='UserName', recall.no='RecallNo',
outfn="VVKAJ_2021-11-09_7963_Tot_m_QCed_CPT_kcal.txt")
# Load the %kcal
CPT_kcal <- read.table("VVKAJ_2021-11-09_7963_Tot_m_QCed_CPT_kcal.txt", sep="\t", header=T)
CPT_kcal
# --------------------------------------------------------------------------------------------------------------
# Define ggplot1 themes
library(ggplot2)
no_grid <- theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
space_axes <- theme(axis.title.x = element_text(margin=margin(t = 8, r = 0, b = 0, l = 0) ),
axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) )
# Plot without SD first...
ggplot(CPT_kcal, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
theme_bw(base_size = 10) +
# scale_fill_manual(values = my15colors, # ) +
# labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x = element_blank(), y = "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + spece_axes +
# theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
# theme(axis.title.x = element_text(margin=margin(t = 5, r = 0, b = 0, l = 0))) +
# theme(axis.title.y = element_text(margin=margin(t = 0, r = 5, b = 0, l = 0))) +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
space_axes <- theme(axis.title.x = element_text(margin=margin(t = 8, r = 0, b = 0, l = 0) ),
axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) )
# Plot without SD first...
ggplot(CPT_kcal, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
theme_bw(base_size = 10) +
# scale_fill_manual(values = my15colors, # ) +
# labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x = element_blank(), y = "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + spece_axes +
# theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
# theme(axis.title.x = element_text(margin=margin(t = 5, r = 0, b = 0, l = 0))) +
# theme(axis.title.y = element_text(margin=margin(t = 0, r = 5, b = 0, l = 0))) +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# Plot without SD first...
ggplot(CPT_kcal, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
theme_bw(base_size = 10) +
# scale_fill_manual(values = my15colors, # ) +
# labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x = element_blank(), y = "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
# theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
# theme(axis.title.x = element_text(margin=margin(t = 5, r = 0, b = 0, l = 0))) +
# theme(axis.title.y = element_text(margin=margin(t = 0, r = 5, b = 0, l = 0))) +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# Plot without SD first...
ggplot(CPT_kcal, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
theme_bw(base_size = 10) +
# scale_fill_manual(values = my15colors, # ) +
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# Plot without SD first...
ggplot(CPT_kcal, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
theme_bw(base_size = 10) +
# scale_fill_manual(values = my15colors, # ) +
labels=c( "Carbohydrates", "Protein", "Total fat") +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# Call color palette.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# Call color palette.
distinct100colors <- readRDS("../lib/distinct100colors.rda")
# Call color palette.
distinct100colors <- readRDS("../../lib/distinct100colors.rda")
# Plot without SD first...
ggplot(CPT_kcal, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
theme_bw(base_size = 10) +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# Plot without SD first...
ggplot(CPT_kcal, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
theme_bw(base_size = 10) +
# change colors and labels of legend. Ensure the factor order is correct.
scale_fill_manual(values = distinct100colors[4:6],
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# --------------------------------------------------------------------------------------------------------------
# Plot a barchart without SD.
ggplot(CPT_kcal, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
# change colors and labels of legend. Ensure the factor order is correct.
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
set_theme(theme_bw(base_size = 14))
theme_set(theme_bw(base_size = 14))
# --------------------------------------------------------------------------------------------------------------
# Plot a barchart without SD.
ggplot(CPT_kcal, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
# change colors and labels of legend. Ensure the factor order is correct.
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# --------------------------------------------------------------------------------------------------------------
# Plot "dodge"-type of barchart (3 bars per user, NOT STACKED).
ggplot(CPT_kcal, aes(x = factor(UserName), y = mean, fill = macronutrient, colour = macronutrient)) +
geom_bar(stat = "identity", position = "dodge", color="black")  +
geom_errorbar(aes(ymin= mean, ymax= mean+sd), position = position_dodge(0.9), width = 0.25,
color="black") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
CPT_kcal
# --------------------------------------------------------------------------------------------------------------
# Plot "dodge"-type of barchart (3 bars per user, NOT STACKED).
ggplot(CPT_kcal, aes(x = factor(UserName), y = mean, fill = macronutrient, colour = macronutrient)) +
geom_bar(stat = "identity", position = "dodge", color="black")  +
geom_errorbar(aes(ymin= mean, ymax= mean+sd), position = position_dodge(0.9), width = 0.25,
color="black") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# --------------------------------------------------------------------------------------------------------------
# Plot a barchart without SD.
ggplot(CPT_kcal, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
# change colors and labels of legend. Ensure the factor order is correct.
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
# Specify the font size and angle of xlabel.
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# --------------------------------------------------------------------------------------------------------------
# Plot "dodge"-type of barchart (3 bars per user, NOT STACKED).
ggplot(CPT_kcal, aes(x = factor(UserName), y = mean, fill = macronutrient, colour = macronutrient)) +
geom_bar(stat = "identity", position = "dodge", color="black")  +
geom_errorbar(aes(ymin= mean, ymax= mean+sd), position = position_dodge(0.9), width = 0.25,
color="black") +
# scale_fill_manual(values = distinct100colors,
#                   labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# --------------------------------------------------------------------------------------------------------------
# Plot "dodge"-type of barchart (3 bars per user, NOT STACKED).
ggplot(CPT_kcal, aes(x = factor(UserName), y = mean, fill = macronutrient, colour = macronutrient)) +
geom_bar(stat = "identity", position = "dodge", color="black")  +
geom_errorbar(aes(ymin= mean, ymax= mean+sd), position = position_dodge(0.9), width = 0.25,
color="black") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# Create a vector that contains all the users (individuals).
individuals <- unique(CPT_kcal$UserName)
# Generate a dataframe to save sd data.
CPT_kcal_forstacked <- data.frame(matrix(NA, nrow=length(individuals)*3, ncol=7))
# --------------------------------------------------------------------------------------------------------------
# Using CPT_kcal, create a stacked barchart.
CPT_kcal
# Create a vector that contains all the users (individuals).
individuals <- unique(CPT_kcal$UserName)
# Generate a dataframe to save sd data.
CPT_kcal_forstacked <- data.frame(matrix(NA, nrow=length(individuals)*3, ncol=7))
# Specify its colnames.
colnames(CPT_kcal_forstacked) <- c("UserName", "macronutrient", "n", "mean", "sd", "sd_base", "sd_stacked")
# Calculate sd_base and sd_forstacked for stacked barchart.
# Note that this function assumes all users (individuals) have CARB, PROT, and TFAT values.
CalcStackedSD(input.df = CPT_kcal, out.fn = "CPT_kcal_forstacked.txt")
# Load the saved file that has SD for stacked barchart.
CPT_kcal_forstacked_read <- read.table("CPT_kcal_forstacked.txt", sep="\t", header=T)
CPT_kcal_forstacked_read
CalcStackedSD <- function(input.df, out.fn){
for(i in 1:length(individuals)){
if(i == 1){
ith_user <- subset(input.df, UserName == individuals[i])
# CARBmeanval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "mean"]
PROTmeanval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "mean"]
TFATmeanval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "mean"]
CARBsdval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "sd"]
PROTsdval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "sd"]
TFATsdval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "sd"]
# sd values for stacked barchart.
ith_user$sd_base <- c(TFATmeanval+PROTmeanval,  # carb, on top of the stacked barchart.
TFATmeanval,              # prot, in the middle.
0)                        # tfat, on the bottom.
ith_user$sd_stacked <-  c(CARBsdval+PROTmeanval+TFATmeanval,    # carb, on top of the stacked barchart.
PROTsdval+TFATmeanval,                # prot, in the middle.
TFATsdval)                            # tfat, on the bottom.
# for i=1, make the first result dataframe.
CPT_kcal_forstacked[c(i,i+1,i+2), ] <- ith_user
}else{
ith_user <- subset(input.df, UserName == individuals[i])
# CARBmeanval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "mean"]
PROTmeanval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "mean"]
TFATmeanval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "mean"]
CARBsdval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "sd"]
PROTsdval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "sd"]
TFATsdval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "sd"]
# sd values for stacked barchart.
ith_user$sd_base <- c(TFATmeanval+PROTmeanval,  # carb, on top of the stacked barchart.
TFATmeanval,              # prot, in the middle.
0)                        # tfat, on the bottom.
ith_user$sd_stacked <-  c(CARBsdval+PROTmeanval+TFATmeanval,    # carb, on top of the stacked barchart.
PROTsdval+TFATmeanval,                # prot, in the middle.
TFATsdval)                            # tfat, on the bottom.
# need another value k in order to specify the correct row.
k = i-2
# for i = 2,3,4,..., combine rows with the previously made CPT_kcal_forstacked.
CPT_kcal_forstacked[c(i+i+k, i+i+k+1, i+i+k+2), ] <- ith_user
}
}
# Save the resultant file as .txt file.
write.table(x=CPT_kcal_forstacked, file = out.fn, sep="\t", row.names=F, quote=F)
}
View(CPT_kcal_forstacked)
View(CPT_kcal_forstacked_read)
# Load the saved file that has SD for stacked barchart.
CPT_kcal_forstacked_read <- read.table("CPT_kcal_forstacked.txt", sep="\t", header=T)
CPT_kcal_forstacked_read
# Stacked barchart with SD as error bars.
ggplot(CPT_kcal_forstacked_read, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black")  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10")
# Stacked barchart with SD as error bars.
ggplot(CPT_kcal_forstacked_read, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black")  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# --------------------------------------------------------------------------------------------------------------
# Plot a barchart without SD.
ggplot(CPT_kcal, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
# change colors and labels of legend. Ensure the factor order is correct.
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
# Specify the font size and angle of xlabel.
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# --------------------------------------------------------------------------------------------------------------
# Plot "dodge"-type of barchart (3 bars per user, NOT STACKED).
ggplot(CPT_kcal, aes(x = factor(UserName), y = mean, fill = macronutrient, colour = macronutrient)) +
geom_bar(stat = "identity", position = "dodge", color="black")  +
geom_errorbar(aes(ymin= mean, ymax= mean+sd), position = position_dodge(0.9), width = 0.25,
color="black") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
CPT_kcal
# --------------------------------------------------------------------------------------------------------------
# Using CPT_kcal, create a stacked barchart.
CPT_kcal_forstacked_read
CPT_kcal[order(CPT_kcal$UserName, CPT_kcal$macronutrient), ]
# --------------------------------------------------------------------------------------------------------------
# Plot "dodge"-type of barchart (3 bars per user, NOT STACKED).
ggplot(CPT_kcal, aes(x = factor(UserName), y = mean, fill = macronutrient, colour = macronutrient)) +
geom_bar(stat = "identity", position = "dodge", color="black")  +
geom_errorbar(aes(ymin= mean, ymax= mean+sd), position = position_dodge(0.9), width = 0.25,
color="black") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# Stacked barchart with SD as error bars.
ggplot(CPT_kcal_forstacked_read, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black")  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
seq(from=20,to=100,by=20)
# Stacked barchart with SD as error bars.
ggplot(CPT_kcal_forstacked_read, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black")  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
scale_y_continuous(limites=c(0,120), breaks= seq(from=20,to=100,by=20)) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# Stacked barchart with SD as error bars.
ggplot(CPT_kcal_forstacked_read, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black")  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
scale_y_continuous(limits=c(0,120), breaks= seq(from=20,to=100,by=20)) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# Stacked barchart with SD as error bars.
ggplot(CPT_kcal_forstacked_read, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black")  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
scale_y_continuous(limits=c(0,110), breaks= seq(from=20,to=100,by=20)) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# --------------------------------------------------------------------------------------------------------------
# Plot a barchart without SD.
ggplot(CPT_kcal, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
# change colors and labels of legend. Ensure the factor order is correct.
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
# Specify the y axis breaks.
scale_y_continuous(limits=c(0,110), breaks= seq(from=20,to=100,by=20)) +
no_grid + space_axes +
# Specify the font size and angle of xlabel.
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# Stacked barchart with SD as error bars.
ggplot(CPT_kcal_forstacked_read, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black", width = 0.7)  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
scale_y_continuous(limits=c(0,110), breaks= seq(from=20,to=100,by=20)) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
