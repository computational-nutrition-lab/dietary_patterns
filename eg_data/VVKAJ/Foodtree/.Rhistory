nrow(mycol)
head(mycol, 20)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
V1table
write.table(V1table, "clipboard", sep="\t", row.names = F)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
V1table
write.table(V1table, "clipboard", sep="\t", row.names = F)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
V1table
write.table(V1table, "clipboard", sep="\t", row.names = F)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
V1table
write.table(V1table, "clipboard", sep="\t", row.names = F)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
colnames(bbb)
sortedbbb = bbb[ order(bbb$Freq, decreasing = T), ]
sortedbbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
sortedbbb = bbb[ order(bbb$Freq, decreasing = T), ]
sortedbbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
colnames(bbb)
sortedbbb = bbb[ order(bbb$Freq, decreasing = T), ]
sortedbbb
write.table(as.data.frame(sortedbbb), "clipboard", sep="\t")
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
install.packages("tm")
library(tm)
#Create a vector containing only the text
text <- data$text
install.packages("wordcloud2")
library(wordcloud2)
#Create a vector containing only the text
text <- data$text
View(bbb)
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 400, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 400, random.order=FALSE, rot.per=0.8,
colors=brewer.pal(8, "Dark2"))
?wordcloud
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 400, random.order=T, rot.per=1,
colors=brewer.pal(8, "Dark2"))
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 400, random.order=T, rot.per=0,
colors=brewer.pal(8, "Dark2"))
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 400, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"))
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 40, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"))
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 40, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
head(sortedbbb)
head(sortedbbb,15)
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 40, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F, ordered.colors=T)
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 40, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
head(sortedbbb,15)
View(sortedbbb)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=5,
max.words = 40, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=5,
max.words = 400, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=10,
max.words = 400, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=20,
max.words = 400, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=20,
max.words = 400, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=T)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=15,
max.words = 400, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=30,
max.words = 400, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=5,
max.words = 400, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=5,
max.words = 100, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
wordcloud2(data=bbb, size=1.6, color='random-dark')
head(sortedbbb,15)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
colnames(bbb)
sortedbbb = bbb[ order(bbb$Freq, decreasing = T), ]
sortedbbb
write.table(as.data.frame(sortedbbb), "clipboard", sep="\t", row.names=F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
sortedbbb = bbb[ order(bbb$Freq, decreasing = T), ]
sortedbbb
head(sortedbbb)
write.table(as.data.frame(sortedbbb), "clipboard", sep="\t", row.names=F)
female = read.table(file="clipboard", sep="\t", header=T)
head(female, 20)
nrow(female)
male = read.table(file="clipboard", sep="\t", header=T)
head(male, 20)
nrow(male)
names(female)
names(female)[2] <- "female_freq"
nrow(female)
head(female, 20)
names(male)[2] <- "male_freq"
head(male, 20)
fandm <- merge(x=female, y=male, all = T, by="mycol")
head(fandm)
ttwoway <- fandm
Total = colSums(t(ttwoway)) # Column totals
fandm_zeros[ is.na(fandm_zeros) ] <- 0
fandm_zeros <- fandm # make a copy
fandm_zeros[ is.na(fandm_zeros) ] <- 0
head(fandm_zeros)
ttwoway <- fandm_zeros
Total = colSums(t(ttwoway)) # Column totals
write.table(fandm_zeros, "clipboard", sep='\t')
write.table(fandm_zeros, "clipboard", sep='\t', row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
sortedbbb = bbb[ order(bbb$Freq, decreasing = T), ]
sortedbbb
table(sortedbbb$Freq)
sum(sortedbbb$Freq)
write.table(as.data.frame(sortedbbb), "clipboard", sep="\t", row.names=F)
colnames(bbb)
bbb
write.table(bbb, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t", row.names = F)
nrow(mycol)
head(mycol, 20)
unique(mycol)
uniquenames = unique(mycol)
write.table(uniquenames, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
uniquenames = unique(mycol)
sort(uniquenames)
order(uniquenames)
uniquenames
write.table(uniquenames, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t", header =T) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
mydata = read.table(file="clipboard", sep="\t", header =f) # sep="," for 1 column, sep="\t" for multiple columns
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
V1table
sortedV1table = V1table[ order(V1table$Freq, decreasing = T), ]  # sort by col totals
sortedV1table
write.table(sortedV1table, "clipboard", sep="\t", row.names = F)
length(unique(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
V1table = as.data.frame(table(mydata$V1))
V1table
length(unique(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
sortedV1table = V1table[ order(V1table$Freq, decreasing = T), ]  # sort by col totals
write.table(sortedV1table, "clipboard", sep="\t", row.names = F)
# generate a two-way parents' frequency table
female = read.table(file="clipboard", sep="\t", header=T)
head(female, 20)
nrow(female)
# generate a two-way parents' frequency table
female = read.table(file="clipboard", sep="\t", header=F)
head(female, 20)
nrow(female)
names(female)
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
sortedV1table = V1table[ order(V1table$Freq, decreasing = T), ]  # sort by col totals
write.table(sortedV1table, "clipboard", sep="\t", row.names = F)
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
sortedV1table = V1table[ order(V1table$Freq, decreasing = T), ]  # sort by col totals
write.table(sortedV1table, "clipboard", sep="\t", row.names = F)
# generate a two-way parents' frequency table
female = read.table(file="clipboard", sep="\t", header=F)
head(female, 20)
nrow(female)
# generate a two-way parents' frequency table
female = read.table(file="clipboard", sep="\t", header=F)
head(female, 20)
nrow(female)
names(female)[2] <- "female_freq"
male = read.table(file="clipboard", sep="\t", header=T)
head(male, 20)
nrow(male)
nrow(male)
names(male)[2] <- "male_freq"
head(female, 20)
# generate a two-way parents' frequency table
female = read.table(file="clipboard", sep="\t", header=T)
head(female, 20)
nrow(female)
names(female)[2] <- "female_freq"
head(female, 20)
head(male, 20)
fandm <- merge(x=female, y=male, all = T, by="Val1")
fandm <- merge(x=female, y=male, all = T, by="Var1")
head(fandm)
# replace NAs with zero.
fandm_zeros[ is.na(fandm_zeros) ] <- 0
fandm_zeros <- fandm # make a copy
# replace NAs with zero.
fandm_zeros[ is.na(fandm_zeros) ] <- 0
head(fandm_zeros)
write.table(fandm_zeros, "clipboard", sep='\t', row.names = F)
ttwoway <- fandm_zeros
Total = colSums(t(ttwoway)) # Column totals
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
sortedV1table = V1table[ order(V1table$Freq, decreasing = T), ]  # sort by col totals
write.table(V1table, "clipboard", sep="\t", row.names = F)
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
library(dplyr)
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
mydata %>% group_by(V2) %>% summarize(totalcount=count(V4))
mydata %>% group_by(V2) %>% summarise(totalcount=sum(V4))
bypulse <-  mydata %>% group_by(V2) %>% summarise(totalcount=sum(V4))
write.table(bypulse, "clipboard", sep='\t')
# ---------------------------------------------------------------------------------------------------------------
# use this working directory until this script is complete.
setwd("~/GitHub/dietary_patterns")
# Load the functions necessary to set directories.
source("lib/specify_dir_and_check_col.R")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# ========================================================================================
# Load source scripts for visualizing food trees.
# ========================================================================================
source("lib/viz_food_tree.r")
# VVKAJ_NEW!!
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/Foodtree")
tree <- read.tree("VVKAJ_Items_f_s_m_ff_reduced_3Lv.tree.nwk")
tree
# ---------------------------------------------------------------------------------------------------------------
# Prepare node labels of L1 for plotting. It assumes that the tree file has 9 L1 levels.
PrepFoodTreePlots(input.tree=tree)
# Look at the color-coded and annotated food tree, saved as annotated_tree.
annotated_tree
# Create a color-coded and annotated food tree with 9 L1 levels.
# Choose either 'circular' or 'radial' for layout.
# It is OK to see some warning messages about Coordinate system and scale for 'y' already being present.
VizFoodTree(input.tree=tree, layout="radial")
# Look at the color-coded and annotated food tree, saved as annotated_tree.
annotated_tree
# Or a tiff file.
ggsave("VVKAJ_Items_f_s_m_ff_reduced_3Lv.tree.tif", annotated_tree, device='tiff', width=6, height=6, dpi=300)
tree <- read.tree("VVKAJ_Items_f_s_m_ff_reduced_4Lv.tree.nwk")
tree
# ---------------------------------------------------------------------------------------------------------------
# Prepare node labels of L1 for plotting. It assumes that the tree file has 9 L1 levels.
PrepFoodTreePlots(input.tree=tree)
# Create a color-coded and annotated food tree with 9 L1 levels.
# Choose either 'circular' or 'radial' for layout.
# It is OK to see some warning messages about Coordinate system and scale for 'y' already being present.
VizFoodTree(input.tree=tree, layout="radial")
# Look at the color-coded and annotated food tree, saved as annotated_tree.
annotated_tree
# Or a tiff file.
ggsave("VVKAJ_Items_f_s_m_ff_reduced_4Lv.tree.tif", annotated_tree, device='tiff', width=6, height=6, dpi=300)
# ---------------------------------------------------------------------------------------------------------------
# Specify the directory where the data is again.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/Foodtree")
# Limit to just the foods reported in your study (formatted dietrecords.txt as the input)
FilterDbByDietRecords(food_database_fn = "../../../data/Food_tree_data/ASA24Database.txt",
food_records_fn  = "VVKAJ_Items_f_s_m_ff.txt",   # output of FormatFoods above.
output_fn        = "VVKAJ_Items_f_s_m_ff_database.txt")
# ========================================================================================
# Load source scripts
# ========================================================================================
source("lib/specify_dir_and_check_col.R")
source("lib/Food_tree_scripts/newick.tree.r")
source("lib/Food_tree_scripts/check.db.r")
source("lib/Food_tree_scripts/format.foods.r")
# Come back to the main directory
setwd(main_wd)
# ========================================================================================
# Load source scripts
# ========================================================================================
source("lib/specify_dir_and_check_col.R")
source("lib/Food_tree_scripts/newick.tree.r")
source("lib/Food_tree_scripts/check.db.r")
source("lib/Food_tree_scripts/format.foods.r")
source("lib/Food_tree_scripts/filter.db.by.diet.records.r")
source("lib/Food_tree_scripts/make.food.tree.r")
source("lib/Food_tree_scripts/make.food.otu.r")
source("lib/Food_tree_scripts/make.fiber.otu.r")
source("lib/Food_tree_scripts/make.dhydrt.otu.r")
# ---------------------------------------------------------------------------------------------------------------
# Specify the directory where the data is again.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/Foodtree")
# Limit to just the foods reported in your study (formatted dietrecords.txt as the input)
FilterDbByDietRecords(food_database_fn = "../../../data/Food_tree_data/ASA24Database.txt",
food_records_fn  = "VVKAJ_Items_f_s_m_ff.txt",   # output of FormatFoods above.
output_fn        = "VVKAJ_Items_f_s_m_ff_database.txt")
# Limit to just the foods reported in your study (formatted dietrecords.txt as the input)
FilterDbByDietRecords(food_database_fn = "../../../data/Food_tree_data/ASA24Database.txt",
food_records_fn  = "VVKAJ_Items_f_s_m_ff.txt",   # output of FormatFoods above.
output_fn        = "VVKAJ_Items_f_s_m_ff_database.txt")
