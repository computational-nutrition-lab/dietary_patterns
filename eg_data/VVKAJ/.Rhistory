gapchart <<- FactoextraGapMethod(k.values = 1: (maxK-1) )
# Save the silhouette method graphic as a PDF.
ggsave( paste(out.dir, paste(out.prefix, "_gapmethod.pdf", sep=""), sep= .Platform$file.sep),
gapchart, device="pdf", width=5, height=5, units="in")
# ggsave( paste(out.dir, paste(out.prefix, "_gapmethod.pdf", sep=""), sep= .Platform$file.sep),
#         gapchart, device="pdf", width=5, height=5, units="in")
#
}
# Run elbow, silhouette, and gap methods to find an optimum K (number of clusters).
# Do not alter the name of the input file: kmeans_input. This function below assumes that
# the input is named as "kmeans_input".
# You can only run those three methods for K= 1 through (number of observations - 1).
# The gap method output will be printed on the Console. The gap values are plotted in
# xxx_gapmethod.pdf.
ChooseK(out.dir= res_dir_nut_asis, out.prefix= res_prefix_nut_asis)
# Load Nut_asis data.
Tot_m_QCed_Nut_asis <- read.table(file="VVKAJ_Tot_m_QCed_Nut_asis.txt", sep="\t", header=T)
# Scale your input file and name it as k-means_input.
kmeans_input <- scale(Tot_m_QCed_Nut_asis)
# Ensure your input file has the correct number of rows and columns.
dim(kmeans_input)
# Specify the directory (folder) to save the results.
res_dir_nut_asis = "kmeans_Nut_asis"
# Specify the prefix of filenames to be saved.
res_prefix_nut_asis = "VVKAJ_Nut_asis"
# Run elbow, silhouette, and gap methods to find an optimum K (number of clusters).
# Do not alter the name of the input file: kmeans_input. This function below assumes that
# the input is named as "kmeans_input".
# You can only run those three methods for K= 1 through (number of observations - 1).
# The gap method output will be printed on the Console. The gap values are plotted in
# xxx_gapmethod.pdf.
ChooseK(out.dir= res_dir_nut_asis, out.prefix= res_prefix_nut_asis)
# With specific K values in mind, perform k-means analysis with one specified K.
# Also, change the file name to be saved as a PDF.
OneK(myK= 3, out.dir= res_dir_nut_asis, out.fn = "VKAJ_Nut_asis_K3")
# Or try multiple Ks and print the biplots in one panel.
# Also, change the file name to be saved as a PDF.
# This uses the factoextra and gridExtra packages.
MultipleK(myKs = c(3,4,5,6), out.dir = res_dir_nut_asis, out.fn = "VKAJ_Nut_asis_K3-6")
# Load Nut_ave data.
Tot_m_QCed_Nut_ave <- read.table(file="VVKAJ_Tot_m_QCed_Nut_ave_subset.txt", sep="\t", header=T)
# Scale your input file and name it as k-means_input.
kmeans_input <- scale(Tot_m_QCed_Nut_ave)
rm(kmeans_input1)
# Ensure your input file has the correct number of rows and columns.
dim(kmeans_input)
# Specify the directory (folder) to save the results.
res_dir_nut_ave = "kmeans_Nut_ave"
# Specify the prefix of filenames to be saved.
res_prefix_nut_ave = "VVKAJ_Nut_ave"
res_prefix_nut_ave
# Run elbow, silhouette, and gap methods to find an optimum K (number of clusters).
ChooseK(out.dir= res_dir_nut_ave, out.prefix= res_prefix_nut_ave)
ChooseK <- function(out.dir= res_dir, out.prefix= res_prefix){
# Set your ggplot2 theme.
require(ggplot2)
theme_set(theme_bw(base_size = 14))
# Set seed for consistent results.
set.seed(123)
# Detemine max K to try. If there are 15 or more observations, go with 15;
# if there are less than 15 observations, go with the number of observations.
if(nrow(kmeans_input)<15){
maxK = nrow(kmeans_input)
}else{
maxK = 15
}
# ---------------------------------------------------------------------------------------------------------------
# Use the elbow method to find the ideal K. K cannot be larger than the number of datapoints (rows) in input.
elbowmethod <- ElbowMethod(k.values = 1 : (maxK-1) )
# Save the elbowmethod graphic (K vs total within-clusters sum of squares) as a PDF.
ggsave( paste(out.dir, paste(out.prefix, "_elbowmethod.pdf", sep=""), sep= .Platform$file.sep),
elbowmethod, device="pdf", width=5, height=5, units="in")
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K. This uses the cluster and factoextra package.
require(factoextra)
silhouettechart <- factoextra::fviz_nbclust(kmeans_input, kmeans, k.max= maxK-1, method="silhouette")
# Save the silhouette method graphic as a PDF.
ggsave( paste(out.dir, paste(out.prefix, "_silhouettemethod.pdf", sep=""), sep= .Platform$file.sep),
silhouettechart, device="pdf", width=5, height=5, units="in")
# ---------------------------------------------------------------------------------------------------------------
# Use the factoextra package to use the Gap statistic method.
gapchart <- FactoextraGapMethod(k.values = 1: (maxK-1) )
# Save the silhouette method graphic as a PDF.
ggsave( paste(out.dir, paste(out.prefix, "_gapmethod.pdf", sep=""), sep= .Platform$file.sep),
gapchart, device="pdf", width=5, height=5, units="in")
}
# With specific K values in mind, perform k-means analysis with one specified K.
OneK(myK= 5, out.dir= res_dir_nut_asis, out.fn = "VKAJ_Nut_ave_K5")
# With specific K values in mind, perform k-means analysis with one specified K.
OneK(myK= 5, out.dir= res_dir_nut_ave, out.fn = "VKAJ_Nut_ave_K5")
# Or try multiple Ks and print the biplots in one panel.
MultipleK(myKs = c(3,4,5,7), out.dir = res_dir_nut_ave, out.fn = "VKAJ_Nut_ave_K3457")
# With specific K values in mind, perform k-means analysis with one specified K.
OneK(myK= 5, out.dir= res_dir_nut_ave, out.fn = "VVKAJ_Nut_ave_K5")
# Or try multiple Ks and print the biplots in one panel.
MultipleK(myKs = c(3,4,5,7), out.dir = res_dir_nut_ave, out.fn = "VVKAJ_Nut_ave_K3457")
Tot_m_QCed_Nut_asis <- read.table(file="VVKAJ_Tot_m_QCed_Nut_asis.txt", sep="\t", header=T)
# Scale your input file and name it as k-means_input.
kmeans_input <- scale(Tot_m_QCed_Nut_asis)
# Ensure your input file has the correct number of rows and columns.
dim(kmeans_input)
# Specify the directory (folder) to save the results.
res_dir_nut_asis = "kmeans_Nut_asis"
# Specify the prefix of filenames to be saved.
res_prefix_nut_asis = "VVKAJ_Nut_asis"
# Run elbow, silhouette, and gap methods to find an optimum K (number of clusters).
# Do not alter the name of the input file: kmeans_input. This function below assumes that
# the input is named as "kmeans_input".
# You can only run those three methods for K= 1 through (number of observations - 1).
# The gap method output will be printed on the Console. The gap values are plotted in
# xxx_gapmethod.pdf.
ChooseK(out.dir= res_dir_nut_asis, out.prefix= res_prefix_nut_asis)
# Look at the three figures generated by th ChooseK function above. The elbow and gap methods did not give a
# distinct peak, but the silhouette method gave a peak at K=3. K=2,4,5 also has relatively high silhouette
# width (~likelihood).
# With specific K values in mind, perform k-means analysis with one specified K.
# Also, change the file name to be saved as a PDF.
OneK(myK= 3, out.dir= res_dir_nut_asis, out.fn = "VKAJ_Nut_asis_K3")
# Or try multiple Ks and print the biplots in one panel.
# Also, change the file name to be saved as a PDF.
# This uses the factoextra and gridExtra packages.
MultipleK(myKs = c(3,4,5,6), out.dir = res_dir_nut_asis, out.fn = "VKAJ_Nut_asis_K3-6")
# Load Cat_asis data.
Tot_m_QCed_Cat_asis <- read.table(file="VVKAJ_Tot_m_QCed_Cat_asis.txt", sep="\t", header=T)
# Scale your input file and name it as k-means_input.
kmeans_input <- scale(Tot_m_QCed_Cat_asis)
# Ensure your input file has the correct number of rows and columns.
dim(kmeans_input)
# Specify the directory (folder) to save the results.
res_dir_cat_asis = "kmeans_Cat_asis"
# Specify the prefix of filenames to be saved.
res_prefix_cat_asis = "VVKAJ_Cat_asis"
# Run elbow, silhouette, and gap methods to find an optimum K (number of clusters).
ChooseK(out.dir= res_dir_cat_asis, out.prefix= res_prefix_cat_asis)
# With specific K values in mind, perform k-means analysis with one specified K.
OneK(myK= 3, out.dir= res_dir_cat_asis, out.fn = "VKAJ_Cat_asis_K3")
# Try multiple Ks and print the biplots in one panel.
MultipleK(myKs = c(3,4,5,6), out.dir = res_dir_cat_asis, out.fn = "VKAJ_Cat_asis_K3-6")
# ---------------------------------------------------------------------------------------------------------------
# Loop through multiple Ks
MultipleK <- function(myKs, out.dir, out.fn){
plots <- list()
km_results_mult <- list()
# Perform the k-means analysis, with the optimum number you found above as the 'centers'.
for(i in 1:length(myKs)){
# k-means analysis
km_results_mult[[i]] <- kmeans(x=kmeans_input, centers = myKs[i], nstart = 25)
# Define title for each K
plot_title <- paste("K=", myKs[i], sep = "")
# Plot
plots[[i]] = factoextra::fviz_cluster(km_results_mult[[i]],
data = kmeans_input,
ellipse = T, ellipse.alpha = 0.1,
show.clust.cent = F,
ggtheme = theme_bw(base_size = 10),
repel = F, labelsize = 10,
main = plot_title ) + theme(aspect.ratio = 1)
}
# Install the gridExtra package if needed.
if(!require("gridExtra"))install.packages("gridExtra")
# Arrange the plots in the same panel.
if(length(myKs)==2){
panel <- gridExtra::grid.arrange(plots[[1]], plots[[2]], nrow = round(length(myKs)/2))
}
else if(length(myKs)==3){
panel <- gridExtra::grid.arrange(plots[[1]], plots[[2]], plots[[3]], nrow = round(length(myKs)/2))
}
else if(length(myKs)==4){
panel <- gridExtra::grid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], nrow = round(length(myKs)/2))
}
else{
cat("Only 2-4 plots can be created at one time.", "\n",
"Please enter 2-4 K values and run again.")
}
# Save the plot as a PDF file.
ggsave(paste(out.dir, paste(out.fn, ".pdf", sep=""), sep= .Platform$file.sep),
panel, device="pdf", width=8, height=8.1, units="in")
}
# ---------------------------------------------------------------------------------------------------------------
# Perform k-means analysis with one specified number and plot it.
OneK <- function(myK, out.dir, out.fn){
# k-means analysis
km_results_one <- kmeans(x=kmeans_input, centers = myK, nstart = 25)
# Define your plot title
plot_title_one <- paste("K=", myK, sep = "")
oneKplot <- factoextra::fviz_cluster(km_results_one,
data = kmeans_input,
ellipse = T, ellipse.alpha = 0.1,
show.clust.cent = F,
ggtheme = theme_bw(base_size = 10),
repel = F, labelsize = 10,
main = plot_title_one) + theme(aspect.ratio = 1)
# Save the plot as a PDF file.
ggsave(paste(out.dir, paste(out.fn, ".pdf", sep=""), sep= .Platform$file.sep),
oneKplot, device="pdf", width=4, height=4.05, units="in")
}
# With specific K values in mind, perform k-means analysis with one specified K.
OneK(myK= 3, out.dir= res_dir_cat_asis, out.fn = "VKAJ_Cat_asis_K3")
# With specific K values in mind, perform k-means analysis with one specified K.
OneK(myK= 3, out.dir= res_dir_cat_asis, out.fn = "VKAJ_Cat_asis_K3")
# Try multiple Ks and print the biplots in one panel.
MultipleK(myKs = c(3,4,5,6), out.dir = res_dir_cat_asis, out.fn = "VKAJ_Cat_asis_K3-6")
# Load Nut_ave data.
Tot_m_QCed_Nut_ave <- read.table(file="VVKAJ_Tot_m_QCed_Nut_ave_subset.txt", sep="\t", header=T)
# Scale your input file and name it as k-means_input.
kmeans_input <- scale(Tot_m_QCed_Nut_ave)
# Ensure your input file has the correct number of rows and columns.
dim(kmeans_input)
# Specify the directory (folder) to save the results.
res_dir_nut_ave = "kmeans_Nut_ave"
# Specify the prefix of filenames to be saved.
res_prefix_nut_ave = "VVKAJ_Nut_ave"
# Run elbow, silhouette, and gap methods to find an optimum K (number of clusters).
ChooseK(out.dir= res_dir_nut_ave, out.prefix= res_prefix_nut_ave)
# With specific K values in mind, perform k-means analysis with one specified K.
OneK(myK= 5, out.dir= res_dir_nut_ave, out.fn = "VVKAJ_Nut_ave_K5")
# Try multiple Ks and print the biplots in one panel.
MultipleK(myKs = c(3,4,5,7), out.dir = res_dir_nut_ave, out.fn = "VVKAJ_Nut_ave_K3457")
# Load Nut_asis data.
Tot_m_QCed_Nut_asis <- read.table(file="VVKAJ_Tot_m_QCed_Nut_asis.txt", sep="\t", header=T)
# Scale your input file and name it as k-means_input.
kmeans_input <- scale(Tot_m_QCed_Nut_asis)
# Ensure your input file has the correct number of rows and columns.
dim(kmeans_input)
# Specify the directory (folder) to save the results.
res_dir_nut_asis = "kmeans_Nut_asis"
# Specify the prefix of filenames to be saved.
res_prefix_nut_asis = "VVKAJ_Nut_asis"
# Run elbow, silhouette, and gap methods to find an optimum K (number of clusters).
# Do not alter the name of the input file: kmeans_input. This function below assumes that
# the input is named as "kmeans_input".
# You can only run those three methods for K= 1 through (number of observations - 1).
# The gap method output will be printed on the Console. The gap values are plotted in
# xxx_gapmethod.pdf.
ChooseK(out.dir= res_dir_nut_asis, out.prefix= res_prefix_nut_asis)
# Look at the three figures generated by th ChooseK function above. The elbow and gap methods did not give a
# distinct peak, but the silhouette method gave a peak at K=3. K=2,4,5 also has relatively high silhouette
# width (~likelihood).
# With specific K values in mind, perform k-means analysis with one specified K.
# Also, change the file name to be saved as a PDF.
OneK(myK= 3, out.dir= res_dir_nut_asis, out.fn = "VKAJ_Nut_asis_K3")
# Or try multiple Ks and print the biplots in one panel.
# Also, change the file name to be saved as a PDF.
# This uses the factoextra and gridExtra packages.
MultipleK(myKs = c(3,4,5,6), out.dir = res_dir_nut_asis, out.fn = "VKAJ_Nut_asis_K3-6")
# Load Cat_ave data.
Tot_m_QCed_Cat_ave <- read.table(file="VVKAJ_Tot_m_QCed_Cat_ave_subset.txt", sep="\t", header=T)
# Scale your input file and name it as k-means_input.
kmeans_input <- scale(Tot_m_QCed_Cat_ave)
# Ensure your input file has the correct number of rows and columns.
dim(kmeans_input)
# Specify the directory (folder) to save the results.
res_dir_cat_ave = "kmeans_Cat_ave"
# Specify the prefix of filenames to be saved.
res_prefix_cat_ave = "VVKAJ_Cat_ave"
# Run elbow, silhouette, and gap methods to find an optimum K (number of clusters).
ChooseK(out.dir= res_dir_cat_ave, out.prefix= res_prefix_cat_ave)
# With specific K values in mind, perform k-means analysis with one specified K.
OneK(myK= 4, out.dir= res_dir_cat_ave, out.fn = "VVKAJ_Cat_ave_K4")
# Try multiple Ks and print the biplots in one panel.
MultipleK(myKs = c(2,3,4), out.dir = res_dir_cat_ave, out.fn = "VVKAJ_Cat_ave_K2-4")
MultipleK(myKs = 2, out.dir = res_dir_cat_ave, out.fn = "VVKAJ_Cat_ave_K2only")
# ---------------------------------------------------------------------------------------------------------------
# Loop through multiple Ks
MultipleK <- function(myKs, out.dir, out.fn){
plots <- list()
km_results_mult <- list()
# Perform the k-means analysis, with the optimum number you found above as the 'centers'.
for(i in 1:length(myKs)){
# k-means analysis
km_results_mult[[i]] <- kmeans(x=kmeans_input, centers = myKs[i], nstart = 25)
# Define title for each K
plot_title <- paste("K=", myKs[i], sep = "")
# Plot
plots[[i]] = factoextra::fviz_cluster(km_results_mult[[i]],
data = kmeans_input,
ellipse = T, ellipse.alpha = 0.1,
show.clust.cent = F,
ggtheme = theme_bw(base_size = 10),
repel = F, labelsize = 10,
main = plot_title ) + theme(aspect.ratio = 1)
}
# Install the gridExtra package if needed.
if(!require("gridExtra"))install.packages("gridExtra")
# Arrange the plots in the same panel.
if(length(myKs)==2){
panel <- gridExtra::grid.arrange(plots[[1]], plots[[2]], nrow = round(length(myKs)/2))
}
else if(length(myKs)==3){
panel <- gridExtra::grid.arrange(plots[[1]], plots[[2]], plots[[3]], nrow = round(length(myKs)/2))
}
else if(length(myKs)==4){
panel <- gridExtra::grid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], nrow = round(length(myKs)/2))
}
else{
return("Only 2-4 plots can be created at one time.", "\n",
"Please enter 2-4 K values and run again.")
}
# Save the plot as a PDF file.
ggsave(paste(out.dir, paste(out.fn, ".pdf", sep=""), sep= .Platform$file.sep),
panel, device="pdf", width=8, height=8.1, units="in")
}
MultipleK(myKs = 2, out.dir = res_dir_cat_ave, out.fn = "VVKAJ_Cat_ave_K2only")
# ---------------------------------------------------------------------------------------------------------------
# Loop through multiple Ks
MultipleK <- function(myKs, out.dir, out.fn){
plots <- list()
km_results_mult <- list()
# Perform the k-means analysis, with the optimum number you found above as the 'centers'.
for(i in 1:length(myKs)){
# k-means analysis
km_results_mult[[i]] <- kmeans(x=kmeans_input, centers = myKs[i], nstart = 25)
# Define title for each K
plot_title <- paste("K=", myKs[i], sep = "")
# Plot
plots[[i]] = factoextra::fviz_cluster(km_results_mult[[i]],
data = kmeans_input,
ellipse = T, ellipse.alpha = 0.1,
show.clust.cent = F,
ggtheme = theme_bw(base_size = 10),
repel = F, labelsize = 10,
main = plot_title ) + theme(aspect.ratio = 1)
}
# Install the gridExtra package if needed.
if(!require("gridExtra"))install.packages("gridExtra")
# Arrange the plots in the same panel.
if(length(myKs)==2){
panel <- gridExtra::grid.arrange(plots[[1]], plots[[2]], nrow = round(length(myKs)/2))
}
else if(length(myKs)==3){
panel <- gridExtra::grid.arrange(plots[[1]], plots[[2]], plots[[3]], nrow = round(length(myKs)/2))
}
else if(length(myKs)==4){
panel <- gridExtra::grid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], nrow = round(length(myKs)/2))
}
else{
return(paste("Only 2-4 plots can be created at one time.", "\n",
"Please enter 2-4 K values and run again."))
}
# Save the plot as a PDF file.
ggsave(paste(out.dir, paste(out.fn, ".pdf", sep=""), sep= .Platform$file.sep),
panel, device="pdf", width=8, height=8.1, units="in")
}
MultipleK(myKs = 2, out.dir = res_dir_cat_ave, out.fn = "VVKAJ_Cat_ave_K2only")
MultipleK(myKs = c(2,3,4,5,6), out.dir = res_dir_cat_ave, out.fn = "VVKAJ_Cat_ave_K2only")
# Try multiple Ks and print the biplots in one panel.
MultipleK(myKs = c(2,3,4), out.dir = res_dir_cat_ave, out.fn = "VVKAJ_Cat_ave_K2-4")
# Ensure your input file has the correct number of rows and columns.
dim(kmeans_input)
# ---------------------------------------------------------------------------------------------------------------
# Loop through multiple Ks
MultipleK <- function(myKs, out.dir, out.fn){
plots <- list()
km_results_mult <- list()
# Perform the k-means analysis, with the optimum number you found above as the 'centers'.
for(i in 1:length(myKs)){
# k-means analysis
km_results_mult[[i]] <- kmeans(x=kmeans_input, centers = myKs[i], nstart = 25)
# Define title for each K
plot_title <- paste("K=", myKs[i], sep = "")
# Plot
plots[[i]] = factoextra::fviz_cluster(km_results_mult[[i]],
data = kmeans_input,
ellipse = T, ellipse.alpha = 0.1,
show.clust.cent = F,
ggtheme = theme_bw(base_size = 10),
repel = F, labelsize = 10,
main = plot_title ) + theme(aspect.ratio = 1)
}
# Install the gridExtra package if needed.
if(!require("gridExtra"))install.packages("gridExtra")
# Arrange the plots in the same panel.
if(length(myKs)==2){
panel <- gridExtra::grid.arrange(plots[[1]], plots[[2]], nrow = round(length(myKs)/2))
}
else if(length(myKs)==3){
panel <- gridExtra::grid.arrange(plots[[1]], plots[[2]], plots[[3]], nrow = round(length(myKs)/2))
}
else if(length(myKs)==4){
panel <- gridExtra::grid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], nrow = round(length(myKs)/2))
}
else{
return(paste("Only 2-4 plots can be created at one time.", "\n",
"Please enter 2-4 K values and run again."))
}
# Save the plot as a PDF file.
ggsave(paste(out.dir, paste(out.fn, ".png", sep=""), sep= .Platform$file.sep),
panel, device="png", width=8, height=8.1, units="in")
}
# Load Nut_asis data.
Tot_m_QCed_Nut_asis <- read.table(file="VVKAJ_Tot_m_QCed_Nut_asis.txt", sep="\t", header=T)
# Scale your input file and name it as k-means_input.
kmeans_input <- scale(Tot_m_QCed_Nut_asis)
# Ensure your input file has the correct number of rows and columns.
dim(kmeans_input)
# Specify the directory (folder) to save the results.
res_dir_nut_asis = "kmeans_Nut_asis"
# Specify the prefix of filenames to be saved.
res_prefix_nut_asis = "VVKAJ_Nut_asis"
# Or try multiple Ks and print the biplots in one panel.
# Likewise, change the file name to be saved as a PDF as necessary.
# This uses the factoextra and gridExtra packages.
MultipleK(myKs = c(3,4,5,6), out.dir = res_dir_nut_asis, out.fn = "VKAJ_Nut_asis_K3-6")
# ---------------------------------------------------------------------------------------------------------------
# Perform k-means analysis with one specified number and plot it.
OneK <- function(myK, out.dir, out.fn){
# k-means analysis
km_results_one <- kmeans(x=kmeans_input, centers = myK, nstart = 25)
# Define your plot title
plot_title_one <- paste("K=", myK, sep = "")
oneKplot <- factoextra::fviz_cluster(km_results_one,
data = kmeans_input,
ellipse = T, ellipse.alpha = 0.1,
show.clust.cent = F,
ggtheme = theme_bw(base_size = 10),
repel = F, labelsize = 10,
main = plot_title_one) + theme(aspect.ratio = 1)
# Save the plot as a PDF file.
ggsave(paste(out.dir, paste(out.fn, ".png", sep=""), sep= .Platform$file.sep),
oneKplot, device="png", width=4, height=4.05, units="in")
}
ChooseK <- function(out.dir= res_dir, out.prefix= res_prefix){
# Set your ggplot2 theme.
require(ggplot2)
theme_set(theme_bw(base_size = 14))
# Set seed for consistent results.
set.seed(123)
# Detemine max K to try. If there are 15 or more observations, go with 15;
# if there are less than 15 observations, go with the number of observations.
if(nrow(kmeans_input)<15){
maxK = nrow(kmeans_input)
}else{
maxK = 15
}
# ---------------------------------------------------------------------------------------------------------------
# Use the elbow method to find the ideal K. K cannot be larger than the number of datapoints (rows) in input.
elbowmethod <- ElbowMethod(k.values = 1 : (maxK-1) )
# Save the elbowmethod graphic (K vs total within-clusters sum of squares) as a PDF.
ggsave( paste(out.dir, paste(out.prefix, "_elbowmethod.png", sep=""), sep= .Platform$file.sep),
elbowmethod, device="png", width=5, height=5, units="in")
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K. This uses the cluster and factoextra package.
require(factoextra)
silhouettechart <- factoextra::fviz_nbclust(kmeans_input, kmeans, k.max= maxK-1, method="silhouette")
# Save the silhouette method graphic as a PDF.
ggsave( paste(out.dir, paste(out.prefix, "_silhouettemethod.png", sep=""), sep= .Platform$file.sep),
silhouettechart, device="png", width=5, height=5, units="in")
# ---------------------------------------------------------------------------------------------------------------
# Use the factoextra package to use the Gap statistic method.
gapchart <- FactoextraGapMethod(k.values = 1: (maxK-1) )
# Save the silhouette method graphic as a PDF.
ggsave( paste(out.dir, paste(out.prefix, "_gapmethod.png", sep=""), sep= .Platform$file.sep),
gapchart, device="png", width=5, height=5, units="in")
}
# Run elbow, silhouette, and gap methods to find an optimum K (number of clusters).
# Do not alter the name of the input file: kmeans_input. This function below assumes that
# the input is named as "kmeans_input".
# You can only run those three methods for K= 1 through (number of observations - 1).
# The gap method output will be printed on the Console. The gap values are plotted in
# xxx_gapmethod.pdf.
ChooseK(out.dir= res_dir_nut_asis, out.prefix= res_prefix_nut_asis)
# With specific K values in mind, perform k-means analysis with one specified K.
# Also, change the file name to be saved as a PDF.
OneK(myK= 3, out.dir= res_dir_nut_asis, out.fn = "VKAJ_Nut_asis_K3")
# Load Nut_ave data.
Tot_m_QCed_Nut_ave <- read.table(file="VVKAJ_Tot_m_QCed_Nut_ave_subset.txt", sep="\t", header=T)
# Scale your input file and name it as k-means_input.
kmeans_input <- scale(Tot_m_QCed_Nut_ave)
# Ensure your input file has the correct number of rows and columns.
dim(kmeans_input)
# Specify the directory (folder) to save the results.
res_dir_nut_ave = "kmeans_Nut_ave"
# Specify the prefix of filenames to be saved.
res_prefix_nut_ave = "VVKAJ_Nut_ave"
# Run elbow, silhouette, and gap methods to find an optimum K (number of clusters).
ChooseK(out.dir= res_dir_nut_ave, out.prefix= res_prefix_nut_ave)
# With specific K values in mind, perform k-means analysis with one specified K.
OneK(myK= 5, out.dir= res_dir_nut_ave, out.fn = "VVKAJ_Nut_ave_K5")
# Try multiple Ks and print the biplots in one panel.
MultipleK(myKs = c(3,4,5,7), out.dir = res_dir_nut_ave, out.fn = "VVKAJ_Nut_ave_K3457")
# Load Cat_asis data.
Tot_m_QCed_Cat_asis <- read.table(file="VVKAJ_Tot_m_QCed_Cat_asis.txt", sep="\t", header=T)
# Scale your input file and name it as k-means_input.
kmeans_input <- scale(Tot_m_QCed_Cat_asis)
# Ensure your input file has the correct number of rows and columns.
dim(kmeans_input)
# Specify the directory (folder) to save the results.
res_dir_cat_asis = "kmeans_Cat_asis"
# Specify the prefix of filenames to be saved.
res_prefix_cat_asis = "VVKAJ_Cat_asis"
# Run elbow, silhouette, and gap methods to find an optimum K (number of clusters).
ChooseK(out.dir= res_dir_cat_asis, out.prefix= res_prefix_cat_asis)
# With specific K values in mind, perform k-means analysis with one specified K.
OneK(myK= 3, out.dir= res_dir_cat_asis, out.fn = "VKAJ_Cat_asis_K3")
# Try multiple Ks and print the biplots in one panel.
MultipleK(myKs = c(3,4,5,6), out.dir = res_dir_cat_asis, out.fn = "VKAJ_Cat_asis_K3-6")
# Load Cat_ave data.
Tot_m_QCed_Cat_ave <- read.table(file="VVKAJ_Tot_m_QCed_Cat_ave_subset.txt", sep="\t", header=T)
# Scale your input file and name it as k-means_input.
kmeans_input <- scale(Tot_m_QCed_Cat_ave)
# Ensure your input file has the correct number of rows and columns.
dim(kmeans_input)
# Specify the directory (folder) to save the results.
res_dir_cat_ave = "kmeans_Cat_ave"
# Specify the prefix of filenames to be saved.
res_prefix_cat_ave = "VVKAJ_Cat_ave"
# Run elbow, silhouette, and gap methods to find an optimum K (number of clusters).
ChooseK(out.dir= res_dir_cat_ave, out.prefix= res_prefix_cat_ave)
# With specific K values in mind, perform k-means analysis with one specified K.
OneK(myK= 4, out.dir= res_dir_cat_ave, out.fn = "VVKAJ_Cat_ave_K4")
# Try multiple Ks and print the biplots in one panel.
MultipleK(myKs = c(2,3,4), out.dir = res_dir_cat_ave, out.fn = "VVKAJ_Cat_ave_K2-4")
