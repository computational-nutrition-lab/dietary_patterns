source("lib/specify_dir_and_check_col.R")
source("lib/load_clean_ASA24.R")
source("lib/format.file.R")
# You can come back to the main directory by:
setwd(main_wd)
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/")
# Load your raw items data.
items_raw <- read.csv("VVKAJ_Items.csv", sep = ",", header=T)
# Save it as a .txt file for further processing.
write.table(items_raw, "VVKAJ_Items.txt", sep="\t", row.names=F)
# Special characters such as "'", ",", "%" may interfere correct data loading; thus,
# we replace them with an underscore "_".  Takes only .txt files as input.
# Specify column(s) to be processed in the "columns" argument.
format.file(filename = "VVKAJ_Items.txt",
columns  = "Food_Description",
outfn    = "VVKAJ_Items_f.txt")  # _f stands for "formatted".
# Load the formatted Items file.
items_f <- read.table("VVKAJ_Items_f.txt", sep="\t", header=T)
# All special characters in items_f should have been replaced with an underscore.
head(items_f)
unique(items_f$UserName)
# ========================================================================================
# <Optional> Use individuals_to_remove.txt to filter out users marked as Remove = yes.
# ========================================================================================
# Load your metadata that has information about which UserName(s) to remove.
ind_to_rm <- read.table("individuals_to_remove.txt", sep="\t", header=T)
View(ind_to_rm)
# Show which has "yes" in the "Remove" column, and remove them.
subset(ind_to_rm, Remove == "yes")
View(RemoveRows)
# Show which has "yes" in the "Remove" column, and remove them.
subset(ind_to_rm, Remove == "yes")
# Remove the specified individuals.
# The output will be saved as a text file with the specified name.
# This assumes the usernames are in UserName column, and will print which user(s) will be removed.
RemoveRows(data=items_f,  metadata.file=ind_to_rm, output.name="VVKAJ_Items_f_s.txt")
# Load the output for further processing.
items_f_s <- read.table("VVKAJ_Items_f_s.txt", header=T, sep="\t")
# Show unique usernames in items_f_s and confirm "VVKAJ101" has been removed.
unique(items_f_s$UserName)
# ========================================================================================
# <Optional> Use individuals_to_remove.txt to filter out users marked as Remove = yes.
# ========================================================================================
# Load your metadata that has information about which UserName(s) to remove.
ind_to_rm <- read.table("individuals_to_remove.txt", sep="\t", header=T)
ind_to_rm
# ========================================================================================
# <Optional> Use individuals_to_remove.txt to filter out users marked as Remove = yes.
# ========================================================================================
# Load your metadata that has information about which UserName(s) to remove.
ind_to_rm <- read.table("individuals_to_remove.txt", sep="\t", header=T)
ind_to_rm
# ========================================================================================
# <Optional> Use individuals_to_remove.txt to filter out users marked as Remove = yes.
# ========================================================================================
# Load your metadata that has information about which UserName(s) to remove.
ind_to_rm <- read.table("individuals_to_remove.txt", sep="\t", header=T)
ind_to_rm
# Remove the specified individuals.
# The output will be saved as a text file with the specified name.
# This assumes the usernames are in UserName column, and will print which user(s) will be removed.
RemoveRows(data=items_f,  metadata.file=ind_to_rm, output.name="VVKAJ_Items_f_s.txt")
# Load the output for further processing.
items_f_s <- read.table("VVKAJ_Items_f_s.txt", header=T, sep="\t")
# Show unique usernames in items_f_s and confirm "VVKAJ101" has been removed.
unique(items_f_s$UserName)
# Load ind_metadata.txt.
ind_metadata <- read.table("ind_metadata.txt", sep="\t", header=T)
ind_metadata
# Add this metadata of each participant in totals or items.
# 'NA' will be inserted to UserNames which are not in ind_metadata.
items_f_s_m <- merge(x=items_f_s, y=ind_metadata, by="UserName", all.x=T)
# Check that the items data and metadata are merged.
head(items_f_s_m)
# Save the merged dataframe as a .txt file.
write.table(items_f_s_m, "VVKAJ_Items_f_s_m.txt", sep="\t", row.names=F, quote=F)
# Use one of the input files saved above as an input for calculating totals for.
# Specify which columns have usernames and Recall.No., which is the number of recorded days.
GenerateTotals(inputfn = "VVKAJ_Items_f_s_m.txt",
User.Name = 'UserName',
Recall.No = 'RecallNo',
outfn = "VVKAJ_Tot.txt")
# Load the total file generated above.
new_totals <- read.table("VVKAJ_Tot.txt", header=T, sep="\t")
# The number of rows should be {No. of users x No. days}.
# In this case, 4 users x 3 days = 12 rows (observations).
nrow(new_totals)
# View the new_total
head(new_totals)
# Load ind_metadata.txt if you have not done so.
ind_metadata <- read.table("ind_metadata.txt", sep="\t", header=T)
ind_metadata
# Add this metadata of each participant to totals.
# 'NA' will be inserted to UserNames which are not in ind_metadata.
new_totals_m <- merge(x=new_totals, y=ind_metadata, by="UserName", all.x=T)
# Check that the items data and metadata are merged.
head(new_totals_m)
# Check that the items data and metadata are merged.
head(new_totals_m)
# Save the merged dataframe as a .txt file.
write.table(new_totals_m, "VVKAJ_Tot_m.txt", sep="\t", row.names=F, quote=F)
# Load your totals if necessary - to be used as input for QC.
new_totals <- read.table("VVKAJ_Tot_m.txt", sep="\t", header=T)
# Define your totals dataset to be used as input.
QCtotals <- new_totals
# Flag if KCAL is <600 or >5700 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "KCAL", min = 600, max = 5700)
# Flag if PROT is <10 or >240 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "PROT", min = 10, max = 240)
# Flag if TFAT is <15 or >230 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "TFAT", min = 15, max = 230)
# Flag if VC (Vitamin C) is <5 or >400 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "VC", min = 5, max = 400)
# You may find numerous potential outliers here. Then, click "No", and view those
# outliers with their other nutrient intake information by running the following;
VC_outliers <- subset(new_totals, VC < 5 | VC > 400)
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "BCAR", min = 15, max = 8200)
# You may find numerous potential outliers here. Then, click "No", and view those
# outliers with their other nutrient intake information by running the following;
BCAR_outliers <- subset(new_totals, BCAR < 15 | BCAR > 8200)
# sort in the order of BCAR and show only the specified variables.
BCAR_outliers[order(BCAR_outliers$BCAR, decreasing = T), c('UserName', 'KCAL', 'BCAR')]
# Save as "Totals_QCed.txt"
write.table(QCtotals, "VVKAJ_Tot_m_QCed.txt", sep="\t", quote=F, row.names=F)
# ---------------------------------------------------------------------------------------------------------------
QCtotals
# Come back to the main directory if necessary.
setwd(main.wd)
# Come back to the main directory if necessary.
setwd(main_wd)
# Import source code to run the analyses to follow.
source("lib/specify_dir_and_check_col.R")
source("lib/data_overview.R")
# Call color palette.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# You can come back to the main directory by:
setwd(main_wd)
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/")
# Load your items data to be analyzed.
items_f_s_m <- read.table("VVKAJ_Items_f_s_m.txt", sep="\t", header=T)
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/")
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ")
# Load your items data to be analyzed.
items_f_s_m <- read.table("VVKAJ_Items_f_s_m.txt", sep="\t", header=T)
colnames(items_f_s_m)
# View min, quantiles, mean, etc. for a variable in your dataset.
summary(items_f_s_m$KCAL)
# Summary statistics of all the variables
# Calculate minimum, 1st quantile, median, mean, 3rd quantile, max, and standard deviation
# for each variable in the input dataframe and save as a .txt file.
SummaryStats(inputdf = items_f_s_m,
outfn = "VVKAJ_Items_f_s_m_summ.txt")
View(SummaryStats)
head(items_f_s_m)
# ---------------------------------------------------------------------------------------------------------------
# Define ggplot1 themes
library(ggplot2)
# Theme black and white, with the base font size 14: change if necessary.
theme_set(theme_bw(base_size = 14))
# No gridlines inside charts
no_grid <- theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Insert some space between axes and axes labels.
space_axes <- theme(axis.title.x = element_text(margin=margin(t = 8, r = 0, b = 0, l = 0) ),
axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) )
# Boxplot of KCAL by users.
ggplot(items_f_s_m, aes(x=UserName, y=KCAL)) +
geom_boxplot() + no_grid + space_axes
# Boxplot of KCAL by users. And rotate the usernames 45 degrees for visibility.
ggplot(items_f_s_m, aes(x=UserName, y=KCAL)) +
geom_boxplot() + no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1) )
# Boxplot of KCAL by gender.
ggplot(items_f_s_m, aes(x=Gender, y=KCAL)) +
geom_boxplot() + no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1) )
# Boxplot of KCAL by gender.
ggplot(items_f_s_m, aes(x=Gender, y=KCAL)) +
geom_boxplot() + no_grid + space_axes
# Boxplot of KCAL by gender.
ggplot(items_f_s_m, aes(x=Gender, y=ALC)) +
geom_boxplot() + no_grid + space_axes
# Boxplot of KCAL by gender.
ggplot(items_f_s_m, aes(x=Gender, y=PROT)) +
geom_boxplot() + no_grid + space_axes
# Boxplot of KCAL by gender.
ggplot(items_f_s_m, aes(x=Gender, y=CARB)) +
geom_boxplot() + no_grid + space_axes
# Boxplot of KCAL by gender.
ggplot(items_f_s_m, aes(x=Gender, y=TFAT)) +
geom_boxplot() + no_grid + space_axes
# Scaterplot of two numeric variables: TFAT and KCAL.
ggplot(items_f_s_m, aes(x=TFAT, y=KCAL)) +
geom_point() + no_grid + space_axes
# Test if the two variables are correlated.
# The output should show p-value and R correlation coefficient
cor.test(x=items_f_s_m$TFAT, y=items_f_s_m$KCAL, method="pearson")
View(SpecifyDataDirectory)
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/")
# Load your QC-ed totals data to be analyzed.
tot_m_QCed <- read.table("VVKAJ_Tot_m_QCed.txt", sep="\t", header=T)
# Note that each row is a total dietary intake of each user on each day.
head(tot_m_QCed)
# Summary statistics of one variable
SummaryStats(inputdf = tot_m_QCed,
outfn = "VVKAJ_Tot_m_QCed_summ.txt")
# View min, quantiles, mean, etc. for a variable in your dataset.
summary(tot_m_QCed$KCAL)
# Boxplot of KCAL by users. This is a variation of the days, and note that
# some users may have less number of days due to the QC process or missing data.
ggplot(tot_m_QCed, aes(x=UserName, y=KCAL)) +
geom_boxplot() + no_grid + space_axes
rotate_x_axislabel <- theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1) )
# Boxplot of KCAL by users. This is a variation of the days, and note that
# some users may have less number of days due to the QC process or missing data.
ggplot(tot_m_QCed, aes(x=UserName, y=KCAL)) +
geom_boxplot() + no_grid + space_axes + rotate_x_axislabel
# Rotate the X axis labels 45 degrees for visibility.
rotate_X_labels <- theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1) )
# Scaterplot of two numeric variables: TFAT and KCAL.
ggplot(items_f_s_m, aes(x=TFAT, y=KCAL)) +
geom_point() + no_grid + space_axes + rotate_X_labels
# Boxplot of KCAL by users. And
ggplot(items_f_s_m, aes(x=UserName, y=KCAL)) +
geom_boxplot() + no_grid + space_axes + rotate_X_labels
# Boxplot of KCAL by gender.
ggplot(items_f_s_m, aes(x=Gender, y=KCAL)) +
geom_boxplot() + no_grid + space_axes
# Scaterplot of two numeric variables: TFAT and KCAL.
ggplot(items_f_s_m, aes(x=TFAT, y=KCAL)) +
geom_point() + no_grid + space_axes
rotate_X_labels <- theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1) )
# Boxplot of KCAL by users. This is a variation of the days, and note that
# some users may have less number of days due to the QC process or missing data.
ggplot(tot_m_QCed, aes(x=UserName, y=KCAL)) +
geom_boxplot() + no_grid + space_axes + rotate_X_labels
# Boxplot of KCAL by users. This is a variation of the days, and note that
# some users may have less number of days due to the QC process or missing data.
ggplot(tot_m_QCed, aes(x=UserName, y=KCAL)) +
geom_boxplot() + no_grid + space_axes + rotate_X_labels
# Boxplot of KCAL by gender.
ggplot(tot_m_QCed, aes(x=Gender, y=KCAL)) +
geom_boxplot() + no_grid + space_axes + rotate_X_labels
# Boxplot of KCAL by gender.
ggplot(tot_m_QCed, aes(x=Gender, y=KCAL)) +
geom_boxplot() + no_grid + space_axes
# Scaterplot of two variables.
ggplot(tot_m_QCed, aes(x=TFAT, y=KCAL)) +
geom_point() + no_grid + space_axes
# Test if the two variables are correlated.
# The output should show p-value and R correlation coefficient
cor.test(x=tot_m_QCed$TFAT, y=tot_m_QCed$KCAL, method="pearson")
# Prepare your totals dataset for line plot - insert NA to missing combinations of UserName and RecallNo (day),
# and separate rows into NA's and no NAs.
PrepLinePlot(inputdf= tot_m_QCed, day="RecallNo", username="UserName",
all.fn=           "VVKAJ_Tot_m_QCed_wNA.txt",
full.days.only.fn="VVKAJ_Tot_m_QCed_fullonly.txt",
partial.days.only.fn="VVKAJ_Tot_m_QCed_partialonly.txt")
# Load the files.
tot_m_QCed_w_NA <- read.table("VVKAJ_Tot_m_QCed_wNA.txt", sep="\t", header=T)
tot_m_QCed_fullonly <- read.table("VVKAJ_Tot_m_QCed_fullonly.txt", sep="\t", header=T)
tot_m_QCed_partialonly <- read.table("VVKAJ_Tot_m_QCed_partialonly.txt", sep="\t", header=T)
# Make RecallNo (day) as a factor.
tot_m_QCed$RecallNo <- as.factor(tot_m_QCed$RecallNo)
# Make RecallNo (day) as a factor.
tot_m_QCed$RecallNo <-             as.factor(tot_m_QCed$RecallNo)
tot_m_QCed_w_NA$RecallNo <-        as.factor(tot_m_QCed_w_NA$RecallNo)
tot_m_QCed_fullonly$RecallNo <-    as.factor(tot_m_QCed_fullonly$RecallNo)
tot_m_QCed_partialonly$RecallNo <- as.factor(tot_m_QCed_partialonly$RecallNo)
# Plot points and lines separately.  Specify your "y" twice.
# The geom_line function only connects individuals with all days of data.
ggplot() +
geom_point(tot_m_QCed,          mapping = aes(x=RecallNo, y=TFAT, group=UserName, color=UserName)) +
geom_line( tot_m_QCed_fullonly, mapping = aes(x=RecallNo, y=TFAT, group=UserName, color=UserName),
linetype="dashed") + no_grid
# Call color palette.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# You can come back to the main directory by:
setwd(main_wd)
# Call color palette.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ")
# Plot points and lines separately.  Specify your "y" twice.
# The geom_line function only connects individuals with all days of data.
ggplot() +
geom_point(tot_m_QCed,          mapping = aes(x=RecallNo, y=TFAT, group=UserName, color=UserName)) +
geom_line( tot_m_QCed_fullonly, mapping = aes(x=RecallNo, y=TFAT, group=UserName, color=UserName),
linetype="dashed") + no_grid +
scale_color_manual(values = distinct100colors)
# Plot points and lines separately.  Specify your "y" twice.
# The geom_line function only connects individuals with all days of data.
ggplot() +
geom_point(tot_m_QCed,          mapping = aes(x=RecallNo, y=TFAT, group=UserName, color=UserName)) +
geom_line( tot_m_QCed_fullonly, mapping = aes(x=RecallNo, y=TFAT, group=UserName, color=UserName),
linetype="dashed") + no_grid +
scale_color_manual(values = distinct100colors) +
geom_text(aes(label = UserName), vjust = 0)
# Plot points and lines separately.  Specify your "y" twice.
# The geom_line function only connects individuals with all days of data.
ggplot() +
geom_point(tot_m_QCed,          mapping = aes(x=RecallNo, y=TFAT, group=UserName, color=UserName)) +
geom_line( tot_m_QCed_fullonly, mapping = aes(x=RecallNo, y=TFAT, group=UserName, color=UserName),
linetype="dashed") + no_grid +
scale_color_manual(values = distinct100colors) +
geom_text(aes(label = unique(tot_m_QCed$UserName), vjust = 0))
# Plot points and lines separately.  Specify your "y" twice.
# The geom_line function only connects individuals with all days of data.
ggplot() +
geom_point(tot_m_QCed,          mapping = aes(x=RecallNo, y=TFAT, group=UserName, color=UserName)) +
geom_line( tot_m_QCed_fullonly, mapping = aes(x=RecallNo, y=TFAT, group=UserName, color=UserName),
linetype="dashed") + no_grid +
scale_color_manual(values = distinct100colors)
# ---------------------------------------------------------------------------------------------------------------
# Come back to the main directory before you start running another script.
setwd(main_wd)
# Import source code to run the analyses to follow.
source("lib/specify_dir_and_check_col.R")
source("lib/prep_data_for_clustering.R")
# Import source code to run the analyses to follow.
source("lib/specify_dir_and_check_col.R")
source("lib/percent_kcal.R")
# Call color palette.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# Load example totals data ===============================================================
# Specify the directory where the data is.
# SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/")
# Load the totals data.
# totals <- read.table("Totals_to_use.txt",  sep = "\t", header = T)
totals <- read.table("VVKAJ_Tot_m_QCed.txt",  sep = "\t", header = T)
# --------------------------------------------------------------------------------------------------------------
# Calculate the mean and SD of CARB, PROT, and TFAT.
CPTgramsPerUser(inputfn= totals, user.name = "UserName", recall.no = "RecallNo",
outfn='VVKAJ_Tot_m_QCed_CPT_g.txt')
# Load the %kcal
CPT_kcal <- read.table("VVKAJ_Tot_m_QCed_CPT_kcal.txt", sep="\t", header=T)
# Calculate the mean % of energy intake (kcal) and SD of CARB, PROT, and TFAT.
CPTpctKcalPerUser(inputfn=totals, user.name='UserName', recall.no='RecallNo',
outfn="VVKAJ_Tot_m_QCed_CPT_kcal.txt")
# Load the %kcal
CPT_kcal <- read.table("VVKAJ_Tot_m_QCed_CPT_kcal.txt", sep="\t", header=T)
CPT_kcal
# --------------------------------------------------------------------------------------------------------------
# Define ggplot1 themes
library(ggplot2)
# Theme black and white, with the base font size 14: change if necessary.
theme_set(theme_bw(base_size = 14))
# No gridlines inside charts
no_grid <- theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# Insert some space between axes and axes labels.
space_axes <- theme(axis.title.x = element_text(margin=margin(t = 8, r = 0, b = 0, l = 0) ),
axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) )
# --------------------------------------------------------------------------------------------------------------
# Define ggplot1 themes
library(ggplot2)
# Theme black and white, with the base font size 14: change if necessary.
theme_set(theme_bw(base_size = 14))
# No gridlines inside charts
no_grid <- theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# Insert some space between axes and axes labels.
space_axes <- theme(axis.title.x = element_text(margin=margin(t = 8, r = 0, b = 0, l = 0) ),
axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) )
# Rotate the X axis labels 45 degrees for visibility.
rotate_X_labels <- theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1) )
CPT_kcal
# --------------------------------------------------------------------------------------------------------------
# Plot a barchart without SD.
ggplot(CPT_kcal, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
# change colors and labels of legend. Ensure the factor order is correct.
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
# Specify the y axis breaks.
scale_y_continuous(limits=c(0,110), breaks= seq(from=20,to=100,by=20)) +
no_grid + space_axes +
# Specify the font size and angle of xlabel.
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# --------------------------------------------------------------------------------------------------------------
# Plot "dodge"-type of barchart (3 bars per user, NOT STACKED).
ggplot(CPT_kcal, aes(x = factor(UserName), y = mean, fill = macronutrient, colour = macronutrient)) +
geom_bar(stat = "identity", position = "dodge", color="black")  +
geom_errorbar(aes(ymin= mean, ymax= mean+sd), position = position_dodge(0.9), width = 0.25,
color="black") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# --------------------------------------------------------------------------------------------------------------
# Using CPT_kcal, create a stacked barchart.
CPT_kcal_forstacked_read
# Create a vector that contains all the users (individuals).
individuals <- unique(CPT_kcal$UserName)
individuals
# Generate a dataframe to save sd data.
CPT_kcal_forstacked <- data.frame(matrix(NA, nrow=length(individuals)*3, ncol=7))
CPT_kcal_forstacked
# Specify its column names.
colnames(CPT_kcal_forstacked) <- c("UserName", "macronutrient", "n", "mean", "sd", "sd_base", "sd_stacked")
# Calculate sd_base and sd_forstacked for stacked barchart.
# Note that this function assumes all users (individuals) have CARB, PROT, and TFAT values.
CalcStackedSD(input.df = CPT_kcal, out.fn = "CPT_kcal_forstacked.txt")
# Load the saved file that has SD for stacked barchart.
CPT_kcal_forstacked_read <- read.table("CPT_kcal_forstacked.txt", sep="\t", header=T)
CPT_kcal_forstacked_read
# Stacked barchart with SD as error bars.
ggplot(CPT_kcal_forstacked_read, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black", width = 0.7)  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
# scale_fill_manual(values = distinct100colors,
# labels=c( "Carbohydrates", "Protein", "Total fat")) +
scale_y_continuous(limits=c(0,110), breaks= seq(from=20,to=100,by=20)) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# Stacked barchart with SD as error bars.
ggplot(CPT_kcal_forstacked_read, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black", width = 0.7)  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
scale_y_continuous(limits=c(0,110), breaks= seq(from=20,to=100,by=20)) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# Stacked barchart with SD as error bars.
# Stacked barchart with SD as error bars.
ggplot(CPT_kcal_forstacked_read, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black", width = 0.7)  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
scale_y_continuous(limits=c(0,110), breaks= seq(from=20,to=100,by=20)) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# Stacked barchart with SD as error bars.
ggplot(CPT_kcal_forstacked_read, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black", width = 0.7)  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
# scale_fill_manual(values = distinct100colors,
# labels=c( "Carbohydrates", "Protein", "Total fat")) +
scale_y_continuous(limits=c(0,110), breaks= seq(from=20,to=100,by=20)) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
CPT_kcal_forstacked_read
CPT_kcal_forstacked_read_1 <- CPT_kcal_forstacked_read[16:30, ]
CPT_kcal_forstacked_read_1
# Stacked barchart with SD as error bars.
ggplot(CPT_kcal_forstacked_read_1, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black", width = 0.7)  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
# scale_fill_manual(values = distinct100colors,
# labels=c( "Carbohydrates", "Protein", "Total fat")) +
scale_y_continuous(limits=c(0,110), breaks= seq(from=20,to=100,by=20)) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
CPT_kcal_forstacked_read_2 <- rbind(CPT_kcal_forstacked_read, CPT_kcal_forstacked_read_1)
CPT_kcal_forstacked_read_2
# Stacked barchart with SD as error bars.
ggplot(CPT_kcal_forstacked_read_2, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black", width = 0.7)  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
# scale_fill_manual(values = distinct100colors,
# labels=c( "Carbohydrates", "Protein", "Total fat")) +
scale_y_continuous(limits=c(0,110), breaks= seq(from=20,to=100,by=20)) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
CPT_kcal_forstacked_read_1 <- CPT_kcal_forstacked_read[1:15, ]
CPT_kcal_forstacked_read_2 <- CPT_kcal_forstacked_read[16:30, ]
CPT_kcal_forstacked_read_3 <- rbind(CPT_kcal_forstacked_read_2, CPT_kcal_forstacked_read_1)
CPT_kcal_forstacked_read_3
# Stacked barchart with SD as error bars.
ggplot(CPT_kcal_forstacked_read_3, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black", width = 0.7)  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
# scale_fill_manual(values = distinct100colors,
# labels=c( "Carbohydrates", "Protein", "Total fat")) +
scale_y_continuous(limits=c(0,110), breaks= seq(from=20,to=100,by=20)) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# Stacked barchart with SD as error bars.
ggplot(CPT_kcal_forstacked_read_2, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black", width = 0.7)  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
# scale_fill_manual(values = distinct100colors,
# labels=c( "Carbohydrates", "Protein", "Total fat")) +
scale_y_continuous(limits=c(0,110), breaks= seq(from=20,to=100,by=20)) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# Stacked barchart with SD as error bars.
ggplot(CPT_kcal_forstacked_read_3, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black", width = 0.7)  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
# scale_fill_manual(values = distinct100colors,
# labels=c( "Carbohydrates", "Protein", "Total fat")) +
scale_y_continuous(limits=c(0,110), breaks= seq(from=20,to=100,by=20)) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
