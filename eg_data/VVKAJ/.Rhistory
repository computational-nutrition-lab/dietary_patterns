write.table(x = weighted_uni_dis6, file = output.fn, sep="\t", row.names = F)
}
# ---------------------------------------------------------------------------------------------------------------
# Generate and save an weighted unifrac distance matrix of "Samples".
WeightedUnifracDis(input.phyloseq.obj = phyfoods,
output.fn = "Unifrac/4Lv_WEIGHTED_uni_dis_2.txt")
# --------------
# A function to add SampleID to the items.csv.
AddSampleIDtoItems <- function(input.csv, user.name="UserName", recall.no="RecallNo", out.fn){
# Load your raw items data.
items_csv_raw <- read.csv(input.csv, sep = ",", header=T)
# Create a combination of user and day for merging.
items_csv_raw$userxday <- paste(items_csv_raw[, user.name], items_csv_raw[, recall.no], sep="_")
write.table("VVKAJ_Items_csv_ID.txt", items_csv_raw, sep="\t", row.names=F, quote=F)
}
AddSampleIDtoItems(input.csv="VVKAJ_Items.csv", user.name="UserName", recall.no="RecallNo", out.fn)
AddSampleIDtoItems(input.csv="VVKAJ_Items.csv", user.name="UserName", recall.no="RecallNo", out.fn)
# --------------
# A function to add SampleID to the items.csv.
AddSampleIDtoItems <- function(input.csv, user.name="UserName", recall.no="RecallNo", out.fn){
# Load your raw items data.
items_csv_raw <- read.csv(input.csv, sep = ",", header=T)
# Create a combination of user and day for merging.
# items_csv_raw$userxday <- paste(items_csv_raw[, user.name], items_csv_raw[, recall.no], sep="_")
write.table("VVKAJ_Items_csv_ID.txt", items_csv_raw, sep="\t", row.names=F, quote=F)
}
AddSampleIDtoItems(input.csv="VVKAJ_Items.csv", user.name="UserName", recall.no="RecallNo", out.fn)
AddSampleIDtoItems(input.csv="VVKAJ_Items.csv", user.name="UserName", recall.no="RecallNo",
)_
# --------------
# A function to add SampleID to the items.csv.
AddSampleIDtoItems <- function(input.csv, user.name="UserName", recall.no="RecallNo", out.fn){
# Load your raw items data.
items_csv_raw <- read.csv(input.csv, sep = ",", header=T)
# Create a combination of user and day for merging.
# items_csv_raw$userxday <- paste(items_csv_raw[, user.name], items_csv_raw[, recall.no], sep="_")
write.table(out.fn, items_csv_raw, sep="\t", row.names=F, quote=F)
}
AddSampleIDtoItems(input.csv="VVKAJ_Items.csv", user.name="UserName", recall.no="RecallNo",
out.fn="VVKAJ_Items_csv_IDxxxxxx.txt")
# Load your raw items data.
items_raw <- read.csv("VVKAJ_Items.csv", sep = ",", header=T)
# --------------
# A function to add SampleID to the items.csv.
AddSampleIDtoItems <- function(input.csv, user.name="UserName", recall.no="RecallNo", out.fn){
# Load your raw items data.
items_csv_raw <- read.csv(input.csv, sep = ",", header=T)
# Create a combination of user and day for merging.
# items_csv_raw$userxday <- paste(items_csv_raw[, user.name], items_csv_raw[, recall.no], sep="_")
write.table(items_csv_raw, out.fn, sep="\t", row.names=F, quote=F)
}
AddSampleIDtoItems(input.csv="VVKAJ_Items.csv", user.name="UserName", recall.no="RecallNo",
out.fn="VVKAJ_Items_csv_IDxxxxxx.txt")
# --------------
# A function to add SampleID to the items.csv.
AddSampleIDtoItems <- function(input.csv, user.name="UserName", recall.no="RecallNo", out.fn){
# Load your raw items data.
items_csv_raw <- read.csv(input.csv, sep = ",", header=T)
# Create a combination of user and day for merging.
items_csv_raw$userxday <- paste(items_csv_raw[, user.name], items_csv_raw[, recall.no], sep="_")
write.table(items_csv_raw, out.fn, sep="\t", row.names=F, quote=F)
}
AddSampleIDtoItems(input.csv="VVKAJ_Items.csv", user.name="UserName", recall.no="RecallNo",
out.fn="VVKAJ_Items_csv_IDxxxxxx.txt")
# --------------
# A function to add SampleID to the items.csv.
AddSampleIDtoItems <- function(input.csv, user.name="UserName", recall.no="RecallNo", out.fn){
# Load your raw items data.
items_csv_raw <- read.csv(input.csv, sep = ",", header=T)
# Create a combination of user and day for merging.
items_csv_raw$userxday <- paste(items_csv_raw[, user.name], items_csv_raw[, recall.no], sep="_")
specified_username <- user.name
specified_recalno <- recall.no
print(specified_username)
print(specified_recallno)
# Create a dataframe that has UserName and RecallNo (Day).
user_recallno <<- items_csv_raw[, c(specified_username, specified_recalno, "userxday")]
print(head(user_recallno))
# Remove duplicates
# sampleIDtable <- user_recallno[!duplicated(user_recallno), ]
# head(sampleIDtable)
# dim(sampleIDtable)
# Save it as a .txt file for further processing.
write.table(items_csv_raw, out.fn, sep="\t", row.names=F, quote=F)
}
AddSampleIDtoItems(input.csv="VVKAJ_Items.csv", user.name="UserName", recall.no="RecallNo",
out.fn="VVKAJ_Items_csv_IDxxxxxx.txt")
# --------------
# A function to add SampleID to the items.csv.
AddSampleIDtoItems <- function(input.csv, user.name="UserName", recall.no="RecallNo", out.fn){
# Load your raw items data.
items_csv_raw <- read.csv(input.csv, sep = ",", header=T)
# Create a combination of user and day for merging.
items_csv_raw$userxday <- paste(items_csv_raw[, user.name], items_csv_raw[, recall.no], sep="_")
specified_username <- user.name
specified_recallno <- recall.no
print(specified_username)
print(specified_recallno)
# Create a dataframe that has UserName and RecallNo (Day).
user_recallno <<- items_csv_raw[, c(specified_username, specified_recalno, "userxday")]
print(head(user_recallno))
# Remove duplicates
# sampleIDtable <- user_recallno[!duplicated(user_recallno), ]
# head(sampleIDtable)
# dim(sampleIDtable)
# Save it as a .txt file for further processing.
write.table(items_csv_raw, out.fn, sep="\t", row.names=F, quote=F)
}
AddSampleIDtoItems(input.csv="VVKAJ_Items.csv", user.name="UserName", recall.no="RecallNo",
out.fn="VVKAJ_Items_csv_IDxxxxxx.txt")
# --------------
# A function to add SampleID to the items.csv.
AddSampleIDtoItems <- function(input.csv, user.name="UserName", recall.no="RecallNo", out.fn){
# Load your raw items data.
items_csv_raw <- read.csv(input.csv, sep = ",", header=T)
# Create a combination of user and day for merging.
items_csv_raw$userxday <- paste(items_csv_raw[, user.name], items_csv_raw[, recall.no], sep="_")
specified_username <- user.name
specified_recallno <- recall.no
print(specified_username)
print(specified_recallno)
# Create a dataframe that has UserName and RecallNo (Day).
user_recallno <<- items_csv_raw[, c(specified_username, specified_recallno, "userxday")]
print(head(user_recallno))
# Remove duplicates
# sampleIDtable <- user_recallno[!duplicated(user_recallno), ]
# head(sampleIDtable)
# dim(sampleIDtable)
# Save it as a .txt file for further processing.
write.table(items_csv_raw, out.fn, sep="\t", row.names=F, quote=F)
}
AddSampleIDtoItems(input.csv="VVKAJ_Items.csv", user.name="UserName", recall.no="RecallNo",
out.fn="VVKAJ_Items_csv_IDxxxxxx.txt")
# --------------
# A function to add SampleID to the items.csv.
AddSampleIDtoItems <- function(input.csv, user.name="UserName", recall.no="RecallNo",
prefix, out.fn){
# Load your raw items data.
items_csv_raw <- read.csv(input.csv, sep = ",", header=T)
# Create a combination of user and day for merging.
items_csv_raw$userxday <- paste(items_csv_raw[, user.name], items_csv_raw[, recall.no], sep="_")
specified_username <- user.name
specified_recallno <- recall.no
# Create a dataframe that has UserName and RecallNo (Day).
user_recallno <- items_csv_raw[, c(specified_username, specified_recallno, "userxday")]
print(head(user_recallno))
# Change the colnames for easier processing.
colnames(user_recallno)[1:2] <- c("UserName", "RecallNo")
# Remove duplicates
sampleIDtable <- user_recallno[!duplicated(user_recallno), ]
# Sort by Username then day.
sampleIDtable_s <- sampleIDtable[order(sampleIDtable$UserName, sampleIDtable$RecallNo) , ]
# Create a SampleID column that shows the combination of user x day.
# sampleIDtable$SampleID <- paste(sampleIDtable$UserName, sampleIDtable$RecallNo, sep = ".")
sampleIDtable_s$SampleID <- paste(prefix,
formatC(seq(from=1, to=nrow(sampleIDtable)), width=5, flag="0" ),
sep="")
print(head(sampleIDtable_s, 12))
# Save it as a .txt file for further processing.
write.table(items_csv_raw, out.fn, sep="\t", row.names=F, quote=F)
}
AddSampleIDtoItems(input.csv="VVKAJ_Items.csv", user.name="UserName", recall.no="RecallNo",
out.fn="VVKAJ_Items_csv_IDxxxxxx.txt")
AddSampleIDtoItems(input.csv="VVKAJ_Items.csv", user.name="UserName", recall.no="RecallNo",
prefix="vvkaj.", out.fn="VVKAJ_Items_csv_IDxxxxxx.txt")
# --------------
# A function to add SampleID to the items.csv.
AddSampleIDtoItems <- function(input.csv, user.name="UserName", recall.no="RecallNo",
prefix, out.fn){
# Load your raw items data.
items_csv_raw <- read.csv(input.csv, sep = ",", header=T)
# Create a combination of user and day for merging.
items_csv_raw$userxday <- paste(items_csv_raw[, user.name], items_csv_raw[, recall.no], sep="_")
specified_username <- user.name
specified_recallno <- recall.no
# Create a dataframe that has UserName and RecallNo (Day).
user_recallno <- items_csv_raw[, c(specified_username, specified_recallno, "userxday")]
# print(head(user_recallno))
# Change the colnames for easier processing.
colnames(user_recallno)[1:2] <- c("UserName", "RecallNo")
# Remove duplicates
sampleIDtable <- user_recallno[!duplicated(user_recallno), ]
# Sort by Username then day.
sampleIDtable_s <- sampleIDtable[order(sampleIDtable$UserName, sampleIDtable$RecallNo) , ]
# Create a SampleID column that shows the combination of user x day.
# sampleIDtable$SampleID <- paste(sampleIDtable$UserName, sampleIDtable$RecallNo, sep = ".")
sampleIDtable_s$SampleID <- paste(prefix,
formatC(seq(from=1, to=nrow(sampleIDtable)), width=5, flag="0" ),
sep="")
# print(head(sampleIDtable_s, 12))
# Add SampleID to Items data.
items_raw_ID_1 <- merge(x=items_csv_raw, y=sampleIDtable_s[, c("SampleID", "userxday")],
all.x=T, by="userxday" )
# Remove the "userxday" column (which is in the first column) as not necessary.
items_raw_ID_2 <- items_raw_ID1[, 2: ncol(items_raw_ID_1)]
# Bring SampleID (currently in the last column) to the first column.
items_raw_ID_3 <- items_raw_ID_2[, c(ncol(items_raw_ID_2), 1: (ncol(items_raw_ID_2)-1) ) ]
print(head(items_raw_ID_3, 1))
# Save it as a .txt file for further processing.
write.table(items_raw_ID_3, out.fn, sep="\t", row.names=F, quote=F)
}
AddSampleIDtoItems(input.csv="VVKAJ_Items.csv", user.name="UserName", recall.no="RecallNo",
prefix="vvkaj.", out.fn="VVKAJ_Items_csv_IDxxxxxx.txt")
# --------------
# A function to add SampleID to the items.csv.
AddSampleIDtoItems <- function(input.csv, user.name="UserName", recall.no="RecallNo",
prefix, out.fn){
# Load your raw items data.
items_csv_raw <- read.csv(input.csv, sep = ",", header=T)
# Create a combination of user and day for merging.
items_csv_raw$userxday <- paste(items_csv_raw[, user.name], items_csv_raw[, recall.no], sep="_")
specified_username <- user.name
specified_recallno <- recall.no
# Create a dataframe that has UserName and RecallNo (Day).
user_recallno <- items_csv_raw[, c(specified_username, specified_recallno, "userxday")]
# print(head(user_recallno))
# Change the colnames for easier processing.
colnames(user_recallno)[1:2] <- c("UserName", "RecallNo")
# Remove duplicates
sampleIDtable <- user_recallno[!duplicated(user_recallno), ]
# Sort by Username then day.
sampleIDtable_s <- sampleIDtable[order(sampleIDtable$UserName, sampleIDtable$RecallNo) , ]
# Create a SampleID column that shows the combination of user x day.
# sampleIDtable$SampleID <- paste(sampleIDtable$UserName, sampleIDtable$RecallNo, sep = ".")
sampleIDtable_s$SampleID <- paste(prefix,
formatC(seq(from=1, to=nrow(sampleIDtable)), width=5, flag="0" ),
sep="")
# print(head(sampleIDtable_s, 12))
# Add SampleID to Items data.
items_raw_ID_1 <- merge(x=items_csv_raw, y=sampleIDtable_s[, c("SampleID", "userxday")],
all.x=T, by="userxday" )
# Remove the "userxday" column (which is in the first column) as not necessary.
items_raw_ID_2 <- items_raw_ID_1[, 2: ncol(items_raw_ID_1)]
# Bring SampleID (currently in the last column) to the first column.
items_raw_ID_3 <- items_raw_ID_2[, c(ncol(items_raw_ID_2), 1: (ncol(items_raw_ID_2)-1) ) ]
print(head(items_raw_ID_3, 1))
# Save it as a .txt file for further processing.
write.table(items_raw_ID_3, out.fn, sep="\t", row.names=F, quote=F)
}
AddSampleIDtoItems(input.csv="VVKAJ_Items.csv", user.name="UserName", recall.no="RecallNo",
prefix="vvkaj.", out.fn="VVKAJ_Items_csv_IDxxxxxx.txt")
# Load in your raw csv items data, add SampleID with a desired prefix, and save it
# as a txt file for further processing.
AddSampleIDtoItems(input.csv="VVKAJ_Items.csv", user.name="UserName", recall.no="RecallNo",
prefix="vvkaj.", out.fn="VVKAJ_Items.txt")
# Special characters such as "'", ",", "%" may interfere correct data loading; thus,
# we replace them with an underscore "_".  Takes only .txt files as input.
# Specify column(s) to be processed in the "columns" argument.
format.file(filename = "VVKAJ_Items.txt",
columns  = "Food_Description",
outfn    = "VVKAJ_Items_f.txt")  # _f stands for "formatted".
# Load the formatted Items file.
items_f <- read.table("VVKAJ_Items_f.txt", sep="\t", header=T)
# All special characters in items_f should have been replaced with an underscore.
head(items_f)
# Ensure your items file has the expected dimensions (number of rows x number of columns,
# shown as number of obs. and number of variables) in the environment window of R Studio, or
# you can also check the dimension of items_f by using dim() function.
dim(items_f)
# ========================================================================================
# <Optional> Use individuals_to_remove.txt to filter out users marked as Remove = yes.
# ========================================================================================
# Load your metadata that has information about which UserName(s) to remove.
ind_to_rm <- read.table("individuals_to_remove.txt", sep="\t", header=T)
ind_to_rm
# Show which has "yes" in the "Remove" column, and remove them.
subset(ind_to_rm, Remove == "yes")
# Remove the specified individuals.
# The output will be saved as a text file with the specified name.
# This assumes the usernames are in UserName column, and will print which user(s) will be removed.
RemoveRows(data=items_f,  metadata.file= ind_to_rm, output.name= "VVKAJ_Items_f_s.txt")
# Load the output for further processing.
items_f_s <- read.table("VVKAJ_Items_f_s.txt", header=T, sep="\t")
# Show unique usernames in items_f_s and confirm "VVKAJ101" has been removed.
unique(items_f_s$UserName)
# Load ind_metadata.txt.
ind_metadata <- read.table("ind_metadata.txt", sep="\t", header=T)
# Look at what the metadata has.
head(ind_metadata)
# Add this metadata of each participant in totals or items.
# 'NA' will be inserted to UserNames which are not in ind_metadata.
items_f_s_m <- merge(x=items_f_s, y=ind_metadata, by="UserName", all.x=T)
# Save the merged dataframe as a .txt file.
write.table(items_f_s_m, "VVKAJ_Items_f_s_m.txt", sep="\t", row.names=F, quote=F)
# Use one of the input files saved above as an input for calculating totals for.
# Specify which columns have usernames and Recall.No., which is the number of recorded days.
GenerateTotals(inputfn = "VVKAJ_Items_f_s_m.txt",
User.Name = 'UserName',
Recall.No = 'RecallNo',
outfn = "VVKAJ_Tot_2.txt")
items_ID459 <- read.table("VVKAJ_Items_ID.txt", sep="\t", header=T)
items_446  <- read.table("VVKAJ_Items.txt", sep="\t", header=T)
items_446  <- read.delim("VVKAJ_Items.txt", sep="\t", header=T)
dim(items_ID459)
dim(items_446)
items_ID459 <- read.table("VVKAJ_Items_ID.txt", sep="\t", header=T)
items_446  <- read.table("VVKAJ_Items.txt", sep="\t", header=T)
# Load your raw items data and save it as a .txt file.
items_raw <-  read.csv("VVKAJ_Items.csv", sep = ",", header=T)
write.table(items_raw, "VVKAJ_Items.txt", sep="\t", row.names=F)
# Special characters such as "'", ",", "%" may interfere correct data loading; thus,
# we replace them with an underscore "_".  Takes only .txt files as input.
# Specify column(s) to be processed in the "columns" argument.
format.file(filename = "VVKAJ_Items.txt",
columns  = "Food_Description",
outfn    = "VVKAJ_Items_f.txt")  # _f stands for "formatted".
View(AddSampleIDtoItems)
AddSampleIDtoItems <- function(input.fn, user.name="UserName", recall.no="RecallNo",
prefix, out.fn){
# Load your raw items data.
items_raw <- read.csv(input.fn, sep = ",", header=T)
# Create a combination of user and day for merging.
items_raw$userxday <- paste(items_raw[, user.name], items_raw[, recall.no], sep="_")
specified_username <- user.name
specified_recallno <- recall.no
# Create a dataframe that has UserName and RecallNo (Day).
user_recallno <- items_raw[, c(specified_username, specified_recallno, "userxday")]
# print(head(user_recallno))
# Change the colnames for easier processing.
colnames(user_recallno)[1:2] <- c("UserName", "RecallNo")
# Remove duplicates
sampleIDtable <- user_recallno[!duplicated(user_recallno), ]
# Sort by Username then day.
sampleIDtable_s <- sampleIDtable[order(sampleIDtable$UserName, sampleIDtable$RecallNo) , ]
# Create a SampleID column that shows the combination of user x day.
sampleIDtable_s$SampleID <- paste(prefix,
formatC(seq(from=1, to=nrow(sampleIDtable)), width=5, flag="0" ),
sep="")
# Add SampleID to Items data.
items_raw_ID_1 <- merge(x=items_raw, y=sampleIDtable_s[, c("SampleID", "userxday")],
all.x=T, by="userxday" )
# Remove the "userxday" column (which is in the first column) as not necessary.
items_raw_ID_2 <- items_raw_ID_1[, 2: ncol(items_raw_ID_1)]
# Bring SampleID (currently in the last column) to the first column.
items_raw_ID_3 <- items_raw_ID_2[, c(ncol(items_raw_ID_2), 1: (ncol(items_raw_ID_2)-1) ) ]
print(head(items_raw_ID_3, 2))
# Save it as a .txt file for further processing.
write.table(items_raw_ID_3, out.fn, sep="\t", row.names=F, quote=F)
}
# Add SampleID with a desired prefix, and save it as a txt file.
AddSampleIDtoItems(input.fn="VVKAJ_Items_f.txt", user.name="UserName", recall.no="RecallNo",
prefix="vvkaj.", out.fn="VVKAJ_Items_f_id.txt")
AddSampleIDtoItems <- function(input.fn, user.name="UserName", recall.no="RecallNo",
prefix, out.fn){
# Load your raw items data.
items_raw <- read.delim(input.fn, sep = ",", header=T)
# Create a combination of user and day for merging.
items_raw$userxday <- paste(items_raw[, user.name], items_raw[, recall.no], sep="_")
specified_username <- user.name
specified_recallno <- recall.no
# Create a dataframe that has UserName and RecallNo (Day).
user_recallno <- items_raw[, c(specified_username, specified_recallno, "userxday")]
# print(head(user_recallno))
# Change the colnames for easier processing.
colnames(user_recallno)[1:2] <- c("UserName", "RecallNo")
# Remove duplicates
sampleIDtable <- user_recallno[!duplicated(user_recallno), ]
# Sort by Username then day.
sampleIDtable_s <- sampleIDtable[order(sampleIDtable$UserName, sampleIDtable$RecallNo) , ]
# Create a SampleID column that shows the combination of user x day.
sampleIDtable_s$SampleID <- paste(prefix,
formatC(seq(from=1, to=nrow(sampleIDtable)), width=5, flag="0" ),
sep="")
# Add SampleID to Items data.
items_raw_ID_1 <- merge(x=items_raw, y=sampleIDtable_s[, c("SampleID", "userxday")],
all.x=T, by="userxday" )
# Remove the "userxday" column (which is in the first column) as not necessary.
items_raw_ID_2 <- items_raw_ID_1[, 2: ncol(items_raw_ID_1)]
# Bring SampleID (currently in the last column) to the first column.
items_raw_ID_3 <- items_raw_ID_2[, c(ncol(items_raw_ID_2), 1: (ncol(items_raw_ID_2)-1) ) ]
print(head(items_raw_ID_3, 2))
# Save it as a .txt file for further processing.
write.table(items_raw_ID_3, out.fn, sep="\t", row.names=F, quote=F)
}
AddSampleIDtoItems <- function(input.fn, user.name="UserName", recall.no="RecallNo",
prefix, out.fn){
# Load your raw items data.
items_raw <- read.table(input.fn, sep = ",", header=T)
# Create a combination of user and day for merging.
items_raw$userxday <- paste(items_raw[, user.name], items_raw[, recall.no], sep="_")
specified_username <- user.name
specified_recallno <- recall.no
# Create a dataframe that has UserName and RecallNo (Day).
user_recallno <- items_raw[, c(specified_username, specified_recallno, "userxday")]
# print(head(user_recallno))
# Change the colnames for easier processing.
colnames(user_recallno)[1:2] <- c("UserName", "RecallNo")
# Remove duplicates
sampleIDtable <- user_recallno[!duplicated(user_recallno), ]
# Sort by Username then day.
sampleIDtable_s <- sampleIDtable[order(sampleIDtable$UserName, sampleIDtable$RecallNo) , ]
# Create a SampleID column that shows the combination of user x day.
sampleIDtable_s$SampleID <- paste(prefix,
formatC(seq(from=1, to=nrow(sampleIDtable)), width=5, flag="0" ),
sep="")
# Add SampleID to Items data.
items_raw_ID_1 <- merge(x=items_raw, y=sampleIDtable_s[, c("SampleID", "userxday")],
all.x=T, by="userxday" )
# Remove the "userxday" column (which is in the first column) as not necessary.
items_raw_ID_2 <- items_raw_ID_1[, 2: ncol(items_raw_ID_1)]
# Bring SampleID (currently in the last column) to the first column.
items_raw_ID_3 <- items_raw_ID_2[, c(ncol(items_raw_ID_2), 1: (ncol(items_raw_ID_2)-1) ) ]
print(head(items_raw_ID_3, 2))
# Save it as a .txt file for further processing.
write.table(items_raw_ID_3, out.fn, sep="\t", row.names=F, quote=F)
}
# Special characters such as "'", ",", "%" may interfere correct data loading; thus,
# we replace them with an underscore "_".  Takes only .txt files as input.
# Specify column(s) to be processed in the "columns" argument.
format.file(filename = "VVKAJ_Items.txt",
columns  = "Food_Description",
outfn    = "VVKAJ_Items_f.txt")  # _f stands for "formatted".
# Add SampleID with a desired prefix, and save it as a txt file.
AddSampleIDtoItems(input.fn="VVKAJ_Items_f.txt", user.name="UserName", recall.no="RecallNo",
prefix="vvkaj.", out.fn="VVKAJ_Items_f_id.txt")
AddSampleIDtoItems <- function(input.fn, user.name="UserName", recall.no="RecallNo",
prefix, out.fn){
# Load your raw items data.
items_raw <- read.table(input.fn, sep = "\t", header=T)
# Create a combination of user and day for merging.
items_raw$userxday <- paste(items_raw[, user.name], items_raw[, recall.no], sep="_")
specified_username <- user.name
specified_recallno <- recall.no
# Create a dataframe that has UserName and RecallNo (Day).
user_recallno <- items_raw[, c(specified_username, specified_recallno, "userxday")]
# print(head(user_recallno))
# Change the colnames for easier processing.
colnames(user_recallno)[1:2] <- c("UserName", "RecallNo")
# Remove duplicates
sampleIDtable <- user_recallno[!duplicated(user_recallno), ]
# Sort by Username then day.
sampleIDtable_s <- sampleIDtable[order(sampleIDtable$UserName, sampleIDtable$RecallNo) , ]
# Create a SampleID column that shows the combination of user x day.
sampleIDtable_s$SampleID <- paste(prefix,
formatC(seq(from=1, to=nrow(sampleIDtable)), width=5, flag="0" ),
sep="")
# Add SampleID to Items data.
items_raw_ID_1 <- merge(x=items_raw, y=sampleIDtable_s[, c("SampleID", "userxday")],
all.x=T, by="userxday" )
# Remove the "userxday" column (which is in the first column) as not necessary.
items_raw_ID_2 <- items_raw_ID_1[, 2: ncol(items_raw_ID_1)]
# Bring SampleID (currently in the last column) to the first column.
items_raw_ID_3 <- items_raw_ID_2[, c(ncol(items_raw_ID_2), 1: (ncol(items_raw_ID_2)-1) ) ]
print(head(items_raw_ID_3, 2))
# Save it as a .txt file for further processing.
write.table(items_raw_ID_3, out.fn, sep="\t", row.names=F, quote=F)
}
# Add SampleID with a desired prefix, and save it as a txt file.
AddSampleIDtoItems(input.fn="VVKAJ_Items_f.txt", user.name="UserName", recall.no="RecallNo",
prefix="vvkaj.", out.fn="VVKAJ_Items_f_id.txt")
# Load the formatted Items file.
items_f <- read.table("VVKAJ_Items_f_id.txt", sep="\t", header=T)
# All special characters in items_f should have been replaced with an underscore.
head(items_f_id)
# Load the formatted Items file.
items_f_id <- read.table("VVKAJ_Items_f_id.txt", sep="\t", header=T)
# All special characters in items_f should have been replaced with an underscore.
head(items_f_id)
# Ensure your items file has the expected dimensions (number of rows x number of columns,
# shown as number of obs. and number of variables) in the environment window of R Studio, or
# you can also check the dimension of items_f by using dim() function.
dim(items_f_id)
# ========================================================================================
# <Optional> Use individuals_to_remove.txt to filter out users marked as Remove = yes.
# ========================================================================================
# Load your metadata that has information about which UserName(s) to remove.
ind_to_rm <- read.table("individuals_to_remove.txt", sep="\t", header=T)
ind_to_rm
# Show which has "yes" in the "Remove" column, and remove them.
subset(ind_to_rm, Remove == "yes")
items_f
# Remove the specified individuals.
# The output will be saved as a text file with the specified name.
# This assumes the usernames are in UserName column, and will print which user(s) will be removed.
RemoveRows(data=items_f_id, metadata.file= ind_to_rm, output.name= "VVKAJ_Items_f_id_s.txt")
# Load the output for further processing.
items_f_id_s <- read.table("VVKAJ_Items_f_id_s.txt", header=T, sep="\t")
# Show unique usernames in items_f_s and confirm "VVKAJ101" has been removed.
unique(items_f_id_s$UserName)
# Load ind_metadata.txt.
ind_metadata <- read.table("ind_metadata.txt", sep="\t", header=T)
# Look at what the metadata has.
head(ind_metadata)
# Add this metadata of each participant in totals or items.
# 'NA' will be inserted to UserNames which are not in ind_metadata.
items_f_id_s_m <- merge(x=items_f_id_s, y=ind_metadata, by="UserName", all.x=T)
# Check that the items data and metadata are merged.
head(items_f_id_s_m)
# Save the merged dataframe as a .txt file.
write.table(items_f_id_s_m, "VVKAJ_Items_f_id_s_m.txt", sep="\t", row.names=F, quote=F)
# Use one of the input files saved above as an input for calculating totals for.
# Specify which columns have usernames and Recall.No., which is the number of recorded days.
GenerateTotals(inputfn = "VVKAJ_Items_f_id_s_m.txt",
User.Name = 'UserName',
Recall.No = 'RecallNo',
outfn = "VVKAJ_Tot.txt")
# Load the total file generated above.
new_totals <- read.table("VVKAJ_Tot.txt", header=T, sep="\t")
# The number of rows should be {No. of users x No. days}.
# For the example data, 15 users x 3 days = 45 rows (observations).
nrow(new_totals)
# View the new_total
head(new_totals)
# Load ind_metadata.txt if you have not done so.
ind_metadata <- read.table("ind_metadata.txt", sep="\t", header=T)
# Add this metadata of each participant to totals.
# 'NA' will be inserted to UserNames which are not in ind_metadata. --> Checked. Really works.
new_totals_m <- merge(x=new_totals, y=ind_metadata, by="UserName", all.x=T)
# Check that the items data and metadata are merged.
head(new_totals_m)
# Save the merged dataframe as a .txt file.
write.table(new_totals_m, "VVKAJ_Tot_m.txt", sep="\t", row.names=F, quote=F)
