# --------------------------------------------------------------------------------------------------------------
# Define ggplot1 themes
library(ggplot2)
# Theme black and white, with the base font size 14: change if necessary.
theme_set(theme_bw(base_size = 14))
# No gridlines inside charts
no_grid <- theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# Insert some space between axes and axes labels.
space_axes <- theme(axis.title.x = element_text(margin=margin(t = 8, r = 0, b = 0, l = 0) ),
axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) )
# Rotate the X axis labels 45 degrees for visibility.
rotate_X_labels <- theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1) )
# Load the %kcal values
CPT_kcal <- read.table("VVKAJ_Tot_m_QCed_CPT_kcal.txt", sep="\t", header=T)
CPT_kcal
# --------------------------------------------------------------------------------------------------------------
# Plot a barchart without SD.
ggplot(CPT_kcal, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
# change colors and labels of legend. Ensure the factor order is correct.
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
# Specify the y axis breaks.
no_grid + space_axes +
# Specify the font size and angle of the x axis label.
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
StackedwoSD <- function(data){
ggplot(data, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7)
}
StackedwoSD(data=CPT_kcal)
StackedwoSD <- function(data){
ggplot(data, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7)
# change colors and labels of legend. Ensure the factor order is correct.
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
# Specify the font size and angle of the x axis label.
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
}
StackedwoSD(data=CPT_kcal)
StackedwoSD <- function(data){
ggplot(data, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7)
# change colors and labels of legend. Ensure the factor order is correct.
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients")
# Specify the font size and angle of the x axis label.
# theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
}
StackedwoSD(data=CPT_kcal)
StackedwoSD <- function(data){
ggplot(data, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
# change colors and labels of legend. Ensure the factor order is correct.
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
# Specify the font size and angle of the x axis label.
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
}
StackedwoSD(data=CPT_kcal)
StackedwoSD(data=CPT_kcal) + space_axes
StackedwoSD(data=CPT_kcal) + no_grid + space_axes
StackedwoSD(data=CPT_kcal) + no_grid
StackedwoSD <- function(data){
ggplot(data, aes(x = UserName, y = mean, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
# change colors and labels of legend. Ensure the factor order is correct.
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
# Specify the font size and angle of the x axis label.
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1)) + no_grid
}
StackedwoSD(data=CPT_kcal) + theme(axis.text.x=element_text(size=5))
StackedwoSD(data=CPT_kcal) + theme(axis.text.x=element_text(size=10))
# Require ggplot2
require(ggplot2)
# No gridlines inside charts
no_grid <- theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# Insert some space between axes and axes labels.
space_axes <- theme(axis.title.x = element_text(margin=margin(t = 8, r = 0, b = 0, l = 0) ),
axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) )
# --------------------------------------------------------------------------------------------------------------
# Plot a barchart without SD.
stacked_wo_SD <- StackedwoSD(data=CPT_kcal) + theme(axis.text.x=element_text(size=11))
stacked_wo_SD
# --------------------------------------------------------------------------------------------------------------
# Plot "dodge"-type of barchart (3 bars per user, NOT STACKED).
ggplot(CPT_kcal, aes(x = factor(UserName), y = mean, fill = macronutrient, colour = macronutrient)) +
geom_bar(stat = "identity", position = "dodge", color="black")  +
geom_errorbar(aes(ymin= mean, ymax= mean+sd), position = position_dodge(0.9), width = 0.25,
color="black") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
head(CPT_kcal)
DodgedBarcharts  <- function(data){
ggplot(data, aes(x = factor(UserName), y = mean, fill = macronutrient, colour = macronutrient)) +
geom_bar(stat = "identity", position = "dodge", color="black")  +
geom_errorbar(aes(ymin= mean, ymax= mean + sd), position = position_dodge(0.9), width = 0.25,
color="black") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
}
DodgedBarchart  <- function(data){
ggplot(data, aes(x = factor(UserName), y = mean, fill = macronutrient, colour = macronutrient)) +
geom_bar(stat = "identity", position = "dodge", color="black")  +
geom_errorbar(aes(ymin= mean, ymax= mean + sd), position = position_dodge(0.9), width = 0.25,
color="black") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
}
# Change the font size if necessary.
dodgedtypebarchart <- DodgedBarchart(data=CPT_kcal) +
theme(axis.text.x=element_text(size=11))
dodgedtypebarchart
# --------------------------------------------------------------------------------------------------------------
# Plot a barchart without SD.
# Change the font size if necessary.
stacked_wo_SD <- StackedwoSD(data=CPT_kcal) + theme(axis.text.x=element_text(size=11))
stacked_wo_SD
# --------------------------------------------------------------------------------------------------------------
# Plot the "dodge"-type of barchart (3 bars per user, NOT STACKED).
# Change the font size if necessary.
dodgedtypebarchart <- DodgedBarchart(data=CPT_kcal) + theme(axis.text.x=element_text(size=11))
dodgedtypebarchart
# Create a vector that contains all the users (individuals).
individuals <- unique(CPT_kcal$UserName)
# Generate a dataframe to save sd data.
CPT_kcal_forstacked <- data.frame(matrix(NA, nrow=length(individuals)*3, ncol=7))
# Specify its column names.
colnames(CPT_kcal_forstacked) <- c("UserName", "macronutrient", "n", "mean", "sd", "sd_base", "sd_stacked")
# Calculate sd_base and sd_forstacked for stacked barchart.
# Note that this function assumes all users (individuals) have CARB, PROT, and TFAT values.
CalcStackedSD(input.df = CPT_kcal, out.fn = "CPT_kcal_forstacked.txt")
# Load the saved file that has SD for stacked barchart.
CPT_kcal_forstacked_read <- read.table("CPT_kcal_forstacked.txt", sep="\t", header=T)
CPT_kcal_forstacked_read
CPT_kcal_forstacked_read_1 <- CPT_kcal_forstacked_read[1:15, ]
CPT_kcal_forstacked_read_1
# Stacked barchart with SD as error bars.
ggplot(CPT_kcal_forstacked_read, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black", width = 0.7)  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
CalcStackedSD <- function(input.df, out.fn){
# Generate a dataframe to save sd data.
CPT_kcal_forstacked <<- data.frame(matrix(NA, nrow=length(individuals)*3, ncol=7))
# Specify its column names.
colnames(CPT_kcal_forstacked) <- c("UserName", "macronutrient", "n", "mean", "sd", "sd_base", "sd_stacked")
for(i in 1:length(individuals)){
if(i == 1){
ith_user <- subset(input.df, UserName == individuals[i])
# CARBmeanval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "mean"]
PROTmeanval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "mean"]
TFATmeanval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "mean"]
CARBsdval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "sd"]
PROTsdval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "sd"]
TFATsdval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "sd"]
# sd values for stacked barchart.
ith_user$sd_base <- c(TFATmeanval+PROTmeanval,  # carb, on top of the stacked barchart.
TFATmeanval,              # prot, in the middle.
0)                        # tfat, on the bottom.
ith_user$sd_stacked <-  c(CARBsdval+PROTmeanval+TFATmeanval,    # carb, on top of the stacked barchart.
PROTsdval+TFATmeanval,                # prot, in the middle.
TFATsdval)                            # tfat, on the bottom.
# for i=1, make the first result dataframe.
CPT_kcal_forstacked[c(i,i+1,i+2), ] <- ith_user
}else{
ith_user <- subset(input.df, UserName == individuals[i])
# CARBmeanval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "mean"]
PROTmeanval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "mean"]
TFATmeanval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "mean"]
CARBsdval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "sd"]
PROTsdval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "sd"]
TFATsdval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "sd"]
# sd values for stacked barchart.
ith_user$sd_base <- c(TFATmeanval+PROTmeanval,  # carb, on top of the stacked barchart.
TFATmeanval,              # prot, in the middle.
0)                        # tfat, on the bottom.
ith_user$sd_stacked <-  c(CARBsdval+PROTmeanval+TFATmeanval,    # carb, on top of the stacked barchart.
PROTsdval+TFATmeanval,                # prot, in the middle.
TFATsdval)                            # tfat, on the bottom.
# need another value k in order to specify the correct row.
k = i-2
# for i = 2,3,4,..., combine rows with the previously made CPT_kcal_forstacked.
CPT_kcal_forstacked[c(i+i+k, i+i+k+1, i+i+k+2), ] <- ith_user
}
}
# Save the resultant file as .txt file.
write.table(x=CPT_kcal_forstacked, file = out.fn, sep="\t", row.names=F, quote=F)
}
CPT_kcal_forstacked
View(CPT_kcal_forstacked_read)
View(CPT_kcal_forstacked_read_1)
rm(CPT_kcal_forstacked_read_1)
# Create a vector that contains all the users (individuals).
individuals <- unique(CPT_kcal$UserName)
# Calculate sd_base and sd_forstacked for stacked barchart.
# Note that this function assumes all users (individuals) have CARB, PROT, and TFAT values.
CalcStackedSD(input.df = CPT_kcal, out.fn = "CPT_kcal_forstacked_2.txt")
# Load the saved file that has SD for stacked barchart.
CPT_kcal_forstacked_read <- read.table("CPT_kcal_forstacked.txt", sep="\t", header=T)
ggplot(CPT_kcal_forstacked_read, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
ggplot(CPT_kcal_forstacked_read, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
ggplot(CPT_kcal_forstacked_read, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black", width = 0.7)  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
# scale_fill_manual(values = distinct100colors,
# labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
ggplot(CPT_kcal_forstacked_read, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black", width = 0.7)  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
# scale_fill_manual(values = distinct100colors,
# labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
ggplot(CPT_kcal_forstacked_read, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black", width = 0.7)  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
# Stacked barchart with SD as error bars.
StackedWithSD <- function(data){
ggplot(data, aes(x = UserName, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black", width = 0.7)  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
}
StackedWithSD(data=CPT_kcal_forstacked_read)
stacked_with_SD <- StackedWithSD(data=CPT_kcal_forstacked_read)
stacked_with_SD + scale_fill_viridis_b()
stacked_with_SD + scale_fill_viridis_c()
stacked_with_SD + scale_fill_viridis_d()
# Change the colors if desired.
stacked_with_SD + theme(axis.text.x=element_text(size=11))
source("../lib/percent_kcal.R")
source("../../lib/percent_kcal.R")
# Call color palette.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# Load the totals data.
# totals <- read.table("Totals_to_use.txt",  sep = "\t", header = T)
totals <- read.table("VVKAJ_Tot_m_QCed.txt",  sep = "\t", header = T)
# --------------------------------------------------------------------------------------------------------------
# Calculate the mean and SD of CARB, PROT, and TFAT.
CPTgramsPerUser(inputfn= totals, user.name = "UserName", recall.no = "RecallNo",
outfn='VVKAJ_Tot_m_QCed_CPT_g.txt')
# Import source code to run the analyses to follow.
source("../../lib/specify_dir_and_check_col.R")
source("../../lib/percent_kcal.R")
# Call color palette.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# Load example totals data ===============================================================
# Specify the directory where the data is.
# SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/")
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Import source code to run the analyses to follow.
source("lib/specify_dir_and_check_col.R")
source("lib/percent_kcal.R")
# Call color palette.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# Load example totals data ===============================================================
# Specify the directory where the data is.
# SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/")
# Load the totals data.
# totals <- read.table("Totals_to_use.txt",  sep = "\t", header = T)
totals <- read.table("VVKAJ_Tot_m_QCed.txt",  sep = "\t", header = T)
# --------------------------------------------------------------------------------------------------------------
# Calculate the mean and SD of CARB, PROT, and TFAT.
CPTgramsPerUser(inputfn= totals, user.name = "UserName", recall.no = "RecallNo",
outfn='VVKAJ_Tot_m_QCed_CPT_g.txt')
# Calculate the mean % of energy intake (kcal) and SD of CARB, PROT, and TFAT.
CPTpctKcalPerUser(inputfn=totals, user.name='UserName', recall.no='RecallNo',
outfn="VVKAJ_Tot_m_QCed_CPT_kcal.txt")
# Load the %kcal values
CPT_kcal <- read.table("VVKAJ_Tot_m_QCed_CPT_kcal.txt", sep="\t", header=T)
CPT_kcal
# --------------------------------------------------------------------------------------------------------------
# Define ggplot2 themes
library(ggplot2)
# Theme black and white, with the base font size 14: change if necessary.
theme_set(theme_bw(base_size = 14))
# Theme black and white, with the base font size 14: change if necessary.
theme_set(theme_bw(base_size = 14))
# --------------------------------------------------------------------------------------------------------------
# Plot a barchart without SD.
# Change the font size if necessary.
stacked_wo_SD <- StackedwoSD(data= CPT_kcal) + theme(axis.text.x=element_text(size=11))
stacked_wo_SD
# --------------------------------------------------------------------------------------------------------------
# Plot the "dodge"-type of barchart (3 bars per user, NOT STACKED).
# Change the font size if necessary.
dodgedtypebarchart <- DodgedBarchart(data=CPT_kcal) + theme(axis.text.x=element_text(size=11))
dodgedtypebarchart
# Create a vector that contains all the users (individuals).
individuals <- unique(CPT_kcal$UserName)
# Calculate sd_base and sd_forstacked for stacked barchart.
# Note that this function assumes all users (individuals) have CARB, PROT, and TFAT values.
CalcStackedSD(input.df = CPT_kcal, out.fn = "CPT_kcal_forstacked.txt")
# Load the saved file that has SD for stacked barchart.
CPT_kcal_forstacked_read <- read.table("CPT_kcal_forstacked.txt", sep="\t", header=T)
# Stacked barchart with SD as error bars.
stacked_with_SD <- StackedWithSD(data=CPT_kcal_forstacked_read)
stacked_with_SD
# Change the font size if desired.
stacked_with_SD + theme(axis.text.x=element_text(size=11))
# Stacked barchart with SD as error bars.
stacked_with_SD <- StackedWithSD(data=CPT_kcal_forstacked_read) + theme(axis.text.x=element_text(size=11))
stacked_with_SD
# Change the Y axis scale if necessary. Note that if error bars of Carbohydrates disappear after
# changing the limits of Y axis, that may be because the error bars are higher than the max Y.
# Ensure you have enough max value for the Y axis.
stacked_with_SD + scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100))
# --------------------------------------------------------------------------------------------------------------
# Plot a barchart without SD.
# Change the font size if necessary.
stacked_wo_SD <- StackedwoSD(data= CPT_kcal) + theme(axis.text.x=element_text(size=11))
stacked_wo_SD
# Change the Y axis scale if necessary. Note that if error bars of Carbohydrates disappear after
# changing the limits of Y axis, that may be because the error bars are higher than the max Y.
# Ensure you have enough max value for the Y axis.
stacked_with_SD + scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100))
dodgedtypebarchart
# Come back to the main directory
setwd(main_wd)
# Import source code to run the analyses to follow.
# source("lib/load_and_check.R") # nonexistent
source("lib/k-means.R")
# ---------------------------------------------------------------------------------------------------------------
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/")
# Define your input file. Need to scale it to accommodate measurements in different units.
# Average data may not have enough users for this.
selected_variables <- read.table("VVKAJ_Tot_m_QCed_Nut_asis.txt", sep="\t", header=T)
# Check the column names (variables)
colnames(selected_variables)
# Scale the variables and define it as an input for k-means analysis.
kmeans_input <- scale(selected_variables) # correlated variables removed.
# Set your ggplot2 theme.
require(ggplot2)
theme_set(theme_bw(base_size = 14))
# ---------------------------------------------------------------------------------------------------------------
# Use the elbow method to find the ideal K. K cannot be larger than the number of datapoints (rows) in input.
ElbowMethod(k.values = 1:15)
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:9)
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:9)
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:9)
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:9)
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:9)
# or use the factoextra package to use the Silhouette method.
factoextra::fviz_nbclust(kmeans_input, kmeans, method="silhouette")
# or use the factoextra package to use the Silhouette method.
factoextra::fviz_nbclust(kmeans_input, kmeans, method="silhouette")
# or use the factoextra package to use the Silhouette method.
factoextra::fviz_nbclust(kmeans_input, kmeans, method="silhouette")
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:9)
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:9)
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:9)
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:9)
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:9)
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:9)
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:9)
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:9)
# ---------------------------------------------------------------------------------------------------------------
# Use the Gap statistic method to find the ideal K.
set.seed(123)
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:9)
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:9)
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:9)
# or use the factoextra package to use the Silhouette method.
factoextra::fviz_nbclust(kmeans_input, kmeans, method="silhouette")
# or use the factoextra package to use the Silhouette method.
factoextra::fviz_nbclust(kmeans_input, kmeans, method="silhouette")
# ---------------------------------------------------------------------------------------------------------------
# Use the Gap statistic method to find the ideal K.
set.seed(123)
# ---------------------------------------------------------------------------------------------------------------
# Use the Gap statistic method to find the ideal K.
set.seed(123)
GapMethod(k.values = 1:9)
GapMethod(k.values = 1:9)
GapMethod(k.values = 1:9)
# Or use the factoextra package to use the Gap statistic method.
set.seed(123)
# Or use the factoextra package to use the Gap statistic method.
set.seed(123)
# Or use the factoextra package to use the Gap statistic method.
set.seed(123)
FactoextraGapMethod(k.values = 1:9)
FactoextraGapMethod(k.values = 1:9)
FactoextraGapMethod(k.values = 1:9)
FactoextraGapMethod(k.values = 1:9)
View(GapMethod)
# ---------------------------------------------------------------------------------------------------------------
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:9)
# or use the factoextra package to use the Silhouette method.
factoextra::fviz_nbclust(kmeans_input, kmeans, method="silhouette")
View(SilhouetteMethod)
# Or if the factoextra package does not work for some reason, there is a way to only use the
# cluster package.
SilhouetteMethod(k.values = 2:9)
# ---------------------------------------------------------------------------------------------------------------
# Use the Gap statistic method to find the ideal K. The highest K is the optimum K.
GapMethod(k.values = 1:9)
# ---------------------------------------------------------------------------------------------------------------
# Use the Gap statistic method to find the ideal K. The highest K is the optimum K.
GapMethod(k.values = 1:9)
# Or use the factoextra package to use the Gap statistic method.
FactoextraGapMethod(k.values = 1:9)
# Or use the factoextra package to use the Gap statistic method.
FactoextraGapMethod(k.values = 1:9)
# Or use the factoextra package to use the Gap statistic method.
FactoextraGapMethod(k.values = 1:9)
# Or use the factoextra package to use the Gap statistic method.
FactoextraGapMethod(k.values = 1:9)
# Or use the factoextra package to use the Gap statistic method.
FactoextraGapMethod(k.values = 1:9)
# Or use the factoextra package to use the Gap statistic method.
FactoextraGapMethod(k.values = 1:9)
# Or use the factoextra package to use the Gap statistic method.
FactoextraGapMethod(k.values = 1:9)
# ---------------------------------------------------------------------------------------------------------------
# Perform k-means analysis with one specified k.
One_K(myK = 5)
# ---------------------------------------------------------------------------------------------------------------
# Perform k-means analysis with one specified k.
One_K(myK = 4)
# ---------------------------------------------------------------------------------------------------------------
# Perform k-means analysis with multiple (2-4) Ks, and plot them in one window.
MultipleK(myKs = c(3,4,5,6))
# ---------------------------------------------------------------------------------------------------------------
# Perform k-means analysis with multiple (2-4) Ks, and plot them in one window.
multipleKplots <- MultipleK(myKs = c(3,4,5,6))
multipleKplots
# ---------------------------------------------------------------------------------------------------------------
# Perform k-means analysis with multiple (2-4) Ks, and plot them in one window.
multipleKplots <- MultipleK(myKs = c(3,4,5))
multipleKplots
data(iris)
head(iris)
irisvariables <- iris[, 1:4]
# Scale the variables and define it as an input for k-means analysis.
kmeans_input <- scale(irisvariables) # correlated variables removed.
# Use the Silhouette method to find the ideal K.  Uses cluster package.
SilhouetteMethod(k.values = 2:15)
table(iris$Species)
View(FactoextraGapMethod)
