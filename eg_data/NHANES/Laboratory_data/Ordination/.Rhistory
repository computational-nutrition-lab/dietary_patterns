# Load food OTU table - this is our food OTU data
food_raw <- read.delim("Foodtree/Food_D12_FC_cc_f_males60to79_red_Lv3.dhydrt.otu.txt", row.names=1)
head(food_raw, 1)  # food_raw has SEQN in a different order (X86435 X86515 X86817 X86831 ...).
# Sort the columns (SEQN)...
# The taxonomy is at the end of food - the nth column.
taxonomycolumn <- length(colnames(food_raw))
# order the column names of food, except the last column which has taxonomy.
sortedcolnames_order <- order(colnames(food_raw)[ 1 : taxonomycolumn-1 ])
# Sort the SEQNs but do not touch the taxonomy column at the end.
food <- food_raw[, c(sortedcolnames_order, taxonomycolumn) ]
# Take a look at the food file.
# The column name of "food" is SEQN preceded with an 'X'.
food[1:8, 1:8]
# Format the food file and create an otu_table called OTU.
PrepFood(data = food)
head(OTU,1) # X83755 X83789 X83820 X83834 X83886 ....
tax <- read.delim("Foodtree/Food_D12_FC_cc_f_males60plus_red_Lv3.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Sample
# Load the demographics data.
demog <- read.xport("../Raw_data/DEMO_I.XPT")  # demog has SEQN in small-large order.
# Load a dataset that has the "GLU_index" information.
glu <- read.delim( file="QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
head(glu$SEQN) # This also has SEQN in small-large order.
# Take out only the SEQN and GLU_index.
SEQN_GLU <- glu[, c("SEQN", "GLU_index")]
head(SEQN_GLU)     # This also has SEQN in small-large order.
# Add GLU_index to metadata.
demog_glu <- merge(x=SEQN_GLU, y=demog, all.x=TRUE, by="SEQN")
head(demog_glu[, c("SEQN", "GLU_index")])  # This also has SEQN in small-large order.
# Now, it has GLU_index.
head(demog_glu, 2)
# Put 'X' in front of the SEQN and define it as rownames.
rownames(demog_glu) <- paste("X", demog_glu$SEQN, sep="")
# Prep metadata for generating a phyloseq object.
PrepMeta_NHANES(data= demog_glu)
# View(PrepMeta_NHANES)
head(SAMPLES)                    # This IS in the small-large order.
# Food tree
# Load foodtree file generated by the MakeFoodTree function.
foodtree <- read_tree("Foodtree/Food_D12_FC_cc_f_males60to79_red_Lv3.nwk")
# View(PrepMeta_NHANES)
head(SAMPLES)                    # This IS in the small-large order.
# Food tree
# Load foodtree file generated by the MakeFoodTree function.
# foodtree <- read_tree("Foodtree/Food_D12_FC_cc_f_males60to79_red_Lv3.nwk")
foodtree <- read_tree("Foodtree/Food_D12_FC_cc_f_males60plus_red_Lv3.nwk")
# Format the food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# SEQN-sorted food
dim(food)
food[1:3, 1:3]
# samples (indiviuals) needs to be the rowname. So, transform it.
# Remove the taxonomy column from 'food'.
food2 <- food[, !colnames(food) == "taxonomy"]
colnames(food2)
# Transpose food so that rows will be the SEQN (for which a distance matrix is calculated)
food3 <- as.data.frame(t(food2))
head(colnames(food3))    # columns have foods
head(rownames(food3))    # rows have individuals
# Sort individuals (rows) in order. **IMPORTANT!**
food3_s <- food3[order(rownames(food3)), ]
head(rownames(food3_s))       # rows have individuals.
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree by using the phyloseq function.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns (variables) of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s <- tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Change to the folder called "Ordination" in your "Ordination" folder.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/Laboratory_data/Ordination/")
# Perform Principal Coordinate Analysis (PCoA) with UNweighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated_u <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=FALSE)
setwd("~/GitHub/dietarry_patterns")
setwd("~/GitHub/dietarry_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# ---------------------------------------------------------------------------------------------------------------
# load the necessary packages and the source code.
library(vegan)
library(phyloseq)
library(ggplot2)
library(ggtree)
library(SASxport)
library(pairwiseAdonis)
source("lib/specify_data_dir.R")
source("lib/ordination.R")
source("lib/ggplot2themes.R")
source("lib/prep_for_adonis_pairwise.R")
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("~/GitHub/R_Toolbox/distinct100colors.rda")
# You can come back to the main directory by:
setwd(main_wd)
# Set working directory.
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data/")
# Food - copied from "40_ordination_NHANES_males60plus_Lv3_Euclidean_sortfood.R".
# Load food OTU table - this is our food OTU data
food_raw <- read.delim("Foodtree/Food_D12_FC_cc_f_males60plus_red_Lv3.dhydrt.otu.txt", row.names=1)
head(food_raw, 1)  # food_raw has SEQN in a different order (X86435 X86515 X86817 X86831 ...).
# Sort the columns (SEQN)...
# The taxonomy is at the end of food - the nth column.
taxonomycolumn <- length(colnames(food_raw))
# order the column names of food, except the last column which has taxonomy.
sortedcolnames_order <- order(colnames(food_raw)[ 1 : taxonomycolumn-1 ])
# Sort the SEQNs but do not touch the taxonomy column at the end.
food <- food_raw[, c(sortedcolnames_order, taxonomycolumn) ]
# Take a look at the food file.
# The column name of "food" is SEQN preceded with an 'X'.
food[1:8, 1:8]
# Format the food file and create an otu_table called OTU.
PrepFood(data = food)
head(OTU,1) # X83755 X83789 X83820 X83834 X83886 ....
# Taxonomy (tax)
# Load taxonomy file generated by the MakeFoodTree function.
tax <- read.delim("Foodtree/Food_D12_FC_cc_f_males60plus_red_Lv3.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Sample
# Load the demographics data.
demog <- read.xport("../Raw_data/DEMO_I.XPT")  # demog has SEQN in small-large order.
# Load a dataset that has the "GLU_index" information.
glu <- read.delim( file="QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
head(glu$SEQN) # This also has SEQN in small-large order.
# Take out only the SEQN and GLU_index.
SEQN_GLU <- glu[, c("SEQN", "GLU_index")]
head(SEQN_GLU)     # This also has SEQN in small-large order.
# Add GLU_index to metadata.
demog_glu <- merge(x=SEQN_GLU, y=demog, all.x=TRUE, by="SEQN")
head(demog_glu[, c("SEQN", "GLU_index")])  # This also has SEQN in small-large order.
# Now, it has GLU_index.
head(demog_glu, 2)
# Put 'X' in front of the SEQN and define it as rownames.
rownames(demog_glu) <- paste("X", demog_glu$SEQN, sep="")
# Prep metadata for generating a phyloseq object.
PrepMeta_NHANES(data= demog_glu)
# View(PrepMeta_NHANES)
head(SAMPLES)                    # This IS in the small-large order.
# Food tree
# Load foodtree file generated by the MakeFoodTree function.
foodtree <- read_tree("Foodtree/Food_D12_FC_cc_f_males60plus_red_Lv3.nwk")
# Format the food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree by using the phyloseq function.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns (variables) of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s <- tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Change to the folder called "Ordination" in your "Ordination" folder.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/Laboratory_data/Ordination/")
# Perform Principal Coordinate Analysis (PCoA) with UNweighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated_u <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=FALSE)
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_u <- ordinated_u$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent_u,
output.fn="Food_D12_FC_cc_f_males60plus_red_Lv3_ord_UNweighted_eigen.txt")
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata_NHANES(ord.object= ordinated_u, number.of.axes= 10, meta.data= demog_glu,
output.fn= "Food_D12_FC_cc_f_males60plus_red_Lv3_ord_UNweighted_meta_users.txt")
# Load the output again for plotting.
loaded_glu_u <- read.table("Food_D12_FC_cc_f_males60plus_red_Lv3_ord_UNweighted_meta_users.txt",
sep="\t", header=T)
head(loaded_glu_u$SEQN)
table(loaded_glu_u$GLU)
# Convert the GLU_index as a factor to plot it in order.
loaded_glu_u$GLU_index <- factor(loaded_glu_u$GLU_index, levels = c("Normal", "Prediabetic", "Diabetic"))
table(loaded_glu_u$GLU)
# Take a look at meta_usersdf_loaded.
head(loaded_glu_u, 2)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 1 and Axis 2 to show the separation of samples colored by Groups as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.1, y=Axis.2, color=GLU_index)) +
geom_point(aes(color = GLU_index), size=3) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink") ) +
xlab( paste("Axis.1 (", paste(round(eigen_percent_u[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent_u[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 2 and Axis 3 to show the separation of samples colored by Groups as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.2, y=Axis.3, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3)  +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink") ) +
xlab( paste("Axis.2 (", paste(round(eigen_percent_u[2]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.3 (", paste(round(eigen_percent_u[3]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 1 and Axis 2 to show the separation of samples colored by Groups as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.1, y=Axis.2, color=GLU_index)) +
geom_point(aes(color = GLU_index), size=3) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink") ) +
xlab( paste("Axis.1 (", paste(round(eigen_percent_u[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent_u[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60plus_red_Lv3_ord_UNweighted_Axis12_p1.png",
p1_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60plus_red_Lv3_ord_UNweighted_Axis12_ellipses.png",
ellipses_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 2 and Axis 3 to show the separation of samples colored by Groups as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.2, y=Axis.3, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3)  +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink") ) +
xlab( paste("Axis.2 (", paste(round(eigen_percent_u[2]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.3 (", paste(round(eigen_percent_u[3]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60plus_red_Lv3_ord_UNweighted_Axis23_p1.png",
p1_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60plus_red_Lv3_ord_UNweighted_Axis23_ellipses.png",
ellipses_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 3 and Axis 4 to show the separation of samples colored by Groups as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.3, y=Axis.4, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink") ) +
xlab( paste("Axis.3 (", paste(round(eigen_percent_u[3]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.4 (", paste(round(eigen_percent_u[4]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60plus_red_Lv3_ord_UNweighted_Axis34_p1.png",
p1_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60plus_red_Lv3_ord_UNweighted_Axis34_ellipses.png",
ellipses_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 2 and Axis 4 to show the separation of samples colored by Groups as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.2, y=Axis.4, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink") ) +
xlab( paste("Axis.2 (", paste(round(eigen_percent_u[2]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.4 (", paste(round(eigen_percent_u[4]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60plus_red_Lv3_ord_UNweighted_Axis24_p1.png",
p1_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60plus_red_Lv3_ord_UNweighted_Axis24_ellipses.png",
ellipses_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# Generate an UNweighted unifrac distance matrix.
dist_matrix_u <- phyloseq::distance(phyfoods, method="unifrac")  # UNweighted
head(as.matrix(dist_matrix_u))
head(as.matrix(dist_matrix_u))
# Dispersion test and plot
# vegan::betadisper computes centeroids and distance of each datapoint from it.
dispr_u <- vegan::betadisper(dist_matrix_u, phyloseq::sample_data(phyfoods)$GLU_index)
# Can show the centroids and dispersion of each group.
plot(dispr_u)
# Or show the distance to centroid of each datapoint
boxplot(dispr_u, xlab = "")
# Use dispr to do a permutation test for homogeneity of multivariate dispersion.
vegan::permutest(dispr_u)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_u ~ phyloseq::sample_data(phyfoods)$GLU_index, permutations = 5000)
# If overall adonis is significant, you can run pairwise adonis to see which group pairs are different.
pairwise.adonis(dist_matrix_u, phyloseq::sample_data(phyfoods)$GLU_index, perm = 5000)
# SEQN-sorted food
dim(food)
food[1:3, 1:3]
# samples (indiviuals) needs to be the rowname. So, transform it.
# Remove the taxonomy column from 'food'.
food2 <- food[, !colnames(food) == "taxonomy"]
colnames(food2)
# samples (indiviuals) needs to be the rowname. So, transform it.
# Remove the taxonomy column from 'food'.
food2 <- food[, !colnames(food) == "taxonomy"]
colnames(food2)
# Transpose food so that rows will be the SEQN (for which a distance matrix is calculated)
food3 <- as.data.frame(t(food2))
head(colnames(food3))    # columns have foods
head(rownames(food3))    # rows have individuals
# Sort individuals (rows) in order. **IMPORTANT!**
food3_s <- food3[order(rownames(food3)), ]
head(rownames(food3_s))       # rows have individuals.
# UNweighted
# Axis values of each individual in ordinated_u
ordinated_u_vec <- ordinated_u$vectors
head(ordinated_u_vec)
# correlate them with each other
# x <- as.data.frame(t(foodgroups_s))
x <- as.data.frame(food3_s)
x[1:3, 1:3]
# y <- as.data.frame(ffq)  # food group values.
y <- as.data.frame(ordinated_w_vec)  # food group values.
# y <- as.data.frame(ffq)  # food group values.
# y <- as.data.frame(ordinated_w_vec)  # food group values.
y <- as.data.frame(ordinated_u_vec)  # food group values.
y[1:3, 1:3]
# make sure the samples are the same
# x <- x[rownames(x) %in% rownames(y), ]
# y <- y[rownames(y) %in% rownames(x), ]
identical(rownames(x), rownames(y))
# Now want to correlate each of the columns in x with columns in y
dat <- create_corr_frame(x, y)
# ---------------------------------------------------------------------------------------------------------------
# load the necessary packages and the source code.
library(ggplot2)
source("~/GitHub/R_Toolbox/Heatmaps/create_corr_frame.R") # Need acknowledgements.
# source("lib/ordination.R")
source("lib/ggplot2themes.R")
# y <- as.data.frame(ffq)  # food group values.
# y <- as.data.frame(ordinated_w_vec)  # food group values.
y <- as.data.frame(ordinated_u_vec)  # food group values.
y[1:3, 1:3]
# make sure the samples are the same
# x <- x[rownames(x) %in% rownames(y), ]
# y <- y[rownames(y) %in% rownames(x), ]
identical(rownames(x), rownames(y))
# Now want to correlate each of the columns in x with columns in y
dat <- create_corr_frame(x, y)
colnames(dat)[1:2]<-c("Food","FFQ")
dat$Significance <- cut(dat$qval, breaks=c(-Inf, 0.25, Inf), label=c("*", "")) #converts numeric p-values to factors based on significance level
head(dat)
# prune for complete cases with significant correlations
dat.c <- dat[complete.cases(dat),]
taxkeep <- unique(dat.c$Food[dat.c$qval<=1])
taxassign <- taxkeep    # which things to keep
dat.w <- dat.c[dat.c$Food %in% taxassign,]
ffqkeep <- unique(dat.w$FFQ[dat.w$qval<=1])
dat.m <- dat.w[dat.w$FFQ %in% ffqkeep,]
head(dat.m)
#make a factor before ordering
dat.m$FFQ <- as.factor(dat.m$FFQ)
# order the FFQ categories  # order PC1, 3,
# make wide taxa v. Kegg (as columns) filled with correlation
order_FFQ <- dat.m %>% dplyr::select(Food, FFQ, correlation)
order_FFQ <- order_FFQ %>% tidyr::spread(FFQ, correlation)
order_FFQ <- tibble::remove_rownames(order_FFQ)
order_FFQ <- tibble::column_to_rownames(order_FFQ, "Food")
ffqorder <- hclust((dist(1-cor(order_FFQ))/2))$order
head(ffqorder)
levels(dat.m$FFQ)[ffqorder]
# reorder the factors in the dataframe to be in the taxaorder
dat.m$FFQ <- factor(dat.m$FFQ, levels(dat.m$FFQ)[ffqorder])
# Change the food names before ordering
dat.m$Food <- gsub(".*L3_", "", dat.m$Food)
dat.m$Food <- gsub("_", " ", dat.m$Food)
# make factor before ordering
dat.m$Food <- as.factor(dat.m$Food)
dat.m$Food
# make factor before ordering
dat.m$Food <- as.factor(dat.m$Food)
# make wide kegg v. taxa (as columns) filled with correlation
order_food <- dat.m %>% dplyr::select(Food, FFQ, correlation)
order_food <- order_food %>% tidyr::spread(Food, correlation)
order_food <- tibble::remove_rownames(order_food)
order_food <- tibble::column_to_rownames(order_food, "FFQ")
foodorder <- hclust((dist(1-cor(order_food))/2))$order
# reorder the factors in the dataframe to be in the taxaorder
dat.m$Food <- factor(dat.m$Food, levels(dat.m$Food)[foodorder])
length(unique(dat.m$Food))
head(dat.m)
# ---------------------------------------------------------------------------------------------------------------
####### Look at the correlation coeff with Food and Axis1 or Axis2
dat.m_Axis1 <- dat.m %>% filter(FFQ =="Axis.1" )
# ---------------------------------------------------------------------------------------------------------------
library(dplyr)
####### Look at the correlation coeff with Food and Axis1 or Axis2
dat.m_Axis1 <- dat.m %>% filter(FFQ =="Axis.1" )
head(dat.m_Axis1 %>% arrange(pval), 5)
head(dat.m_Axis1 %>% arrange(pval), 6)
head(dat.m_Axis1 %>% arrange(pval), 7)
head(dat.m_Axis1 %>% arrange(pval), 10)
head(dat.m_Axis1 %>% arrange(pval), 20)
head(dat.m_Axis1 %>% arrange(pval), 16)
dat.m_Axis2 <- dat.m %>% filter(FFQ =="Axis.2" )
head(dat.m_Axis2 %>% arrange(pval))
head(dat.m_Axis2 %>% arrange(pval), 10)
head(dat.m_Axis2 %>% arrange(pval), 6)
dat.m_Axis3 <- dat.m %>% filter(FFQ =="Axis.3" )
dat.m_Axis4 <- dat.m %>% filter(FFQ =="Axis.4" )
head(dat.m_Axis3 %>% arrange(pval))
head(dat.m_Axis3 %>% arrange(pval), 10)
head(dat.m_Axis3 %>% arrange(pval), 8)
head(dat.m_Axis4 %>% arrange(pval), 10)
head(dat.m_Axis4 %>% arrange(pval), 20)
head(dat.m_Axis4 %>% arrange(pval), 10)
head(dat.m_Axis3 %>% arrange(pval), 8)
# SEQN-sorted food
dim(food)
food[1:3, 1:3]
# samples (indiviuals) needs to be the rowname. So, transform it.
# Remove the taxonomy column from 'food'.
food2 <- food[, !colnames(food) == "taxonomy"]
colnames(food2)
# Transpose food so that rows will be the SEQN (for which a distance matrix is calculated)
food3 <- as.data.frame(t(food2))
head(colnames(food3))    # columns have foods
head(rownames(food3))    # rows have individuals
# Sort individuals (rows) in order. **IMPORTANT!**
food3_s <- food3[order(rownames(food3)), ]
head(rownames(food3_s))       # rows have individuals.
# WEIGHTED
# Axis values of each individual in ordinated_w
ordinated_w_vec <- ordinated_w$vectors
# UNweighted
# Axis values of each individual in ordinated_u
ordinated_u_vec <- ordinated_u$vectors
head(ordinated_u_vec)
# correlate them with each other
# x <- as.data.frame(t(foodgroups_s))
x <- as.data.frame(food3_s)
x[1:3, 1:3]
# y <- as.data.frame(ffq)  # food group values.
# y <- as.data.frame(ordinated_w_vec)  # food group values.
y <- as.data.frame(ordinated_u_vec)  # food group values.
y[1:3, 1:3]
# make sure the samples are the same
# x <- x[rownames(x) %in% rownames(y), ]
# y <- y[rownames(y) %in% rownames(x), ]
identical(rownames(x), rownames(y))
# Now want to correlate each of the columns in x with columns in y
dat <- create_corr_frame(x, y)
colnames(dat)[1:2]<-c("Food","FFQ")
dat$Significance <- cut(dat$qval, breaks=c(-Inf, 0.25, Inf), label=c("*", "")) #converts numeric p-values to factors based on significance level
head(dat)
# prune for complete cases with significant correlations
dat.c <- dat[complete.cases(dat),]
taxkeep <- unique(dat.c$Food[dat.c$qval<=1])
taxassign <- taxkeep    # which things to keep
dat.w <- dat.c[dat.c$Food %in% taxassign,]
ffqkeep <- unique(dat.w$FFQ[dat.w$qval<=1])
dat.m <- dat.w[dat.w$FFQ %in% ffqkeep,]
head(dat.m)
#make a factor before ordering
dat.m$FFQ <- as.factor(dat.m$FFQ)
# order the FFQ categories  # order PC1, 3,
# make wide taxa v. Kegg (as columns) filled with correlation
order_FFQ <- dat.m %>% dplyr::select(Food, FFQ, correlation)
order_FFQ <- order_FFQ %>% tidyr::spread(FFQ, correlation)
order_FFQ <- tibble::remove_rownames(order_FFQ)
order_FFQ <- tibble::column_to_rownames(order_FFQ, "Food")
ffqorder <- hclust((dist(1-cor(order_FFQ))/2))$order
head(ffqorder)
# reorder the factors in the dataframe to be in the taxaorder
dat.m$FFQ <- factor(dat.m$FFQ, levels(dat.m$FFQ)[ffqorder])
# Change the food names before ordering
dat.m$Food <- gsub(".*L3_", "", dat.m$Food)
dat.m$Food <- gsub("_", " ", dat.m$Food)
# make factor before ordering
dat.m$Food <- as.factor(dat.m$Food)
# make wide kegg v. taxa (as columns) filled with correlation
order_food <- dat.m %>% dplyr::select(Food, FFQ, correlation)
order_food <- order_food %>% tidyr::spread(Food, correlation)
order_food <- tibble::remove_rownames(order_food)
order_food <- tibble::column_to_rownames(order_food, "FFQ")
foodorder <- hclust((dist(1-cor(order_food))/2))$order
# reorder the factors in the dataframe to be in the taxaorder
dat.m$Food <- factor(dat.m$Food, levels(dat.m$Food)[foodorder])
length(unique(dat.m$Food))
head(dat.m)
####### Look at the correlation coeff with Food and Axis1 or Axis2
dat.m_Axis1 <- dat.m %>% filter(FFQ =="Axis.1" )
head(dat.m_Axis1 %>% arrange(pval), 16)
dat.m_Axis2 <- dat.m %>% filter(FFQ =="Axis.2" )
dat.m_Axis3 <- dat.m %>% filter(FFQ =="Axis.3" )
dat.m_Axis4 <- dat.m %>% filter(FFQ =="Axis.4" )
identical(dat.m_Axis1$Food, dat.m_Axis2$Food)
head(dat.m_Axis1 %>% arrange(pval), 16)
head(dat.m_Axis2 %>% arrange(pval), 6)
head(dat.m_Axis3 %>% arrange(pval), 8)
head(dat.m_Axis4 %>% arrange(pval), 10)
