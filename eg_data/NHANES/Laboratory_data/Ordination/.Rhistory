# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
colnames(bbb)
sortedbbb = bbb[ order(bbb$Freq, decreasing = T), ]
sortedbbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
sortedbbb = bbb[ order(bbb$Freq, decreasing = T), ]
sortedbbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
colnames(bbb)
sortedbbb = bbb[ order(bbb$Freq, decreasing = T), ]
sortedbbb
write.table(as.data.frame(sortedbbb), "clipboard", sep="\t")
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
install.packages("tm")
library(tm)
#Create a vector containing only the text
text <- data$text
install.packages("wordcloud2")
library(wordcloud2)
#Create a vector containing only the text
text <- data$text
View(bbb)
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 400, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 400, random.order=FALSE, rot.per=0.8,
colors=brewer.pal(8, "Dark2"))
?wordcloud
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 400, random.order=T, rot.per=1,
colors=brewer.pal(8, "Dark2"))
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 400, random.order=T, rot.per=0,
colors=brewer.pal(8, "Dark2"))
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 400, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"))
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 40, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"))
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 40, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
head(sortedbbb)
head(sortedbbb,15)
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 40, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F, ordered.colors=T)
wordcloud(words=sortedbbb$mycol, freq=sortedbbb$Freq, min.freq=5,
max.words = 40, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
head(sortedbbb,15)
View(sortedbbb)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=5,
max.words = 40, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=5,
max.words = 400, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=10,
max.words = 400, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=20,
max.words = 400, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=20,
max.words = 400, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=T)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=15,
max.words = 400, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=30,
max.words = 400, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=5,
max.words = 400, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
wordcloud(words=bbb$mycol, freq=bbb$Freq, min.freq=5,
max.words = 100, random.order=F, rot.per=0,
colors=brewer.pal(8, "Dark2"), fixed.asp=F)
wordcloud2(data=bbb, size=1.6, color='random-dark')
head(sortedbbb,15)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
colnames(bbb)
sortedbbb = bbb[ order(bbb$Freq, decreasing = T), ]
sortedbbb
write.table(as.data.frame(sortedbbb), "clipboard", sep="\t", row.names=F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
sortedbbb = bbb[ order(bbb$Freq, decreasing = T), ]
sortedbbb
head(sortedbbb)
write.table(as.data.frame(sortedbbb), "clipboard", sep="\t", row.names=F)
female = read.table(file="clipboard", sep="\t", header=T)
head(female, 20)
nrow(female)
male = read.table(file="clipboard", sep="\t", header=T)
head(male, 20)
nrow(male)
names(female)
names(female)[2] <- "female_freq"
nrow(female)
head(female, 20)
names(male)[2] <- "male_freq"
head(male, 20)
fandm <- merge(x=female, y=male, all = T, by="mycol")
head(fandm)
ttwoway <- fandm
Total = colSums(t(ttwoway)) # Column totals
fandm_zeros[ is.na(fandm_zeros) ] <- 0
fandm_zeros <- fandm # make a copy
fandm_zeros[ is.na(fandm_zeros) ] <- 0
head(fandm_zeros)
ttwoway <- fandm_zeros
Total = colSums(t(ttwoway)) # Column totals
write.table(fandm_zeros, "clipboard", sep='\t')
write.table(fandm_zeros, "clipboard", sep='\t', row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
sortedbbb = bbb[ order(bbb$Freq, decreasing = T), ]
sortedbbb
table(sortedbbb$Freq)
sum(sortedbbb$Freq)
write.table(as.data.frame(sortedbbb), "clipboard", sep="\t", row.names=F)
colnames(bbb)
bbb
write.table(bbb, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t", row.names = F)
nrow(mycol)
head(mycol, 20)
unique(mycol)
uniquenames = unique(mycol)
write.table(uniquenames, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
uniquenames = unique(mycol)
sort(uniquenames)
order(uniquenames)
uniquenames
write.table(uniquenames, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol, 20)
nrow(mycol)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t", header =T) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
mydata = read.table(file="clipboard", sep="\t", header =f) # sep="," for 1 column, sep="\t" for multiple columns
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
V1table
sortedV1table = V1table[ order(V1table$Freq, decreasing = T), ]  # sort by col totals
sortedV1table
write.table(sortedV1table, "clipboard", sep="\t", row.names = F)
length(unique(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
V1table = as.data.frame(table(mydata$V1))
V1table
length(unique(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
sortedV1table = V1table[ order(V1table$Freq, decreasing = T), ]  # sort by col totals
write.table(sortedV1table, "clipboard", sep="\t", row.names = F)
# generate a two-way parents' frequency table
female = read.table(file="clipboard", sep="\t", header=T)
head(female, 20)
nrow(female)
# generate a two-way parents' frequency table
female = read.table(file="clipboard", sep="\t", header=F)
head(female, 20)
nrow(female)
names(female)
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
sortedV1table = V1table[ order(V1table$Freq, decreasing = T), ]  # sort by col totals
write.table(sortedV1table, "clipboard", sep="\t", row.names = F)
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
sortedV1table = V1table[ order(V1table$Freq, decreasing = T), ]  # sort by col totals
write.table(sortedV1table, "clipboard", sep="\t", row.names = F)
# generate a two-way parents' frequency table
female = read.table(file="clipboard", sep="\t", header=F)
head(female, 20)
nrow(female)
# generate a two-way parents' frequency table
female = read.table(file="clipboard", sep="\t", header=F)
head(female, 20)
nrow(female)
names(female)[2] <- "female_freq"
male = read.table(file="clipboard", sep="\t", header=T)
head(male, 20)
nrow(male)
nrow(male)
names(male)[2] <- "male_freq"
head(female, 20)
# generate a two-way parents' frequency table
female = read.table(file="clipboard", sep="\t", header=T)
head(female, 20)
nrow(female)
names(female)[2] <- "female_freq"
head(female, 20)
head(male, 20)
fandm <- merge(x=female, y=male, all = T, by="Val1")
fandm <- merge(x=female, y=male, all = T, by="Var1")
head(fandm)
# replace NAs with zero.
fandm_zeros[ is.na(fandm_zeros) ] <- 0
fandm_zeros <- fandm # make a copy
# replace NAs with zero.
fandm_zeros[ is.na(fandm_zeros) ] <- 0
head(fandm_zeros)
write.table(fandm_zeros, "clipboard", sep='\t', row.names = F)
ttwoway <- fandm_zeros
Total = colSums(t(ttwoway)) # Column totals
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
sortedV1table = V1table[ order(V1table$Freq, decreasing = T), ]  # sort by col totals
write.table(V1table, "clipboard", sep="\t", row.names = F)
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
mydata = read.table(file="clipboard", sep="\t", header =F) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
library(dplyr)
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
mydata %>% group_by(V2) %>% summarize(totalcount=count(V4))
mydata %>% group_by(V2) %>% summarise(totalcount=sum(V4))
bypulse <-  mydata %>% group_by(V2) %>% summarise(totalcount=sum(V4))
write.table(bypulse, "clipboard", sep='\t')
setwd("~/GitHub/dietarry_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# ---------------------------------------------------------------------------------------------------------------
# Install the BiocManager package necessary for installing the phyloseq package.
if (!require("BiocManager",    quietly = TRUE))install.packages("BiocManager")
# Install the phyloseq package if you have not done so.
BiocManager::install("phyloseq")
# order the column names of food, except the last column which has taxonomy.
sortedcolnames_order <- order(colnames(food_raw)[ 1 : taxonomycolumn-1 ])
# Food - copied from "40_ordination_NHANES_males60plus_Lv3_Euclidean_sortfood.R".
# Load food OTU table - this is our food OTU data
food_raw <- read.delim("Foodtree/Food_D12_FC_cc_f_males60plus_red_Lv3.dhydrt.otu.txt", row.names=1)
head(food_raw, 1)  # food_raw has SEQN in a different order (X86435 X86515 X86817 X86831 ...).
# Set working directory.
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data/")
setwd("~/GitHub/dietarry_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# ---------------------------------------------------------------------------------------------------------------
# load the necessary packages and the source code.
library(vegan)
library(phyloseq)
library(ggplot2)
library(ggtree)
library(SASxport)
library(pairwiseAdonis)
source("lib/specify_data_dir.R")
source("lib/ordination.R")
source("lib/ggplot2themes.R")
source("lib/prep_for_adonis_pairwise.R")
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("~/GitHub/R_Toolbox/distinct100colors.rda")
# You can come back to the main directory by:
setwd(main_wd)
# Set working directory.
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data/")
# Food - copied from "40_ordination_NHANES_males60plus_Lv3_Euclidean_sortfood.R".
# Load food OTU table - this is our food OTU data
food_raw <- read.delim("Foodtree/Food_D12_FC_cc_f_males60plus_red_Lv3.dhydrt.otu.txt", row.names=1)
head(food_raw, 1)  # food_raw has SEQN in a different order (X86435 X86515 X86817 X86831 ...).
# Sort the columns (SEQN)...
# The taxonomy is at the end of food - the nth column.
taxonomycolumn <- length(colnames(food_raw))
# order the column names of food, except the last column which has taxonomy.
sortedcolnames_order <- order(colnames(food_raw)[ 1 : taxonomycolumn-1 ])
# Sort the SEQNs but do not touch the taxonomy column at the end.
food <- food_raw[, c(sortedcolnames_order, taxonomycolumn) ]
# Take a look at the food file.
# The column name of "food" is SEQN preceded with an 'X'.
food[1:8, 1:8]
# Format the food file and create an otu_table called OTU.
PrepFood(data = food)
head(OTU,1) # X83755 X83789 X83820 X83834 X83886 ....
# Taxonomy (tax)
# Load taxonomy file generated by the MakeFoodTree function.
tax <- read.delim("Foodtree/Food_D12_FC_cc_f_males60plus_red_Lv3.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Sample
# Load the demographics data.
demog <- read.xport("../Raw_data/DEMO_I.XPT")  # demog has SEQN in small-large order.
# Load a dataset that has the "GLU_index" information.
glu <- read.delim( file="QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
# Take out only the SEQN and GLU_index.
SEQN_GLU <- glu[, c("SEQN", "GLU_index")]
demog_glu <- merge(x=SEQN_GLU, y=demog, all.x=TRUE, by="SEQN")
head(demog_glu[, c("SEQN", "GLU_index")])  # This also has SEQN in small-large order.
# Now, it has GLU_index.
head(demog_glu, 2)
# Put 'X' in front of the SEQN and define it as rownames.
rownames(demog_glu) <- paste("X", demog_glu$SEQN, sep="")
# Prep metadata for generating a phyloseq object.
PrepMeta_NHANES(data= demog_glu)
# View(PrepMeta_NHANES)
head(SAMPLES)                    # This IS in the small-large order.
# head(phyloseq::sample_data(phyfoods)) # this IS also in the small-large order.
# Food tree
# Load foodtree file generated by the MakeFoodTree function.
foodtree <- read_tree("Foodtree/Food_D12_FC_cc_f_males60plus_red_Lv3.nwk")
# It is OK to see a message that says:
# "Found more than one class "phylo" in cache; using the first, from namespace 'phyloseq'
# Also defined by 'tidytree'"
# Format the food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# It is OK to see the same message as the previous line.
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree by using the phyloseq function.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# It is OK to see the same message as the previous line.
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns (variables) of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s <- tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Change to the folder called "Ordination" in your "Ordination" folder.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/Laboratory_data/Ordination/")
ordinated_w <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=TRUE)
# A warning message may appear saying:
# Warning message:
#   In matrix(tree$edge[order(tree$edge[, 1]), ][, 2], byrow = TRUE,  :
#               data length [1483] is not a sub-multiple or multiple of the number of rows [742]
# This warns that the food tree we are using is not biforcating. But it is OK.
# some checking.
ordinated_w["vectors"]
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_w <- ordinated_w$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent_w,
output.fn="Food_D12_FC_cc_f_males60plus_red_Lv3_ord_WEIGHTED_eigen.txt")
# ===============================================================================================================
# Plot your ordination results - WEIGHTED
# ===============================================================================================================
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata_NHANES(ord.object= ordinated_w, number.of.axes= 10, meta.data= demog_glu,
output.fn= "Food_D12_FC_cc_f_males60plus_red_Lv3_ord_WEIGHTED_meta_users.txt")
# View(MergeAxesAndMetadata_NHANES)
loaded_glu_w <- read.table("Food_D12_FC_cc_f_males60plus_red_Lv3_ord_WEIGHTED_meta_users.txt",
sep="\t", header=T)
table(loaded_glu_w$GLU_index)
head(loaded_glu_w, 4)
write.table(loaded_glu_w[, c("SEQN", "GLU_index", "Axis.1")], "clipboard", sep="\t")
head(loaded_glu_w[, c("SEQN", "GLU_index", "Axis.1")] )
write.table( as.data.frame(ordinated_w['vectors'])[, 1], "clipboard", sep="\t", row.names = T)
write.table( allvecdf[, c(1, ncol(allvecdf))], "clipboard", sep="\t", row.names = T)
allvec <- ordinated_w['vectors']
allvecdf <- as.data.frame(allvec)
allvecdf$SEQN <- row.names(allvecdf)
head(allvecdf[, c("SEQN","vectors.Axis.1")])
# sort by SEQN so that I can compare it with loaded_glu_w.
allvecdf_s <- allvecdf[order(allvecdf$SEQN), ]
head(allvecdf_s[, c("SEQN","vectors.Axis.1")])
# Confirmed that correct individuals have their correct Axis values.
# So, the separation in the ordination plots has correct individuals and subset labels.
# Convert the GLU_index as a factor to plot it in order.
loaded_glu_w$GLU_index <- factor(loaded_glu_w$GLU_index, levels= c("Normal", "Prediabetic", "Diabetic"))
table(loaded_glu_w$GLU_index)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 1 and Axis 2 to show the separation of samples colored by Groups as in the metadata.
p1_w <- ggplot(loaded_glu_w, aes(x=Axis.1, y=Axis.2, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink")) +
xlab( paste("Axis.1 (", paste(round(eigen_percent_w[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent_w[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_w
