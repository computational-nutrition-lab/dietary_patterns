scale_color_manual( values= c("steelblue3", "gold3", "hotpink") ) +
xlab( paste("Axis.3 (", paste(round(eigen_percent_u[3]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.4 (", paste(round(eigen_percent_u[4]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 3 and Axis 4 to show the separation of samples colored by Groups as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.3, y=Axis.4, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink") ) +
xlab( paste("Axis.3 (", paste(round(eigen_percent_u[3]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.4 (", paste(round(eigen_percent_u[4]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_UNweighted_Axis34_p1.png",
p1_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_UNweighted_Axis34_ellipses.png",
ellipses_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 2 and Axis 4 to show the separation of samples colored by Groups as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.2, y=Axis.4, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink") ) +
xlab( paste("Axis.2 (", paste(round(eigen_percent_u[2]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.4 (", paste(round(eigen_percent_u[4]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_UNweighted_Axis24_p1.png",
p1_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_UNweighted_Axis24_ellipses.png",
ellipses_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# Generate an UNweighted unifrac distance matrix.
dist_matrix_u <- phyloseq::distance(phyfoods, method="unifrac")  # UNweighted
head(as.matrix(dist_matrix_u))
# Dispersion test and plot
# vegan::betadisper computes centeroids and distance of each datapoint from it.
dispr_u <- vegan::betadisper(dist_matrix_u, phyloseq::sample_data(phyfoods)$GLU_index)
# Can show the centroids and dispersion of each group.
plot(dispr_u)
# Or show the distance to centroid of each datapoint
boxplot(dispr_u, xlab = "")
# Use dispr to do a permutation test for homogeneity of multivariate dispersion.
vegan::permutest(dispr_u)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_u ~ phyloseq::sample_data(phyfoods)$GLU_index, permutations = 5000)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_u ~ phyloseq::sample_data(phyfoods)$GLU_index, permutations = 5000)
# If overall adonis is significant, you can run pairwise adonis to see which group pairs are different.
pairwise.adonis(dist_matrix_u, phyloseq::sample_data(phyfoods)$GLU_index, perm = 5000)
# Generate and save an WEIGHTED unifrac distance matrix of "Samples".
WeightedUnifracDis(input.phyloseq.obj = phyfoods,
output.fn = "Food_D12_FC_cc_f_males60to79_red_Lv3_ord_WEIGHTED_uni_dis.txt")
# ---------------------------------------------------------------------------------------------------------------
# Generate and save an UNweighted unifrac distance matrix of "Samples".
UnweightedUnifracDis(input.phyloseq.obj = phyfoods,
output.fn = "Food_D12_FC_cc_f_males60to79_red_Lv3_ord_UNweighted_uni_dis.txt")
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 1 and Axis 2 to show the separation of samples colored by Groups as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.1, y=Axis.2, color=GLU_index)) +
geom_point(aes(color = GLU_index), size=3) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink") ) +
xlab( paste("Axis.1 (", paste(round(eigen_percent_u[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent_u[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_UNweighted_Axis12_p1.png",
p1_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_UNweighted_Axis12_ellipses.png",
ellipses_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 2 and Axis 3 to show the separation of samples colored by Groups as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.2, y=Axis.3, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3)  +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink") ) +
xlab( paste("Axis.2 (", paste(round(eigen_percent_u[2]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.3 (", paste(round(eigen_percent_u[3]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_UNweighted_Axis23_p1.png",
p1_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_UNweighted_Axis23_ellipses.png",
ellipses_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 3 and Axis 4 to show the separation of samples colored by Groups as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.3, y=Axis.4, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink") ) +
xlab( paste("Axis.3 (", paste(round(eigen_percent_u[3]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.4 (", paste(round(eigen_percent_u[4]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_UNweighted_Axis34_p1.png",
p1_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_UNweighted_Axis34_ellipses.png",
ellipses_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 2 and Axis 4 to show the separation of samples colored by Groups as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.2, y=Axis.4, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink") ) +
xlab( paste("Axis.2 (", paste(round(eigen_percent_u[2]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.4 (", paste(round(eigen_percent_u[4]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_UNweighted_Axis24_p1.png",
p1_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_UNweighted_Axis24_ellipses.png",
ellipses_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# Perform Principal Coordinate Analysis (PCoA) with WEIGHTED unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) could take a few minutes.
ordinated_w <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=TRUE)
# creates data frame with column pairs, correlation, and p-value
create_corr_frame <- function(df1, df2, method="spearman"){
# calculate number of rows we will need in our final data frame
rows <- ncol(df1)*ncol(df2)
# create factor vectors for x and y columns (vertices)
# set levels for x and y ahead of time
x <- factor(levels=unique(colnames(df1)))
y <- factor(levels=unique(colnames(df2)))
#create numeric vectors for correlation and p-value columns
correlation <- numeric(rows)
pval <- numeric(rows)
index <- 1
for(i in colnames(df1)){
for(j in colnames(df2)){
a <- as.numeric(df1[,i])
b <- as.numeric(df2[,j])
cor <- cor.test(a, b, method=method, exact = F)
x[index] <- i
y[index] <- j
correlation[index] <- cor$estimate
pval[index] <- cor$p.value
index <- index + 1
}
print(i)
}
dat <- data.frame(x=x, y=y, correlation=correlation, pval=pval)
dat$qval <- p.adjust(dat$pval, method = "fdr")
dat
}
# SEQN-softed food
dim(food)
food[1:3, 1:3]
# samples (indiviuals) needs to be the rowname. So, transform it.
# Remove the taxonomy column from 'food'.
food2 <- food[, !colnames(food) == "taxonomy"]
colnames(food2)
# Transpose food so that rows will be the SEQN (for which a distance matrix is calculated)
food3 <- as.data.frame(t(food2))
head(colnames(food3))    # columns have foods
head(rownames(food3))    # rows have individuals
# Sort individuals (rows) in order. **IMPORTANT!**
food3_s <- food3[order(rownames(food3)), ]
head(rownames(food3_s))       # rows have individuals.
# Axis values of each individual in ordinated_w
ordinated_w_vec <- ordinated_w$vectors
head(ordinated_w_vec)
# correlate them with each other
# x <- as.data.frame(t(foodgroups_s))
x <- as.data.frame(food3_s)
x[1:3, 1:3]
# y <- as.data.frame(ffq)  # food group values.
y <- as.data.frame(ordinated_w_vec)  # food group values.
y[1:3, 1:3]
# make sure the samples are the same
# x <- x[rownames(x) %in% rownames(y), ]
# y <- y[rownames(y) %in% rownames(x), ]
identical(rownames(x), rownames(y))
# Now want to correlate each of the columns in x with columns in y
dat <- create_corr_frame(x, y)
colnames(dat)[1:2]<-c("Food","FFQ")
dat$Significance <- cut(dat$qval, breaks=c(-Inf, 0.25, Inf), label=c("*", "")) #converts numeric p-values to factors based on significance level
head(dat)
# prune for complete cases with significant correlations
dat.c <- dat[complete.cases(dat),]
taxkeep <- unique(dat.c$Food[dat.c$qval<=1])
taxassign <- taxkeep    # which things to keep
dat.w <- dat.c[dat.c$Food %in% taxassign,]
ffqkeep <- unique(dat.w$FFQ[dat.w$qval<=1])
dat.m <- dat.w[dat.w$FFQ %in% ffqkeep,]
head(dat.m)
#make a factor before ordering
dat.m$FFQ <- as.factor(dat.m$FFQ)
?remove_rownames
# order the FFQ categories  # order PC1, 3,
# make wide taxa v. Kegg (as columns) filled with correlation
order_FFQ <- dat.m %>% dplyr::select(Food, FFQ, correlation)
order_FFQ <- order_FFQ %>% tidyr::spread(FFQ, correlation)
order_FFQ <- tibble::remove_rownames(order_FFQ)
order_FFQ <- tibble::column_to_rownames(order_FFQ, "Food")
ffqorder <- hclust((dist(1-cor(order_FFQ))/2))$order
# reorder the factors in the dataframe to be in the taxaorder
dat.m$FFQ <- factor(dat.m$FFQ, levels(dat.m$FFQ)[ffqorder])
# Change the food names before ordering
dat.m$Food <- gsub(".*L3_", "", dat.m$Food)
dat.m$Food <- gsub("_", " ", dat.m$Food)
# make factor before ordering
dat.m$Food <- as.factor(dat.m$Food)
# make wide kegg v. taxa (as columns) filled with correlation
order_food <- dat.m %>% dplyr::select(Food, FFQ, correlation)
order_food <- order_food %>% tidyr::spread(Food, correlation)
order_food <- tibble::remove_rownames(order_food)
order_food <- tibble::column_to_rownames(order_food, "FFQ")
foodorder <- hclust((dist(1-cor(order_food))/2))$order
# reorder the factors in the dataframe to be in the taxaorder
dat.m$Food <- factor(dat.m$Food, levels(dat.m$Food)[foodorder])
length(unique(dat.m$Food))
head(dat.m)
# ---------------------------------------------------------------------------------------------------------------
####### Look at the correlation coeff with Food and Axis1 or Axis2
dat.m_Axis1 <- dat.m %>% filter(FFQ =="Axis.1" )
dat.m_Axis2 <- dat.m %>% filter(FFQ =="Axis.2" )
dat.m_Axis3 <- dat.m %>% filter(FFQ =="Axis.3" )
dat.m_Axis4 <- dat.m %>% filter(FFQ =="Axis.4" )
identical(dat.m_Axis1$Food, dat.m_Axis2$Food)
head(dat.m_Axis1 %>% arrange(pval))
head(dat.m_Axis1 %>% arrange(pval), 5)
# Axis values of each individual in ordinated_w
ordinated_w_vec <- ordinated_w$vectors
head(ordinated_w_vec)
# correlate them with each other
# x <- as.data.frame(t(foodgroups_s))
x <- as.data.frame(food3_s)
x[1:3, 1:3]
# y <- as.data.frame(ffq)  # food group values.
y <- as.data.frame(ordinated_w_vec)  # food group values.
y[1:3, 1:3]
# make sure the samples are the same
# x <- x[rownames(x) %in% rownames(y), ]
# y <- y[rownames(y) %in% rownames(x), ]
identical(rownames(x), rownames(y))
# Now want to correlate each of the columns in x with columns in y
dat <- create_corr_frame(x, y)
head(dat)
colnames(dat)[1:2]<-c("Food","FFQ")
dat$Significance <- cut(dat$qval, breaks=c(-Inf, 0.25, Inf), label=c("*", "")) #converts numeric p-values to factors based on significance level
head(dat)
# prune for complete cases with significant correlations
dat.c <- dat[complete.cases(dat),]
taxkeep <- unique(dat.c$Food[dat.c$qval<=1])
taxassign <- taxkeep    # which things to keep
dat.w <- dat.c[dat.c$Food %in% taxassign,]
ffqkeep <- unique(dat.w$FFQ[dat.w$qval<=1])
dat.m <- dat.w[dat.w$FFQ %in% ffqkeep,]
head(dat.m)
#make a factor before ordering
dat.m$FFQ <- as.factor(dat.m$FFQ)
# ?remove_rownames
# order the FFQ categories  # order PC1, 3,
# make wide taxa v. Kegg (as columns) filled with correlation
order_FFQ <- dat.m %>% dplyr::select(Food, FFQ, correlation)
order_FFQ <- order_FFQ %>% tidyr::spread(FFQ, correlation)
order_FFQ <- tibble::remove_rownames(order_FFQ)
order_FFQ <- tibble::column_to_rownames(order_FFQ, "Food")
ffqorder <- hclust((dist(1-cor(order_FFQ))/2))$order
# reorder the factors in the dataframe to be in the taxaorder
dat.m$FFQ <- factor(dat.m$FFQ, levels(dat.m$FFQ)[ffqorder])
# Change the food names before ordering
dat.m$Food <- gsub(".*L3_", "", dat.m$Food)
dat.m$Food <- gsub("_", " ", dat.m$Food)
# make factor before ordering
dat.m$Food <- as.factor(dat.m$Food)
# make wide kegg v. taxa (as columns) filled with correlation
order_food <- dat.m %>% dplyr::select(Food, FFQ, correlation)
order_food <- order_food %>% tidyr::spread(Food, correlation)
order_food <- tibble::remove_rownames(order_food)
order_food <- tibble::column_to_rownames(order_food, "FFQ")
foodorder <- hclust((dist(1-cor(order_food))/2))$order
# reorder the factors in the dataframe to be in the taxaorder
dat.m$Food <- factor(dat.m$Food, levels(dat.m$Food)[foodorder])
length(unique(dat.m$Food))
head(dat.m)
# ---------------------------------------------------------------------------------------------------------------
####### Look at the correlation coeff with Food and Axis1 or Axis2
dat.m_Axis1 <- dat.m %>% filter(FFQ =="Axis.1" )
dat.m_Axis2 <- dat.m %>% filter(FFQ =="Axis.2" )
dat.m_Axis3 <- dat.m %>% filter(FFQ =="Axis.3" )
dat.m_Axis4 <- dat.m %>% filter(FFQ =="Axis.4" )
identical(dat.m_Axis1$Food, dat.m_Axis2$Food)
head(dat.m_Axis1 %>% arrange(pval), 5)
head(dat.m_Axis2 %>% arrange(pval))
head(dat.m_Axis3 %>% arrange(pval))
head(dat.m_Axis4 %>% arrange(pval), 8)
head(dat.m_Axis4 %>% arrange(pval), 10)
head(dat.m_Axis3 %>% arrange(pval))
head(dat.m_Axis4 %>% arrange(pval), 8)
head(dat.m_Axis4 %>% arrange(pval), 10)
dat.m_Axis2 <- dat.m %>% filter(FFQ =="Axis.2" )
head(dat.m_Axis2 %>% arrange(pval))
head(food3_s, 3)
head(food3_s[1:2, 1:2] )
# Add GLU_index info to this food OTU table.
head(demog_glu)
food3_glu <- merge(food3_s, demog_glu[, c("SEQN", "GLU_index")], all.x=T)
food3_s_glu <- merge(food3_s, demog_glu[, c("SEQN", "GLU_index")], all.x=T)
head(food3_s_glu[1:2, 1:2])
rm(food3_glu)
head(food3_s_glu[1:2, 1:2])
food3_s_glu <- left_join(food3_s, demog_glu[, c("SEQN", "GLU_index")])
head(food3_s[1:2, 1:2] )
food3_s$SEQN <- rownames(food3_s)
demog_glu$XSEQN <- paste("X", rownames(demog_glu), sep="")
head(demog_glu$XSEQN)
demog_glu$XSEQN <- rownames(demog_glu)
head(demog_glu$XSEQN)
food3_s$XSEQN <- rownames(food3_s)
head(food3_s$XSEQN)
head(demog_glu$XSEQN)
food3_s_glu <- left_join(food3_s, demog_glu[, c("XSEQN", "GLU_index")], by="XSEQN")
head(food3_s_glu[1:2, 1:2])
head(food3_s_glu[1:2, 1276])
head(food3_s_glu[1:2, 1275:1276])
hist(food3_s_glu$`Ice cream regular flavors other than chocolate`)
ggplot(data=food3_s_glu, aes(x=GLU_index, y=`Ice cream regular flavors other than chocolate`, fill=GLU_index)) +
geom_bar()
ggplot(data=food3_s_glu, aes(x=`Ice cream regular flavors other than chocolate`, fill=GLU_index)) +
geom_bar()
ggplot(data=food3_s_glu, aes(x=`Ice cream regular flavors other than chocolate`, fill=GLU_index)) +
geom_bar(position=position_dodge())
# food3_s_glu
food3_s_glu$GLU_index <- factor(food3_s_glu$GLU_index, levels=c("Normal", "Prediabetic", "Diabetic"))
table(food3_s_glu$GLU_index)
# Barplot of ice cream consumption
ggplot(data=food3_s_glu, aes(x=`Ice cream regular flavors other than chocolate`, fill=GLU_index)) +
geom_bar(position=position_dodge()) +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink"))
# Barplot of ice cream consumption
icecream_GLU <- ggplot(data=food3_s_glu, aes(x=`Ice cream regular flavors other than chocolate`, fill=GLU_index)) +
geom_bar(position=position_dodge()) +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink"))
# Look at histogram of ice cream consumption.
hist(food3_s_glu$`Ice cream regular flavors other than chocolate`)
# Barplot of ice cream consumption
icecream_GLU <- ggplot(data=food3_s_glu, aes(x=`Ice cream regular flavors other than chocolate`, fill=GLU_index)) +
geom_bar(position=position_dodge()) +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink"))
icecream_GLU
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_WEIGHTED_corr_icecream_GLU.png",
icecream_GLU, device="png", width=7, height=5.5, unit="in", dpi=300)
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_WEIGHTED_corr_icecream_GLU.png",
icecream_GLU, device="png", width=10, height=5.5, unit="in", dpi=300)
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_WEIGHTED_corr_icecream_GLU.png",
icecream_GLU, device="png", width=10, height=5, unit="in", dpi=300)
# Barplot of Milk cows fluid 2 fat  consumption
milk2prc_GLU <- ggplot(data=food3_s_glu, aes(x=`Milk cows fluid 2 fat`, fill=GLU_index)) +
geom_bar(position=position_dodge()) +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink"))
milk2prc_GLU
# Barplot of Milk cows fluid 2 fat  consumption
milk2prc_GLU <- ggplot(data=food3_s_glu, aes(x=`Milk cows fluid 2 fat`, fill=GLU_index)) +
geom_bar(position=position_dodge()) +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink"))
milk2prc_GLU
# Look at histogram of ice cream consumption.
hist(food3_s_glu$`Milk cows fluid 2 fat`)
# Barplot of Milk cows fluid 2 fat consumption
milkwhole_GLU <- ggplot(data= food3_s_glu, aes(x=`Milk cows fluid whole`, fill=GLU_index)) +
geom_bar(position=position_dodge()) +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink"))
milkwhole_GLU
# Barplot of ice cream consumption
icecream_GLU <- ggplot(data=food3_s_glu, aes(x=`Ice cream regular flavors other than chocolate`, fill=GLU_index)) +
geom_bar(position=position_dodge()) +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink"))
icecream_GLU
ggplot(data= food3_s_glu, aes(x=`Milk cows fluid 2 fat`, fill=GLU_index)) +
geom_bar(position=position_dodge()) +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink"))
food3_s_glu$`Milk cows fluid 2 fat`
df <- data.frame(Milk_2_prc = food3_s_glu$`Milk cows fluid 2 fat`,
SEQN = food3_s_glu$SEQN,
GLU_index = food3_s_glu$GLU_index)
# Barplot of Milk cows fluid 2 fat consumption
milk2prc_GLU <- ggplot(data= df, aes(x=Milk_2_perc, fill=GLU_index)) +
geom_bar(position=position_dodge()) +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink"))
milk2prc_GLU
# Barplot of Milk cows fluid 2 fat consumption
milk2prc_GLU <- ggplot(data= df, aes(x=Milk_2_prc, fill=GLU_index)) +
geom_bar(position=position_dodge()) +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink"))
milk2prc_GLU
food3_s_glu$`Ice cream regular flavors other than chocolate`
# Barplot of Milk cows fluid 2 fat consumption
milk2prc_GLU <- ggplot(data= df, aes(x=Milk_2_prc, fill=GLU_index)) +
geom_boxplot() +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink"))
milk2prc_GLU
# Barplot of Milk cows fluid 2 fat consumption
milk2prc_GLU <- ggplot(data= df, aes(x=GLU_index, y=Milk_2_prc)) +
geom_boxplot() +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink"))
milk2prc_GLU
no_grid
# Barplot of Milk cows fluid 2 fat consumption
milk2prc_GLU <- ggplot(data= df, aes(x=GLU_index, y=Milk_2_prc)) +
geom_boxplot(outlier.shape = NA) + no_grid + space_axes +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink"))
# Barplot of Milk cows fluid 2 fat consumption
milk2prc_GLU <- ggplot(data= df, aes(x=GLU_index, y=Milk_2_prc)) +
geom_boxplot(outlier.shape = NA) + no_grid + space_axes +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink")) +
# scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
geom_jitter(width=0.3)
milk2prc_GLU
# Barplot of Milk cows fluid 2 fat consumption
milk2prc_GLU <- ggplot(data= df, aes(x=GLU_index, y=Milk_2_prc)) +
geom_boxplot(outlier.shape = NA) + no_grid + space_axes +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink")) +
# scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
geom_jitter(width=0.2, alpha=0.2)
milk2prc_GLU
# Barplot of Milk cows fluid 2 fat consumption
milk2prc_GLU <- ggplot(data= df, aes(x=GLU_index, y=Milk_2_prc)) +
geom_boxplot(outlier.shape = NA) + no_grid + space_axes +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink")) +
# scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
geom_jitter(width=0.2, alpha=0.3)
milk2prc_GLU
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_WEIGHTED_corr_milk2prc_GLU.png",
milk2prc_GLU, device="png", width=5.3, height=4.5, unit="in", dpi=300)
# Barplot of Milk cows fluid 2 fat consumption ------------------------
# Look at histogram.
hist(food3_s_glu$`Milk cows fluid 2 fat`)
# Barplot of Milk cows fluid 2 fat consumption ---------------------
# Look at histogram.
hist(food3_s_glu$`Milk cows fluid whole`)
df <- data.frame(Milk_whole = food3_s_glu$`Milk cows fluid whole`,
SEQN = food3_s_glu$SEQN,
GLU_index = food3_s_glu$GLU_index)
milkwhole_GLU <- ggplot(data= food3_s_glu, aes(x=`Milk cows fluid whole`, fill=GLU_index)) +
geom_bar(position=position_dodge()) +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink"))
milkwhole_GLU
# Barplot of Milk cows fluid 2 fat consumption ---------------------
# Look at histogram.
hist(food3_s_glu$`Milk cows fluid whole`)
milkwhole_GLU <- ggplot(data= df, aes(x=Milk_Whole, fill=GLU_index)) +
geom_bar(position=position_dodge()) +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink"))
milkwhole_GLU
df <- data.frame(Milk_whole = food3_s_glu$`Milk cows fluid whole`,
SEQN = food3_s_glu$SEQN,
GLU_index = food3_s_glu$GLU_index)
milkwhole_GLU <- ggplot(data= df, aes(x=Milk_whole, fill=GLU_index)) +
geom_bar(position=position_dodge()) +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink"))
milkwhole_GLU
milkwhole_GLU <- ggplot(data= df, aes(x=GLU_index, y=Milk_whole, fill=GLU_index)) +
geom_bar(position=position_dodge()) +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink"))
milkwhole_GLU
milkwhole_GLU <- ggplot(data= df, aes(x=GLU_index, y=Milk_whole, fill=GLU_index)) +
geom_boxplot(outlier.shape = NA) + no_grid + space_axes +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink")) +
# scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
geom_jitter(width=0.2, alpha=0.3)
milkwhole_GLU
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_WEIGHTED_corr_milkwhole_GLU.png",
icecream_GLU, device="png", width=10, height=5.5, unit="in", dpi=300)
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_WEIGHTED_corr_milkwhole_GLU.png",
milkwhole_GLU, device="png", width=10, height=5.5, unit="in", dpi=300)
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_WEIGHTED_corr_milkwhole_GLU.png",
milkwhole_GLU, device="png", width=5.3, height=4.5, unit="in", dpi=300)
milkwhole_GLU <- ggplot(data= df, aes(x=GLU_index, y=Milk_whole)) +
geom_boxplot(outlier.shape = NA) + no_grid + space_axes +
scale_fill_manual(values=c("steelblue3", "gold3", "hotpink")) +
# scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
geom_jitter(width=0.2, alpha=0.3)
milkwhole_GLU
ggsave("Food_D12_FC_cc_f_males60to79_red_Lv3_ord_WEIGHTED_corr_milkwhole_GLU.png",
milkwhole_GLU, device="png", width=5.3, height=4.5, unit="in", dpi=300)
table(df$GLU_index)
