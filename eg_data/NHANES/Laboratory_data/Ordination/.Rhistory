vegan::adonis(dist_matrix_u ~ phyloseq::sample_data(phyfoods)$GLU_index)
# Use dispr to do a permutation test for homogeneity of multivariate dispersion.
vegan::permutest(dispr_u)
# Use dispr to do a permutation test for homogeneity of multivariate dispersion.
vegan::permutest(dispr_u)
# If overall adonis is significant, you can run pairwise adonis to see which group pairs are different.
pairwise.adonis(dist_matrix_u, phyloseq::sample_data(phyfoods)$GLU_index, perm = 5000)
# If overall adonis is significant, you can run pairwise adonis to see which group pairs are different.
pairwise.adonis(dist_matrix_u, phyloseq::sample_data(phyfoods)$GLU_index, perm = 5000)
# Name your main directory for future use.
main_wd <- file.path(getwd())
setwd("~/GitHub/dietarry_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# load the necessary packages and the source code.
library(vegan)
library(phyloseq)
library(ggplot2)
library(ggtree)
library(SASxport)
library(pairwiseAdonis)
source("lib/specify_data_dir.R")
source("lib/ordination.R")
source("lib/ggplot2themes.R")
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("~/GitHub/R_Toolbox/distinct100colors.rda")
# You can come back to the main directory by:
setwd(main_wd)
# Set working directory.
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data/")
# Load the necessary files for creating a phyloseq object.
# Food
# Load food OTU table - this is our food OTU data
food <- read.delim("Foodtree/Food_D12_FC_cc_f_males60over_ND_red_Lv3.dhydrt.otu.txt", row.names=1)
head(food,1)  # food has SEQN in a different order (X86515 X86831 X89237 X92105 X83820 ...).
# Take a look at the food file.
# The column name of "food" is SEQN preceded with an 'X'.
food[1:8, 1:8]
# Format the food file and create a otu_table called OTU.
PrepFood(data=food)
head(OTU,1) # same order as food - X86515 X86831 X89237 X92105 X83820  ....
# Taxonomy (tax)
# Load taxonomy file generated by the MakeFoodTree function.
tax <- read.delim("Foodtree/Food_D12_FC_cc_f_males60over_ND_red_Lv3.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Sample
# Load the demographics data.
demog <- read.xport("../Raw_data/DEMO_I.XPT")  # demog has SEQN in small-large order.
# Load a dataset that has the "GLU_index" information.
glu <- read.delim( file="QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
head(glu$SEQN) # This also has SEQN in small-large order.
# Take out only the SEQN and GLU_index.
SEQN_GLU <- glu[, c("SEQN", "GLU_index")]
head(SEQN_GLU$SEQN)     # This also has SEQN in small-large order.
# Add GLU_index to metadata.
demog_glu <- merge(x=SEQN_GLU, y=demog, all.x=TRUE, by="SEQN")
head(demog_glu[, c("SEQN", "GLU_index")])  # This also has SEQN in small-large order.
# Now, it has GLU_index.
head(demog_glu, 2)
# Put 'X' in front of the SEQN and define it as rownames.
rownames(demog_glu) <- paste("X", demog_glu$SEQN, sep="")
# Prep metadata for generating a phyloseq object.
PrepMeta_NHANES(data= demog_glu)
View(PrepMeta_NHANES)
head(SAMPLES)                    # This is not in the small-large order, but in the original order.
head(phyloseq::sample_data(phyfoods)) # this is also in the original order.
# Be careful that demo_glu does NOT have the original order!
# Food tree
# Load foodtree file generated by the MakeFoodTree function.
foodtree <- read_tree("Foodtree/Food_D12_FC_cc_f_males60over_ND_red_Lv3.nwk")
# It is OK to see a message that says:
# "Found more than one class "phylo" in cache; using the first, from namespace 'phyloseq'
# Also defined by 'tidytree'"
# Format the food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# It is OK to see the same message as the previous line.
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree by using the phyloseq function.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# It is OK to see the same message as the previous line.
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns (variables) of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s <- tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Change to the folder called "Ordination" in your "Ordination" folder.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/Laboratory_data/Ordination/")
# Perform Principal Coordinate Analysis (PCoA) with WEIGHTED unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) could take a few minutes.
ordinated_w <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=TRUE)
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_w <- ordinated_w$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent_w,
output.fn="Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_WEIGHTED_eigen.txt")
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata_NHANES(ord.object= ordinated_w, number.of.axes= 10, meta.data= demog_glu,
output.fn= "Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_WEIGHTED_meta_users.txt")
# Load the output again for plotting.
loaded_glu_w <- read.table("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_WEIGHTED_meta_users.txt",
sep="\t", header=T)
table(loaded_glu_w$GLU_index)
allvec <- ordinated_w['vectors']
allvecdf <- as.data.frame(allvec)
allvecdf$SEQN <- row.names(allvecdf)
head(allvecdf[, c("SEQN","vectors.Axis.1")])
# sort by SEQN so that I can compare it with loaded_glu_w.
allvecdf_s <- allvecdf[order(allvecdf$SEQN), ]
head(allvecdf_s[, c("SEQN","vectors.Axis.1")])
head(loaded_glu_w[, c("SEQN", "GLU_index", "Axis.1")] )
# Convert the GLU_index as a factor to plot it in order.
loaded_glu_w$GLU_index <- factor(loaded_glu_w$GLU_index, levels= c("Normal", "Diabetic"))
table(loaded_glu_w$GLU_index)
# Convert the GLU_index as a factor to plot it in order.
loaded_glu_w$GLU_index <- factor(loaded_glu_w$GLU_index, levels= c("Normal", "Diabetic"))
table(loaded_glu_w$GLU_index)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 1 and Axis 2 to show the separation of samples colored by Groups as in the metadata.
p1_w <- ggplot(loaded_glu_w, aes(x=Axis.1, y=Axis.2, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("steelblue3",  "hotpink")) +
xlab( paste("Axis.1 (", paste(round(eigen_percent_w[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent_w[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_w
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_WEIGHTED_Axis12_p1.png",
p1_w, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_w <- p1_w + stat_ellipse(level=0.95)
ellipses_w
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_w <- p1_w + stat_ellipse(level=0.95)
ellipses_w
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_WEIGHTED_Axis12_ellipses.png",
ellipses_w, device="png", width=7, height=5.5, unit="in", dpi=300)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 2 and Axis 3 to show the separation of samples colored by Groups as in the metadata.
p1_w <- ggplot(loaded_glu_w, aes(x=Axis.2, y=Axis.3, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("steelblue3",  "hotpink")) +
xlab( paste("Axis.2 (", paste(round(eigen_percent_w[2]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.3 (", paste(round(eigen_percent_w[3]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_w
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_WEIGHTED_Axis23_p1.png",
p1_w, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_w <- p1_w + stat_ellipse(level=0.95)
ellipses_w
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_WEIGHTED_Axis23_ellipses.png",
ellipses_w, device="png", width=7, height=5.5, unit="in", dpi=300)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 3 and Axis 4 to show the separation of samples colored by Groups as in the metadata.
p1_w <- ggplot(loaded_glu_w, aes(x=Axis.3, y=Axis.4, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("steelblue3",  "hotpink")) +
xlab( paste("Axis.3 (", paste(round(eigen_percent_w[3]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.4 (", paste(round(eigen_percent_w[4]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_w
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_WEIGHTED_Axis34_p1.png",
p1_w, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_w <- p1_w + stat_ellipse(level=0.95)
ellipses_w
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_WEIGHTED_Axis34_ellipses.png",
ellipses_w, device="png", width=7, height=5.5, unit="in", dpi=300)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 2 and Axis 4 to show the separation of samples colored by Groups as in the metadata.
p1_w <- ggplot(loaded_glu_w, aes(x=Axis.2, y=Axis.4, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("steelblue3",  "hotpink")) +
xlab( paste("Axis.2 (", paste(round(eigen_percent_w[2]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.4 (", paste(round(eigen_percent_w[4]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_w
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_WEIGHTED_Axis24_p1.png",
p1_w, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_w <- p1_w + stat_ellipse(level=0.95)
ellipses_w
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_WEIGHTED_Axis24_ellipses.png",
ellipses_w, device="png", width=7, height=5.5, unit="in", dpi=300)
# Generate a weighted unifrac distance matrix.
dist_matrix_w <- phyloseq::distance(phyfoods, method = "wunifrac") # weighted
# Dispersion test and plot
# vegan::betadisper computes centeroids and distance of each datapoint from it.
dispr_w <- vegan::betadisper(d=dist_matrix_w, phyloseq::sample_data(phyfoods)$GLU_index)
# Can show the centroids and dispersion of each group.
plot(dispr_w)
# Or show the distance to centroid of each datapoint.
boxplot(dispr_w, xlab = "")
# Use dispr to do a permutation test for homogeneity of multivariate dispersion
vegan::permutest(dispr_w)
# Use dispr to do a permutation test for homogeneity of multivariate dispersion
vegan::permutest(dispr_w)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_w ~ phyloseq::sample_data(phyfoods)$GLU_index, permutations = 5000)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_w ~ phyloseq::sample_data(phyfoods)$GLU_index, permutations = 5000)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_w ~ phyloseq::sample_data(phyfoods)$GLU_index, permutations = 5000)
# If overall adonis is significant, you can run pairwise adonis to see which group pairs are different.
pairwise.adonis(dist_matrix_w, phyloseq::sample_data(phyfoods)$GLU_index, perm = 5000)
# Perform Principal Coordinate Analysis (PCoA) with UNweighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated_u <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=FALSE)
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_u <- ordinated_u$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent_u,
output.fn="Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_UNweighted_eigen.txt")
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata_NHANES(ord.object= ordinated_u, number.of.axes= 10, meta.data= demog_glu,
output.fn= "Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_UNweighted_meta_users.txt")
# Load the output again for plotting.
loaded_glu_u <- read.table("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_UNweighted_meta_users.txt",
sep="\t", header=T)
table(loaded_glu_u$GLU)
# Convert the GLU_index as a factor to plot it in order.
loaded_glu_u$GLU_index <- factor(loaded_glu_u$GLU_index, levels = c("Normal", "Diabetic"))
table(loaded_glu_u$GLU)
# Take a look at meta_usersdf_loaded.
head(loaded_glu_u, 2)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 1 and Axis 2 to show the separation of samples colored by Groups as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.1, y=Axis.2, color=GLU_index)) +
geom_point(aes(color = GLU_index), size=3) +
scale_color_manual( values= c("steelblue3",  "hotpink") ) +
xlab( paste("Axis.1 (", paste(round(eigen_percent_u[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent_u[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_UNweighted_Axis12_p1.png",
p1_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_UNweighted_Axis12_ellipses.png",
ellipses_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 2 and Axis 3 to show the separation of samples colored by Groups as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.2, y=Axis.3, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3)  +
scale_color_manual( values= c("steelblue3",  "hotpink") ) +
xlab( paste("Axis.2 (", paste(round(eigen_percent_u[2]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.3 (", paste(round(eigen_percent_u[3]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_UNweighted_Axis23_p1.png",
p1_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_UNweighted_Axis23_ellipses.png",
ellipses_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 3 and Axis 4 to show the separation of samples colored by Groups as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.3, y=Axis.4, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("steelblue3",  "hotpink") ) +
xlab( paste("Axis.3 (", paste(round(eigen_percent_u[3]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.4 (", paste(round(eigen_percent_u[4]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_UNweighted_Axis34_p1.png",
p1_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_UNweighted_Axis34_ellipses.png",
ellipses_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 2 and Axis 4 to show the separation of samples colored by Groups as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.2, y=Axis.4, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("steelblue3",  "hotpink") ) +
xlab( paste("Axis.2 (", paste(round(eigen_percent_u[2]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.4 (", paste(round(eigen_percent_u[4]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# Save p1 as a png.
ggsave("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_UNweighted_Axis24_p1.png",
p1_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
# Save ellipses as a png.
ggsave("Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_UNweighted_Axis24_ellipses.png",
ellipses_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# Generate an UNweighted unifrac distance matrix.
dist_matrix_u <- phyloseq::distance(phyfoods, method="unifrac")  # UNweighted
head(as.matrix(dist_matrix_u))
# Dispersion test and plot
# vegan::betadisper computes centeroids and distance of each datapoint from it.
dispr_u <- vegan::betadisper(dist_matrix_u, phyloseq::sample_data(phyfoods)$GLU_index)
# Can show the centroids and dispersion of each group.
plot(dispr_u)
# Or show the distance to centroid of each datapoint
boxplot(dispr_u, xlab = "")
# Use dispr to do a permutation test for homogeneity of multivariate dispersion.
vegan::permutest(dispr_u)
# Use dispr to do a permutation test for homogeneity of multivariate dispersion.
vegan::permutest(dispr_u)
# Use dispr to do a permutation test for homogeneity of multivariate dispersion.
vegan::permutest(dispr_u)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_u ~ phyloseq::sample_data(phyfoods)$GLU_index)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_u ~ phyloseq::sample_data(phyfoods)$GLU_index)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_u ~ phyloseq::sample_data(phyfoods)$GLU_index)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_u ~ phyloseq::sample_data(phyfoods)$GLU_index)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_u ~ phyloseq::sample_data(phyfoods)$GLU_index)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_u ~ phyloseq::sample_data(phyfoods)$GLU_index, perm = 5000)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_u ~ phyloseq::sample_data(phyfoods)$GLU_index, perm = 5000)
#### NOT NEEDED, AND THIS MESSES UP SAMPLE ORDER!!!
# # Prepare dataset - filter food OTU table for the subset population and remove the "x" prefix of SEQN in it.
#   PrepForPairwiseAdonis(food.otu.table = food, demog.table = demog_glu)
#
# Use pairwise.adonis function to compare subgroups pairwise.
pairwise.adonis(dist_matrix_u, phyloseq::sample_data(phyfoods)$GLU_index, perm = 5000)
head(phyfoodssample, 3)
# Some checking
phyfoodssample = phyloseq::sample_data(phyfoods)
# Some checking
phyfoodssample = phyloseq::sample_data(phyfoods)
head(phyfoodssample, 3)
# Generate and save an WEIGHTED unifrac distance matrix of "Samples".
WeightedUnifracDis(input.phyloseq.obj = phyfoods,
output.fn = "Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_WEIGHTED_uni_dis.txt")
# ---------------------------------------------------------------------------------------------------------------
# Generate and save an UNweighted unifrac distance matrix of "Samples".
UnweightedUnifracDis(input.phyloseq.obj = phyfoods,
output.fn = "Food_D12_FC_cc_f_males60over_ND_red_Lv3_ord_UNweighted_uni_dis.txt")
setwd("~/GitHub/dietarry_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
library(vegan)
library(phyloseq)
library(ggplot2)
library(ggtree)
library(SASxport)
library(pairwiseAdonis)
source("lib/specify_data_dir.R")
source("lib/ordination.R")
source("lib/ggplot2themes.R")
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("~/GitHub/R_Toolbox/distinct100colors.rda")
# You can come back to the main directory by:
setwd(main_wd)
# Set working directory.
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data/")
# Food
# Load food OTU table - this is our food OTU data
food <- read.delim("Foodtree/Food_D12_FC_cc_f_males60plus_red_Lv3.dhydrt.otu.txt", row.names=1)
head(food,1)  # food has SEQN in a different order (X86435 X86515 X86817 X86831 ...).
# Take a look at the food file.
# The column name of "food" is SEQN preceded with an 'X'.
food[1:8, 1:8]
# Format the food file and create a otu_table called OTU.
PrepFood(data=food)
head(OTU,1) # same order as food - X86435 X86515 X86817 X86831 ....
# Taxonomy (tax)
# Load taxonomy file generated by the MakeFoodTree function.
tax <- read.delim("Foodtree/Food_D12_FC_cc_f_males60plus_red_Lv3.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Sample
# Load the demographics data.
demog <- read.xport("../Raw_data/DEMO_I.XPT")  # demog has SEQN in small-large order.
# Load a dataset that has the "GLU_index" information.
glu <- read.delim( file="QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
head(glu$SEQN) # This also has SEQN in small-large order.
# Take out only the SEQN and GLU_index.
SEQN_GLU <- glu[, c("SEQN", "GLU_index")]
head(SEQN_GLU$SEQN)     # This also has SEQN in small-large order.
# Add GLU_index to metadata.
demog_glu <- merge(x=SEQN_GLU, y=demog, all.x=TRUE, by="SEQN")
head(demog_glu[, c("SEQN", "GLU_index")])  # This also has SEQN in small-large order.
# Now, it has GLU_index.
head(demog_glu, 2)
# Put 'X' in front of the SEQN and define it as rownames.
rownames(demog_glu) <- paste("X", demog_glu$SEQN, sep="")
# Prep metadata for generating a phyloseq object.
PrepMeta_NHANES(data= demog_glu)
View(PrepMeta_NHANES)
head(SAMPLES)                    # This is not in the small-large order, but in the original order.
head(phyloseq::sample_data(phyfoods)) # this is also in the original order.
# Food tree
# Load foodtree file generated by the MakeFoodTree function.
foodtree <- read_tree("Foodtree/Food_D12_FC_cc_f_males60plus_red_Lv3.nwk")
# Format the food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree by using the phyloseq function.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns (variables) of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s <- tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Change to the folder called "Ordination" in your "Ordination" folder.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/Laboratory_data/Ordination/")
# Perform Principal Coordinate Analysis (PCoA) with WEIGHTED unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) could take a few minutes.
ordinated_w <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=TRUE)
# some checking.
head(ordinated_w["vectors"])
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_w <- ordinated_w$values$Relative_eig
# Generate a weighted unifrac distance matrix.
dist_matrix_w <- phyloseq::distance(phyfoods, method = "Euclidean") # weighted
View(phyloseq::distance)
?phyloseq::distance
food_mat
head(food,1)  # food has SEQN in a different order (X86435 X86515 X86817 X86831 ...).
head(OTU,1) # same order as food - X86435 X86515 X86817 X86831 ....
View(Prepfood)
View(PrepFood)
View(PrepFood)
# Generate an Euclidean distance matrix.
# Remove the taxonomy column from 'food'
food2 <- food[, !colnames(food) == "taxonomy"]
colnames(food2)
rownames(food2)
# dist_matrix_w <- phyloseq::distance(phyfoods, method = "wunifrac") # weighted
dist_matrix_w <- dist(food2, method = "euclidean")
head(dist_matrix_w)
# Dispersion test and plot
# vegan::betadisper computes centeroids and distance of each datapoint from it.
dispr_w <- vegan::betadisper(d=dist_matrix_w, phyloseq::sample_data(phyfoods)$GLU_index)
phyloseq::sample_data(phyfoods)$GLU_index
head(dist_matrix_w)
dist_matrix_w_wuni <- phyloseq::distance(phyfoods, method = "wunifrac") # weighted
head(dist_matrix_w_wuni)
dist_matrix_w <- dist(food2, method = "euclidean", diag = T)
head(dist_matrix_w)
dist_matrix_w_df <-  as.data.frame(dist_matrix_w)
dist_matrix_w_dist <-  as.dist(dist_matrix_w)
# Dispersion test and plot
# vegan::betadisper computes centeroids and distance of each datapoint from it.
dispr_w <- vegan::betadisper(d=dist_matrix_w_dist, phyloseq::sample_data(phyfoods)$GLU_index)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_w_dist ~ phyloseq::sample_data(phyfoods)$GLU_index, permutations = 5000)
dist_matrix_w_wuni
is(dist_matrix_w_wuni)
is(dist_matrix_w_dist)
is(dist_matrix_w)
colnames(food2) # sample IDs
head(colnames(food2)) # sample IDs
phyloseq::sample_data(phyfoods)
b = row.names(sample_data(phyfoods))
a = colnames(food2)
identical(a, b)
adonis(x=food2 ~ phyloseq::sample_data(phyfoods)$GLU_index, method = "euclidean")
adonis(formula = food2 ~ phyloseq::sample_data(phyfoods)$GLU_index, method = "euclidean")
adonis(formula = as.data.frame(t(food2)) ~ phyloseq::sample_data(phyfoods)$GLU_index, method = "euclidean")
