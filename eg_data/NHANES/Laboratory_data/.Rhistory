# Make sure the labels in the legend are correct.
males50s_KCALfreq <- ggplot(data=glu_3_males50s, aes(x=KCAL, group=GLU_index, color=GLU_index)) +
geom_density(adjust=1.5, alpha=0.4, size=1.2, linetype="longdash") + space_axes + no_grid +
scale_color_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1")) +
labs(x="KCAL", y="Density") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
males50s_KCALfreq
# ----------------------------------------------------------------------------------------------------------------
# Look at the KCAL frequency of each group.
# Make sure the labels in the legend are correct.
males50s_KCALfreq <- ggplot(data=glu_3_males50s, aes(x=KCAL, group=GLU_index, color=GLU_index)) +
geom_density(adjust=1.5, alpha=0.4, size=1.2, linetype="longdash") + space_axes + no_grid +
scale_color_manual(values= c("aquamarine2", "lightgoldenrod2", "lightpink1")) +
labs(x="KCAL", y="Density") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
males50s_KCALfreq
# ----------------------------------------------------------------------------------------------------------------
# Look at the KCAL frequency of each group.
# Make sure the labels in the legend are correct.
males50s_KCALfreq <- ggplot(data=glu_3_males50s, aes(x=KCAL, group=GLU_index, color=GLU_index)) +
geom_density(adjust=1.5, alpha=0.4, size=1.2, linetype="longdash") + space_axes + no_grid +
scale_color_manual(values= c("aquamarine2", "lightgoldenrod3", "lightpink1")) +
labs(x="KCAL", y="Density") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
males50s_KCALfreq
# ----------------------------------------------------------------------------------------------------------------
# Look at the KCAL frequency of each group.
# Make sure the labels in the legend are correct.
males50s_KCALfreq <- ggplot(data=glu_3_males50s, aes(x=KCAL, group=GLU_index, color=GLU_index)) +
geom_density(adjust=1.5, alpha=0.4, size=1.2, linetype="longdash") + space_axes + no_grid +
scale_color_manual(values= c("aquamarine3", "lightgoldenrod3", "lightpink1")) +
labs(x="KCAL", y="Density") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
males50s_KCALfreq
# Save the chart as .png.
ggsave("eg_data/NHANES/Laboratory_data/males50s_KCAL_by_GLU_index.png", males50s_KCALfreq, device="png")
males50s_BMIfreq <- ggplot(data=glu_3_males50s, aes(x=BMXBMI, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
labs(x="BMI", y="Density")
males50s_BMIfreq <- ggplot(data=glu_3_males50s, aes(x=BMXBMI, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
labs(x="BMI", y="Density")
males50s_BMIfreq
# Make sure the labels in the legend are correct.
BMIfreq <- ggplot(data=glu_2, aes(x=BMXBMI, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("steelblue3", "yellow", "hotpink") ) +
labs(x="BMI", y="Density")
BMIfreq
males50s_BMIfreq <- ggplot(data=glu_3_males50s, aes(x=BMXBMI, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=0.4) + space_axes + no_grid +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
labs(x="BMI", y="Density")
males50s_BMIfreq
# Save the chart as .png.
ggsave("eg_data/NHANES/Laboratory_data/males50s_BMI_by_GLU_index.png", males50s_BMIfreq, device="png")
# ----------------------------------------------------------------------------------------------------------------
# Body weight
# Make sure the labels in the legend are correct.
weightfreq <- ggplot(data=glu_3_males50s, aes(x=BMXWT, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
labs(x="Body weight (kg)", y="Density")
weightfreq
# ----------------------------------------------------------------------------------------------------------------
# Body weight
# Make sure the labels in the legend are correct.
weightfreq <- ggplot(data=glu_3_males50s, aes(x=BMXWT, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
labs(x="Body weight (kg)", y="Density")
weightfreq
ggsave("eg_data/NHANES/Laboratory_data/males50s_weight_by_GLU_index.png", weightfreq,  device="png")
# ----------------------------------------------------------------------------------------------------------------
# Look at the KCAL frequency of each group.
# Make sure the labels in the legend are correct.
males50s_KCALfreq <- ggplot(data=glu_3_males50s, aes(x=KCAL, group=GLU_index, color=GLU_index)) +
geom_density(adjust=1.5, alpha=0.4, size=1.2, linetype="longdash") + space_axes + no_grid +
scale_color_manual(values= c("aquamarine3", "lightgoldenrod3", "lightpink1")) +
labs(x="KCAL", y="Density") +
scale_y_continuous(labels= function(x) format(x, scientific = FALSE))
males50s_KCALfreq
# Save the chart as .png.
ggsave("eg_data/NHANES/Laboratory_data/males50s_KCAL_by_GLU_index.png", males50s_KCALfreq, device="png")
males50s_BMIfreq <- ggplot(data=glu_3_males50s, aes(x=BMXBMI, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=0.4) + space_axes + no_grid +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
labs(x="BMI", y="Density")
males50s_BMIfreq
# Save the chart as .png.
ggsave("eg_data/NHANES/Laboratory_data/males50s_BMI_by_GLU_index.png", males50s_BMIfreq, device="png")
# ----------------------------------------------------------------------------------------------------------------
# Body weight
# Make sure the labels in the legend are correct.
weightfreq <- ggplot(data=glu_3_males50s, aes(x=BMXWT, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
labs(x="Body weight (kg)", y="Density")
weightfreq
ggsave("eg_data/NHANES/Laboratory_data/males50s_weight_by_GLU_index.png", weightfreq,  device="png")
# ----------------------------------------------------------------------------------------------------------------
# Create a boxplot of KCAL of each GLU_index group.
KCAL_dots_males50s <- ggplot(glu_3_males50s, aes(x=GLU_index, y=KCAL)) +
geom_boxplot(outlier.shape = NA) + no_grid + space_axes +
geom_jitter(width=0.3)
KCAL_dots_males50s
# ----------------------------------------------------------------------------------------------------------------
# Create a boxplot of KCAL of each GLU_index group.
KCAL_dots_males50s <- ggplot(glu_3_males50s, aes(x=GLU_index, y=KCAL, fill="GLU_index")) +
geom_boxplot(outlier.shape = NA) + no_grid + space_axes +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
geom_jitter(width=0.3)
KCAL_dots_males50s
# ----------------------------------------------------------------------------------------------------------------
# Create a boxplot of KCAL of each GLU_index group.
KCAL_dots_males50s <- ggplot(glu_3_males50s, aes(x=GLU_index, y=KCAL, fill="GLU_index")) +
geom_boxplot(outlier.shape = NA, aes(fill="GLU_index")) + no_grid + space_axes +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
geom_jitter(width=0.3)
KCAL_dots_males50s
# ----------------------------------------------------------------------------------------------------------------
# Create a boxplot of KCAL of each GLU_index group.
KCAL_dots_males50s <- ggplot(glu_3_males50s, aes(x=GLU_index, y=KCAL, fill="GLU_index")) +
geom_boxplot(outlier.shape = NA, aes(color="GLU_index")) + no_grid + space_axes +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
geom_jitter(width=0.3)
KCAL_dots_males50s
# ----------------------------------------------------------------------------------------------------------------
# Create a boxplot of KCAL of each GLU_index group.
KCAL_dots_males50s <- ggplot(glu_3_males50s, aes(x=GLU_index, y=KCAL, fill="GLU_index")) +
geom_boxplot(outlier.shape = NA) + no_grid + space_axes +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
geom_jitter(width=0.3)
KCAL_dots_males50s
# ----------------------------------------------------------------------------------------------------------------
# Create a boxplot of KCAL of each GLU_index group.
KCAL_dots_males50s <- ggplot(glu_3_males50s, aes(x=GLU_index, y=KCAL, fill=GLU_index)) +
geom_boxplot(outlier.shape = NA) + no_grid + space_axes +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
geom_jitter(width=0.3)
KCAL_dots_males50s
ggsave("eg_data/NHANES/Laboratory_data/males50s_KCAL_by_GLU_index_box_males50s.png",
males50s_KCAL, device="png")
# ----------------------------------------------------------------------------------------------------------------
# Create a boxplot of KCAL of each GLU_index group.
males50s_KCAL <- ggplot(glu_3_males50s, aes(x=GLU_index, y=KCAL, fill=GLU_index)) +
geom_boxplot(outlier.shape = NA) + no_grid + space_axes +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
geom_jitter(width=0.3)
males50s_KCAL
ggsave("eg_data/NHANES/Laboratory_data/males50s_KCAL_by_GLU_index_box_males50s.png",
males50s_KCAL, device="png")
table(glu_3$RIDAGEYR)
# Gender - no missing data. 1: male, 2: female.
table(glu_3$RIAGENDR)
summary(glu_3$RIAGENDR)
table(glu_3_males50s$RIDAGEYR)
table(glu_3_males50s$GLU_index)
# Age - no missing data.
hist(glu_3$RIDAGEYR)
table(glu_3_males50s$RIDAGEYR)
table(glu_3_males50s$GLU_index)
View(glu_3_males50s)
dim(glu_3_males50s)
males50s_BMIfreq <- ggplot(data=glu_3_males50s, aes(x=BMXBMI, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=0.4) + space_axes + no_grid +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
labs(x="BMI", y="Density")
males50s_BMIfreq
# ----------------------------------------------------------------------------------------------------------------
# Body weight
# Make sure the labels in the legend are correct.
weightfreq <- ggplot(data=glu_3_males50s, aes(x=BMXWT, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
labs(x="Body weight (kg)", y="Density")
weightfreq
setwd("~/GitHub/dietary_patterns/eg_data/NHANES/Laboratory_data/")
# Load the necessary functions
source("../../../lib/prep_data_for_clustering.R")
source("../../../lib/PCA.R")
source("../../../lib/k-means.R")
# ---------------------------------------------------------------------------------------------------------------
# Load the glu_3_males50s data.
glu_3_males50s <- read.table("QCtotalANDglu_body_meta_demo_males50s.txt",
sep="\t", header=T)
# There should be 124 individuals (rows)
dim(glu_3_males50s)
# Define which columns to drop.
drops <- c("KCAL","GRMS", "MOIS", "NoOfItems")
# Take only the columns whose names are NOT in the drop vector.
aaa <- glu_3_males50s[ , !(names(glu_3_males50s) %in% drops)]
dim(glu_3_males50s)
dim(aaa)
# Define the input data to be used.
input_data <- aaa
# Define the input data to be used.
input_data <- aaa
colnames(input_data)
# are BMI and weight correlated?
scatter(glu_3_males50s$BMXBMI, glu_3_males50s$BMIWT)
# are BMI and weight correlated?
plot(glu_3_males50s$BMXBMI, glu_3_males50s$BMIWT)
glu_3_males50s$BMXBMI
View(glu_3_males50s)
# There should be 124 individuals (rows)
dim(glu_3_males50s)
View(glu_3_males50s)
glu_3_males50s$BMIWT
# are BMI and weight correlated?
plot(glu_3_males50s$BMXBMI, glu_3_males50s$BMXWT)
cor.test(glu_3_males50s$BMXBMI, glu_3_males50s$BMXWT)
dim(aaa)
colnames(aaa)
# ----------------------------------------------------------------------------------------------------------------
# Body weight
# Make sure the labels in the legend are correct.
weightfreq <- ggplot(data=glu_3_males50s, aes(x=BMXWT, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
labs(x="Body weight (kg)", y="Density")
weightfreq
# make GLU_index as a factor for plotting.
glu_3_males50s$GLU_index <- factor(glu_3_males50s$GLU_index,
levels = c('Normal', 'Prediabetic', 'Diabetic'))
# are BMI and weight correlated? - Yes.
plot(glu_3_males50s$BMXBMI, glu_3_males50s$BMXWT)
cor.test(glu_3_males50s$BMXBMI, glu_3_males50s$BMXWT)
# ---------------------------------------------------------------------------------------------------------------
# The columns specified as start.col, end.col, and all columns in between will be selected.
# Nutrients
# SubsetColumns(data=input_data, start.col="PROT", end.col="P226")
# The output is a df called "subsetted".
# Take  start.col="PROT" through end.col="P226" plus, "BMXBMI" and "BMXWT".
start_col <- match("PROT" , names(aaa))
end_col   <- match("P226" , names(aaa))
# ---------------------------------------------------------------------------------------------------------------
# The columns specified as start.col, end.col, and all columns in between will be selected.
# Nutrients
# SubsetColumns(data=input_data, start.col="PROT", end.col="P226")
# The output is a df called "subsetted".
# Take  start.col="PROT" through end.col="P226" plus, "BMXBMI" and "BMXWT".
BMI_col   <- match("BMXBMI" , names(aaa))
WT_col    <- match("BMXWT" ,  names(aaa))
start_col <- match("PROT" , names(aaa))
end_col   <- match("P226" , names(aaa))
nut_bmi <- aaa[ , c(BMI_col, WT_col, start_col:end_col)]
head(nut_bmi)
head(nut_bmi, 1)
head(subsetted, 1)
head(subsetted, 1)
# Pick up BMI, weight, and nutrient variables.
subsetted <- aaa[ , c(BMI_col, WT_col, start_col:end_col)]
head(subsetted, 1)
# Pick up only the columns with non-zero variance, in order to run PCA, cluster analysis etc.
# The removed columns will be shown if any.
KeepNonZeroVarColumns(data = subsetted)
# Check the columns (variables) remained.
colnames(subsetted_non0var)
dim(subsetted_non0var)
# ---------------------------------------------------------------------------------------------------------------
# Collapse variables by correlation: take only one variable if they are highly correlated.
cbc_res <- CollapseByCorrelation(x = subsetted_non0var,
min.cor = 0.75,
select.rep.fcn = 'mean', verbose = T)
# Filter out highly correlated variables from the original dataset.
selected_variables <- subsetted_non0var[, cbc_res$reps]
# Check to see the name of the original and filtered variables.
# Among the variables in the same group, the one with the highest variance is kept
#  (according to the explanation above.)
# filtered
head(selected_variables, 1)
dim( selected_variables)
# ---------------------------------------------------------------------------------------------------------------
# Save the variables after removing correlated variables
write.table(selected_variables,
"males50s_QCtotalANDglu_body_meta_demo_Nut_rv.txt",
sep="\t", row.names=F, quote=F)
# ---------------------------------------------------------------------------------------------------------------
# Save the correlation matrix for record in the results folder.
# cc is the correlation matrix produced when variables are collapsed by correlation.
SaveCorrMatrix(x=cc,
out.fn = "males50s_QCtotalANDglu_body_meta_demo_Nut_corr_mat.txt")
# Your input data should be a data frame with variables with non-zero variance.
pca_input <- read.table("males50s_QCtotalANDglu_body_meta_demo_Nut_rv.txt",
sep="\t", header=T)
# Ensure your input file has the correct number of rows and columns.
dim(pca_input)
# Perform PCA with the subset data, scaled.
scaled_pca <- prcomp(x= pca_input, scale= TRUE)
# Specify the directory (folder) to save the results.
res_dir_Nut = "males50s_Nut_PCA"
# Specify the prefix of filenames to be saved.
res_prefix_Nut = "males50s_Nut"
# Perform PCA and save the results in a specified folder (out.dir) and a prefix (out.prefix).
PerformPCA(pca.data=pca_input, pca.result=scaled_pca,
out.dir= res_dir_nut, out.prefix= res_prefix_nut)
# Perform PCA and save the results in a specified folder (out.dir) and a prefix (out.prefix).
PerformPCA(pca.data=pca_input, pca.result=scaled_pca,
out.dir= res_dir_Nut, out.prefix= res_prefix_nut)
# Perform PCA and save the results in a specified folder (out.dir) and a prefix (out.prefix).
PerformPCA(pca.data=pca_input, pca.result=scaled_pca,
out.dir= res_dir_Nut, out.prefix= res_prefix_Nut)
# Combine the input (totals before processing) with all the variables and the PC results.
# Input is your items/totals input file before any prep for clustering, from which you derived the input for the PCA.
SaveInputAndPCs(input="QCtotalANDglu_body_meta_demo_males50s.txt", pca.results = scaled_pca,
out.dir= res_dir_Nut, out.prefix= res_prefix_Nut)
# Load the input & PC info.
Nut_PCs <- read.table("males50s_Nut_PCA/males50s_Nut_PCs.txt", sep="\t", header=T)
# Change to a factor so that factors will be displayed in order.
Nut_PCs$GLU_index <- factor(Nut_PCs$GLU_index, levels= c("Normal", "Prediabetic", "Diabetic"))
head(Nut_PCs)
dim(Nut_PCs)
ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(fill=GLU_index), size=3) +
theme_bw(base_size = 14)
# Use the autoplot function.
foodnut_PCA <- autoplot(scaled_pca, loadings=T, loadings.label=T, loadings.colour = 'grey50',  # loadings.label=T if want to see it
data = input_data,  size= 3 ) +
# coord_cartesian(xlim =c(-0.2, 0.2), ylim = c(-0.2, 0.25)) +
geom_point(size = 3, alpha = 1, na.rm = T, shape = 21,  aes(fill= GLU_index)) +
theme_bw(base_size = 12) + theme(aspect.ratio = 1) +
# xlim(-0.3, 0.2) + ylim(-0.3, 0.2) +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_fill_manual( values= c("hotpink",   "steelblue3", "yellow"))
foodnut_PCA
# Quick look.
ggplot(data= Nut_PCs, aes(x=PC2, y=PC3, color= GLU_index)) +
geom_point(aes(fill=GLU_index), size=3) +
theme_bw(base_size = 14)
# Quick look.
ggplot(data= Nut_PCs, aes(x=PC2, y=PC3, color= GLU_index)) +
geom_point(aes(fill=GLU_index), size=3) +
theme_bw(base_size = 14) +
stat_ellipse(level=0.95)
# Quick look.
ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(fill=GLU_index), size=3) +
theme_bw(base_size = 14) +
stat_ellipse(level=0.95)
# Use the autoplot function.
foodnut_PCA <- autoplot(scaled_pca, loadings=T, loadings.label=T, loadings.colour = 'grey50',  # loadings.label=T if want to see it
data = input_data,  size= 3 ) +
# coord_cartesian(xlim =c(-0.2, 0.2), ylim = c(-0.2, 0.25)) +
geom_point(size = 3, alpha = 1, na.rm = T, shape = 21,  aes(fill= GLU_index)) +
theme_bw(base_size = 12) + theme(aspect.ratio = 1) +
# xlim(-0.3, 0.2) + ylim(-0.3, 0.2) +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_fill_manual( values= c("hotpink",  "steelblue3", "yellow"))
foodnut_PCA
ggsave("males50s_Nut_PCA/males50s_Nut_PCA_by_GLU_index.png", foodnut_PCA,
device="png", width=7, height=6.5)
# Use the autoplot function.
foodnut_PCA <- autoplot(scaled_pca, x=2, y=3,
loadings=T, loadings.label=T, loadings.colour = 'grey50',  # loadings.label=T if want to see it
data = input_data,  size= 3 ) +
# coord_cartesian(xlim =c(-0.2, 0.2), ylim = c(-0.2, 0.25)) +
geom_point(size = 3, alpha = 1, na.rm = T, shape = 21,  aes(fill= GLU_index)) +
theme_bw(base_size = 12) + theme(aspect.ratio = 1) +
# xlim(-0.3, 0.2) + ylim(-0.3, 0.2) +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_fill_manual( values= c("hotpink",  "steelblue3", "yellow"))
foodnut_PCA
# Ellipses.
ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(fill=GLU_index), size=3) + no_grid +
theme_bw(base_size = 12) +
scale_fill_manual( values= c("hotpink",  "steelblue3", "yellow")) +
stat_ellipse(level=0.95)
# Ellipses.
ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(fill=GLU_index), size=3) +
theme_bw(base_size = 12) + no_grid +
scale_fill_manual( values= c("hotpink",  "steelblue3", "yellow")) +
stat_ellipse(level=0.95)
# Use the autoplot function.
foodnut_PCA <- autoplot(scaled_pca, x=2, y=3,
loadings=T, loadings.label=T, loadings.colour = 'grey50',  # loadings.label=T if want to see it
data = input_data,  size= 3 ) +
# coord_cartesian(xlim =c(-0.2, 0.2), ylim = c(-0.2, 0.25)) +
geom_point(size = 3, alpha = 1, na.rm = T, shape = 21,  aes(fill= GLU_index)) +
theme_bw(base_size = 12) + theme(aspect.ratio = 1) +
# xlim(-0.3, 0.2) + ylim(-0.3, 0.2) +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_fill_manual( values= c("hotpink",  "steelblue3", "yellow"))
# Ellipses.
ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(fill=GLU_index), size=3) +
theme_bw(base_size = 12) + no_grid +
scale_color_manual( values= c("hotpink",  "steelblue3", "yellow")) +
stat_ellipse(level=0.95)
# Ellipses.
ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(fill=GLU_index), size=3, color='black') +
theme_bw(base_size = 12) + no_grid +
scale_color_manual( values= c("hotpink",  "steelblue3", "yellow")) +
stat_ellipse(level=0.95)
# Ellipses.
ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(fill=GLU_index, color='black'), size=3 ) +
theme_bw(base_size = 12) + no_grid +
scale_color_manual( values= c("hotpink",  "steelblue3", "yellow")) +
stat_ellipse(level=0.95)
# Ellipses.
ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, fill= GLU_index)) +
geom_point(aes(fill=GLU_index), size=3 , color="black" ) +
theme_bw(base_size = 12) + no_grid +
scale_color_manual( values= c("hotpink",  "steelblue3", "yellow")) +
stat_ellipse(level=0.95)
# Ellipses.
ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, fill= GLU_index)) +
geom_point(aes(fill=GLU_index), size=3 ) +
theme_bw(base_size = 12) + no_grid +
scale_color_manual( values= c("hotpink",  "steelblue3", "yellow")) +
stat_ellipse(level=0.95)
# Ellipses.
ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(color=GLU_index), size=3 ) +
theme_bw(base_size = 12) + no_grid +
scale_color_manual( values= c("hotpink",  "steelblue3", "yellow")) +
stat_ellipse(level=0.95)
# Ellipses.
ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(color=GLU_index), size=3, color="black" ) +
theme_bw(base_size = 12) + no_grid +
scale_color_manual( values= c("hotpink",  "steelblue3", "yellow")) +
stat_ellipse(level=0.95)
# Ellipses.
ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(color=GLU_index), size=3 ) +
theme_bw(base_size = 12) + no_grid +
scale_color_manual( values= c("hotpink",  "steelblue3", "yellow")) +
stat_ellipse(level=0.95)
# Ellipses.
ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(color=GLU_index), size=3 ) +
theme_bw(base_size = 12) + no_grid +
scale_color_manual( values= c("aquamarine2", "lightgoldenrod1", "lightpink1")) +
stat_ellipse(level=0.95)
# Ellipses.
ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(color=GLU_index), size=3 ) +
theme_bw(base_size = 12) + no_grid +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink")) +
stat_ellipse(level=0.95)
# Use the autoplot function.
foodnut_PCA <- autoplot(scaled_pca, x=2, y=3,
loadings=T, loadings.label=T, loadings.colour = 'grey50',  # loadings.label=T if want to see it
data = input_data,  size= 3 ) +
# coord_cartesian(xlim =c(-0.2, 0.2), ylim = c(-0.2, 0.25)) +
geom_point(size = 3, alpha = 1, na.rm = T, shape = 21,  aes(fill= GLU_index)) +
theme_bw(base_size = 12) + theme(aspect.ratio = 1) +
# xlim(-0.3, 0.2) + ylim(-0.3, 0.2) +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_fill_manual( values= c("hotpink",  "steelblue3", "yellow"))
foodnut_PCA
# Ellipses.
ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(color=GLU_index), size=3 ) +
theme_bw(base_size = 12) + no_grid + theme(aspect.ratio = 1)
# Ellipses.
ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(color=GLU_index), size=3 ) +
theme_bw(base_size = 12) + no_grid + theme(aspect.ratio = 1) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink")) +
stat_ellipse(level=0.95)
# Use the autoplot function.
foodnut_PCA <- autoplot(scaled_pca, x=1, y=2,  # Specify which PC
loadings=T, loadings.label=T, loadings.colour = 'grey50',  # loadings.label=T if want to see it
data = input_data,  size= 3 ) +
# coord_cartesian(xlim =c(-0.2, 0.2), ylim = c(-0.2, 0.25)) +
geom_point(size = 3, alpha = 1, na.rm = T, shape = 21,  aes(fill= GLU_index)) +
theme_bw(base_size = 12) + theme(aspect.ratio = 1) +
# xlim(-0.3, 0.2) + ylim(-0.3, 0.2) +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_fill_manual( values= c("hotpink",  "steelblue3", "yellow"))
foodnut_PCA
ggsave("males50s_Nut_PCA/males50s_Nut_PCA_by_GLU_index_PC12.png", foodnut_PCA,
device="png", width=7, height=6.5)
# Use the autoplot function.
foodnut_PCA <- autoplot(scaled_pca, x=2, y=3,  # Specify which PC
loadings=T, loadings.label=T, loadings.colour = 'grey50',  # loadings.label=T if want to see it
data = input_data,  size= 3 ) +
# coord_cartesian(xlim =c(-0.2, 0.2), ylim = c(-0.2, 0.25)) +
geom_point(size = 3, alpha = 1, na.rm = T, shape = 21,  aes(fill= GLU_index)) +
theme_bw(base_size = 12) + theme(aspect.ratio = 1) +
# xlim(-0.3, 0.2) + ylim(-0.3, 0.2) +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_fill_manual( values= c("hotpink",  "steelblue3", "yellow"))
foodnut_PCA
ggsave("males50s_Nut_PCA/males50s_Nut_PCA_by_GLU_index_PC23.png", foodnut_PCA,
device="png", width=7, height=6.5)
# Ellipses.
ell <- ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(color=GLU_index), size=3 ) +
theme_bw(base_size = 12) + no_grid + theme(aspect.ratio = 1) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink")) +
stat_ellipse(level=0.95)
ell
ggsave("males50s_Nut_PCA/males50s_Nut_PCA_by_GLU_index_PC12_ell.png", ell,
device="png", width=7, height=6.5)
# Ellipses.
ell <- ggplot(data= Nut_PCs, aes(x=PC2, y=PC3, color= GLU_index)) +
geom_point(aes(color=GLU_index), size=3 ) +
theme_bw(base_size = 12) + no_grid + theme(aspect.ratio = 1) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink")) +
stat_ellipse(level=0.95)
ell
ggsave("males50s_Nut_PCA/males50s_Nut_PCA_by_GLU_index_PC23_ell.png", ell,
device="png", width=7, height=6.5)
