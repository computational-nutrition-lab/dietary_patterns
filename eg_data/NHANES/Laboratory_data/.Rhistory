# Test if the two variables are correlated.
# The output should show p-value and R correlation coefficient
cor.test(x=tot_m_QCed$TFAT, y=tot_m_QCed$KCAL, method="pearson")
# Prepare your totals dataset for line plot - insert NA to missing combinations of UserName and RecallNo (day),
# and separate rows into NA's and no NAs.
PrepLinePlot(inputdf= tot_m_QCed, day="RecallNo", username="UserName",
all.fn=           "VVKAJ_Tot_m_QCed_wNA.txt",
full.days.only.fn="VVKAJ_Tot_m_QCed_fullonly.txt",
partial.days.only.fn="VVKAJ_Tot_m_QCed_partialonly.txt")
# Load the files.
tot_m_QCed_w_NA <-        read.table("VVKAJ_Tot_m_QCed_wNA.txt", sep="\t", header=T)
tot_m_QCed_fullonly <-    read.table("VVKAJ_Tot_m_QCed_fullonly.txt", sep="\t", header=T)
tot_m_QCed_partialonly <- read.table("VVKAJ_Tot_m_QCed_partialonly.txt", sep="\t", header=T)
# Make RecallNo (day) as a factor.
tot_m_QCed$RecallNo <-             as.factor(tot_m_QCed$RecallNo)
tot_m_QCed_w_NA$RecallNo <-        as.factor(tot_m_QCed_w_NA$RecallNo)
tot_m_QCed_fullonly$RecallNo <-    as.factor(tot_m_QCed_fullonly$RecallNo)
tot_m_QCed_partialonly$RecallNo <- as.factor(tot_m_QCed_partialonly$RecallNo)
# Plot points and lines separately.  Specify your "x" and "y" twice.
# The geom_line function only connects the data of individuals with all days of data.
ggplot() +
geom_point(tot_m_QCed,          mapping = aes(x=RecallNo, y=TFAT, group=UserName, color=UserName)) +
geom_line( tot_m_QCed_fullonly, mapping = aes(x=RecallNo, y=TFAT, group=UserName, color=UserName),
linetype="dashed") + no_grid +
scale_color_manual(values = distinct100colors)
# Plot points and lines separately.  Specify your "x" and "y" twice.
# The geom_line function only connects the data of individuals with all days of data.
lineplot_1 <- ggplot() +
geom_point(tot_m_QCed,          mapping = aes(x=RecallNo, y=SUGR, group=UserName, color=UserName)) +
geom_line( tot_m_QCed_fullonly, mapping = aes(x=RecallNo, y=SUGR, group=UserName, color=UserName),
linetype="dashed") + no_grid +
scale_color_manual(values = distinct100colors)
lineplot_1
# Plot points and lines separately.  Specify your "x" and "y" twice.
# The geom_line function only connects the data of individuals with all days of data.
lineplot_1 <- ggplot() +
geom_point(tot_m_QCed,          mapping = aes(x=RecallNo, y=BCAR, group=UserName, color=UserName)) +
geom_line( tot_m_QCed_fullonly, mapping = aes(x=RecallNo, y=BCAR, group=UserName, color=UserName),
linetype="dashed") + no_grid +
scale_color_manual(values = distinct100colors)
lineplot_1
# Plot points and lines separately.  Specify your "x" and "y" twice.
# The geom_line function only connects the data of individuals with all days of data.
lineplot_1 <- ggplot() +
geom_point(tot_m_QCed,          mapping = aes(x=RecallNo, y=ALC, group=UserName, color=UserName)) +
geom_line( tot_m_QCed_fullonly, mapping = aes(x=RecallNo, y=ALC, group=UserName, color=UserName),
linetype="dashed") + no_grid +
scale_color_manual(values = distinct100colors)
lineplot_1
# Plot points and lines separately.  Specify your "x" and "y" twice.
# The geom_line function only connects the data of individuals with all days of data.
lineplot_1 <- ggplot() +
geom_point(tot_m_QCed,          mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName)) +
geom_line( tot_m_QCed_fullonly, mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName),
linetype="dashed") + no_grid +
scale_color_manual(values = distinct100colors)
lineplot_1
# Plot points and lines separately.  Specify your "x" and "y" twice.
# The geom_line function only connects the data of individuals with all days of data.
lineplot_1 <- ggplot() +
geom_point(tot_m_QCed,          mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName)) +
geom_line( tot_m_QCed_fullonly, mapping = aes(x=RecallNo, y=KCAL, group=UserName, color=UserName),
linetype="dashed") + no_grid +
scale_color_manual(values = distinct100colors)
lineplot_1
# Save it as a .pdf file.
ggsave("VVKAJ_Tot_m_QCed_KCAL_lineplot.pdf", lineplot_1, device="pdf")
# Come back to the main directory
setwd(main_wd)
# ========================================================================================
# Load source scripts
# ========================================================================================
source("lib/specify_dir_and_check_col.R")
source("lib/Food_tree_scripts/newick.tree.r")
source("lib/Food_tree_scripts/check.db.r")
source("lib/Food_tree_scripts/format.foods.r")
source("lib/Food_tree_scripts/filter.db.by.diet.records.r")
source("lib/Food_tree_scripts/make.food.tree.r")
source("lib/Food_tree_scripts/make.food.otu.r")
source("lib/Food_tree_scripts/make.fiber.otu.r")
source("lib/Food_tree_scripts/make.dhydrt.otu.r")
# Load the functions necessary to set directories.
source("lib/specify_dir_and_check_col.R")
# ---------------------------------------------------------------------------------------------------------------
# If you have not downloaded and installed the phyloseq package yet,
# you can do so by first installing BiocManager (if you have not done so):
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# ---------------------------------------------------------------------------------------------------------------
# If you have not downloaded and installed the phyloseq package yet,
# you can do so by first installing BiocManager (if you have not done so):
if (!require("BiocManager", quietly = TRUE)) install.packages("BiocManager")
# Load the necessary scripts.
source("lib/unifrac_ordination.R")
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/")
# Food
# Load food OTU table - this is our food OTU data
# food <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_ASA24/mct.reduced_4Lv.dhydrt.otu.txt", row.names = 1)
# food <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.dhydrt.otu.txt", row.names = 1)
food <- read.delim("Foodtree/VVKAJ_Items_f_id_s__m_ff_reduced_4Lv.food.otu.txt", row.names = 1)
# Food
# Load food OTU table - this is our food OTU data
# food <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_ASA24/mct.reduced_4Lv.dhydrt.otu.txt", row.names = 1)
# food <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.dhydrt.otu.txt", row.names = 1)
food <- read.delim("Foodtree/VVKAJ_Items_f_id_s_m_ff_reduced_4Lv.food.otu.txt", row.names = 1)
# Current ASA24 database doesn't have modcodes, so de-duplicate database file,
# replace special characters with "_", and create a new FoodID out of foodcode and modcode.
# It leaves all other columns intact.
FormatFoods(input_fn="data/Food_tree_data/all.food.desc.txt", output_fn="data/Food_tree_data/ASA24Database.txt")
# Come back to the main directory
setwd(main_wd)
# ========================================================================================
# Load source scripts
# ========================================================================================
source("lib/specify_dir_and_check_col.R")
# Current ASA24 database doesn't have modcodes, so de-duplicate database file,
# replace special characters with "_", and create a new FoodID out of foodcode and modcode.
# It leaves all other columns intact.
FormatFoods(input_fn="data/Food_tree_data/all.food.desc.txt", output_fn="data/Food_tree_data/ASA24Database.txt")
# FoodCode and Main.food.description of additional foods not in ASA24. Format it for use.
FormatFoods(input_fn="data/Food_tree_data/Soylent_codes.txt", output_fn="data/Food_tree_data/Soylent_codes_formatted.txt")
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/")
# Create a folder called "Foodtree" in the current working directory ("VVKAJ").
# Format your items data, and save the formatted items file to the "Foodtree" folder.
FormatFoods(input_fn="VVKAJ_Items_f_id_s_m.txt",
output_fn="Foodtree/VVKAJ_Items_f_id_s_m_ff.txt", dedupe=F)
# Come back to the main directory for now.
setwd(main_wd)
# Generate a tree with the whole ASA24 food database first.
# if there are missing foods, then create new files to add them in below under addl_foods
MakeFoodTree(nodes_fn=        "data/Food_tree_data/NodeLabelsMCT.txt",
food_database_fn="data/Food_tree_data/ASA24Database.txt",
addl_foods_fn= c("data/Food_tree_data/Soylent_codes_formatted.txt"),
num.levels = 4,  # How many levels of foods to be classified
output_taxonomy_fn = "data/Food_tree_ASA24/ASA24_Lv4.taxonomy_2.txt",  # Name your output taxonomy file
output_tree_fn=      "data/Food_tree_ASA24/ASA24_Lv4.tree_2.nwk"       # Name your output tree
)
# Specify the directory where the data is again.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/Foodtree")
# Limit to just the foods reported in your study (formatted dietrecords.txt as the input)
FilterDbByDietRecords(food_database_fn = "../../../data/Food_tree_data/ASA24Database.txt",
food_records_fn  = "VVKAJ_Items_f_id_s_m_ff.txt",   # output of FormatFoods above.
output_fn        = "VVKAJ_Items_f_id_s_m_ff_database.txt")
# Make a food tree with the reduced data.
MakeFoodTree(nodes_fn=         "../../../data/Food_tree_data/NodeLabelsMCT.txt",
food_database_fn= "VVKAJ_Items_f_id_s_m_ff_database.txt",    # output for FilterDbByDietRecords above.
addl_foods_fn   = NULL,
num.levels      = 4,
output_taxonomy_fn = "VVKAJ_Items_f_id_s_m_ff_reduced_4Lv.tax.txt",
output_tree_fn=      "VVKAJ_Items_f_id_s_m_ff_reduced_4Lv.tree.nwk"
)
# ========================================================================================
# Generate standard, grams of fiber, and dehydrated grams per kcal OTU tables to be used later.
# ========================================================================================
# Make the standard food otu table with data in gram weights of food.
# It is OK to see see a warning message:
# In write.table(dhydrt.otu, output_fn, sep = "\t", quote = F, append = TRUE) :
#   appending column names to file
MakeFoodOtu(food_records_fn=  "VVKAJ_Items_f_id_s_m_ff.txt",
food_record_id =  "SampleID",               # Specify SampleID (User x Day)
food_taxonomy_fn= "VVKAJ_Items_f_id_s_m_ff_reduced_4Lv.tax.txt",  # Specify your taxonomy file produced by MakeFoodTree.
output_fn =       "VVKAJ_Items_f_id_s_m_ff_reduced_4Lv.food.otu.txt")  # Name your output otu file.
# Make a food otu table with data in grams of fiber per food
MakeFiberOtu(food_records_fn=  "VVKAJ_Items_f_id_s_m_ff.txt",
food_record_id=   "SampleID",
food_taxonomy_fn= "VVKAJ_Items_f_id_s_m_ff_reduced_4Lv.tax.txt",
output_fn=        "VVKAJ_Items_f_id_s_m_ff_reduced_4Lv.fiber.otu.txt")
# Make a food otu table as dehydrated grams per kcal.
MakeDhydrtOtu(food_records_fn=  "VVKAJ_Items_f_id_s_m_ff.txt",
food_record_id =  "SampleID",
food_taxonomy_fn= "VVKAJ_Items_f_id_s_m_ff_reduced_4Lv.tax.txt",
output_fn =       "VVKAJ_Items_f_id_s_m_ff_reduced_4Lv.dhydrt.otu.txt")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Load the source script as well.
source("lib/viz_food_tree.r")
# Go to the "Foodtree" directory where the tree files are saved.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/Foodtree")
# Load the generated food tree. This will load the .nwk file and save it as a tree object called "tree".
# It is OK to see a message saying:
# Found more than one class "phylo" in cache; using the first, from namespace 'phyloseq'
# Also defined by 'tidytree'
tree <- read.tree("VVKAJ_Items_f_id_s_m_ff_reduced_4Lv.tree.nwk")
# Load the source script as well.
source("lib/viz_food_tree.r")
# Name your main directory for future use.
main_wd <- file.path(getwd())
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Load the source script as well.
source("lib/viz_food_tree.r")
# Go to the "Foodtree" directory where the tree files are saved.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/Foodtree")
# Load the generated food tree. This will load the .nwk file and save it as a tree object called "tree".
# It is OK to see a message saying:
# Found more than one class "phylo" in cache; using the first, from namespace 'phyloseq'
# Also defined by 'tidytree'
tree <- read.tree("VVKAJ_Items_f_id_s_m_ff_reduced_4Lv.tree.nwk")
tree
# ---------------------------------------------------------------------------------------------------------------
# Prepare node labels of L1 for plotting. It assumes that the tree file has 9 L1 levels.
PrepFoodTreePlots(input.tree=tree)
# Create a color-coded and annotated food tree with 9 L1 levels.
# Choose either 'circular' or 'radial' for layout.
# It is OK to see some warning messages about Coordinate system and scale for 'y' already being present.
VizFoodTree(input.tree=tree, layout="radial")
# Look at the color-coded and annotated food tree, saved as annotated_tree.
annotated_tree
# Save the tree as a PDF file.
ggsave("VVKAJ_Items_f_id_s_m_ff_reduced_4Lv.tree.pdf", annotated_tree, device="pdf", width=6, height=6, units="in", dpi=300)
# load the necessary packages.
library(phyloseq)
library(ggtree)
library(ggplot2)
# Come back to the main directory if necessary.
setwd(main_wd)
# Load ggplot formatting themes
source("lib/ggplot2themes.R")
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/")
# Food
# Load food OTU table - this is our food OTU data
# food <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_ASA24/mct.reduced_4Lv.dhydrt.otu.txt", row.names = 1)
# food <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.dhydrt.otu.txt", row.names = 1)
food <- read.delim("Foodtree/VVKAJ_Items_f_id_s_m_ff_reduced_4Lv.food.otu.txt", row.names = 1)
# "food" is a matrix of Food descriptions (rows) x SampleID (columns).
head(food)
# Format the food file and create a otu_table called OTU.
PrepFood(data= food)
# Taxonomy (tax)
# tax <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_ASA24/mct.reduced_4Lv.taxonomy.txt")
# tax <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.taxonomy.txt")
tax <- read.delim("Foodtree/VVKAJ_Items_f_id_s_m_ff_reduced_4Lv.tax.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data= tax)
# Sample
# meta <- read.csv( "~/GitHub/dietary_patterns/eg_data/dietstudy/food_map_txt_Metadata_2.csv",
#                   row.names = 1, check.names = F)
# meta <- read.table( "eg_data/VVKAJ/ind_metadata.txt", sep="\t", header=T)
meta <- read.table( "ind_metadata_UserxDay.txt", sep="\t", header=T)
# Format the metadata file and save it as 'SAMPLES'.
PrepMeta(data= meta)
# Food tree
# foodtree <- read_tree("~/GitHub/dietary_patterns/results/Food_tree_ASA24/mct.reduced_4Lv.tree.nwk")
# foodtree <- read_tree("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.tree.nwk")
foodtree <- read_tree("Foodtree/VVKAJ_Items_f_id_s_m_ff_reduced_4Lv.tree.nwk")
# It is OK to see a message saying that
# "Found more than one class "phylo" in cache; using the first, from namespace 'phyloseq'
# Also defined by 'tidytree'"
# Format food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# Check your metadata
# Show the sample names.
sample_names(phyfoods)
# Show metadata.
head(sample_data(phyfoods), n=3)
# Show only the columns of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s = tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Perform Principal Coordinate Analysis (PCoA) with weighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=TRUE)
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent <- ordinated$values$Relative_eig
# Save the percent variance explained as a txt file.
# Eigen(eigen.input = eigen_percent, output.fn="results/ordinated_weighted_eigen_percent_mct_4Lv.txt")
Eigen(eigen.input = eigen_percent, output.fn="Unifrac/4Lv_ordinated_weighted_eigen_percent_2.txt")
# ===============================================================================================================
# Load NHANES15-16 data
# ===============================================================================================================
# ---------------------------------------------------------------------------------------------------------------
# Load necessary packages.
library(SASxport)
# Load necessary functions.
source("lib/load_clean_NHANES.R")
# Set where the NHANES data and food code table are.
# it is not in the eg_data folder because it's too large to save in GitHub folder.
# setwd("E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16")
setwd("~/GitHub/dietary_patterns")
# Load necessary functions.
source("lib/load_clean_NHANES.R")
source("lib/prep_data_for_clustering.R")
# Load the QC-ed total (with food categories)
QCtotal <- read.table("eg_data/NHANES/Total_D12_FC_mean_QC_1.txt", sep="\t", header=T) # filtered for KCAL, PROT, TFAT, VC, BCAR. 3992 people.
head(QCtotal)
length(unique(QCtotal$SEQN))
head(unique(QCtotal$SEQN))
tail(unique(QCtotal$SEQN))
# Set where the NHANES data and food code table are.
# it is not in the eg_data folder because it's too large to save in GitHub folder.
# setwd("E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16")
setwd("~/GitHub/dietary_patterns")
# Load necessary functions.
source("lib/load_clean_NHANES.R")
source("lib/prep_data_for_clustering.R")
# Format the food table and save it as a .txt file.
PrepareFoodCodeTable(raw.food.code.table = "eg_data/NHANES/FoodCodes_DRXFCD_I.XPT",
out.fn =              "eg_data/NHANES/FoodCodes_DRXFCD_I_f.txt")
# Load the formatted foodcode table.
foodcodetable_f <- read.table("eg_data/NHANES/FoodCodes_DRXFCD_I_f.txt", sep="\t", header=T)
foodcodetable_f[1:10, ]
# ---------------------------------------------------------------------------------------------------------------
# Load FPED15-16, needed for the AddFoodCat function.
FPED <- read.table("eg_data/NHANES/FPED/FPED_1516_forR.txt", sep="\t", header=T)
head(FPED, 1)
# Load the metadata of people, which is in Total Day 1.
metadata_raw <- read.xport("E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/DR1TOT_I.XPT")
head(metadata_raw, 2)
length(unique(metadata_raw$SEQN))
head(metadata_raw$SEQN)
head(QCtotal$SEQN)
# Load the body measure data and see.
bodymea <- read.xport("eg_data/NHANES/BodyMeasures/BMX_I.XPT")
head(bodymea, 2)
head(bodymea$SEQN)
tail(bodymea$SEQN)
# Pick up only the metadata of people in QCtotal.
keepnamesTF <- metadata_raw$SEQN %in% QCtotal$SEQN  # gives T or F for each.
head(keepnamesTF)
head(metadata_raw$SEQN)
head(QCtotal$SEQN)
table(keepnamesTF)
# Take only the participants whose names are in keepnamesTF
metadata <- metadata_raw[keepnamesTF, ]
head(metadata$SEQN)
# Load the blood  data and see.
bodymea <- read.xport("eg_data/NHANES/Laboratory_data/GLU_I.XPT")
# Load the blood  data and see.
glu <- read.xport("eg_data/NHANES/Laboratory_data/GLU_I.XPT")
# Load the body measure data and see.
bodymea <- read.xport("eg_data/NHANES/BodyMeasures/BMX_I.XPT")
head(glu, 2)
tail(glu$SEQN)
head(glu$SEQN)
dim(glu)
# Load the oral glucose tolerance test.
ogtt <- read.xport("eg_data/NHANES/Laboratory_data/OGTT_I.XPT")
head(ogtt, 2)
head(glu$SEQN)
dim(glu)
head(QCtotal)
# Load the oral glucose tolerance test.
ogtt <- read.xport("eg_data/NHANES/Laboratory_data/OGTT_I.XPT")
head(ogtt, 2)
head(ogtt$SEQN)
dim(ogtt)
# Merge the glu and ogtt test results.
GO <- merge(x=glu, y=ogtt, by="SEQN", all.x=TRUE)
colnames(GO)
head(GO)
# Merge the glu and ogtt test results.
GO <- merge(x=glu, y=ogtt, by="SEQN")
colnames(GO)
head(GO)
# Merge the glu and ogtt test results.
GO <- merge(x=glu, y=ogtt, by="SEQN", all=T)
# Cont the number of rows with missing data.
is.na(GO$LBXGLT)
# Cont the number of rows with missing data.
nrow(is.na(GO$LBXGLT))
# Cont the number of rows with missing data.
sum(colSums(is.na(GO[, 'LBXGLT'])) > 0)
sum(apply(is.na(GO[, 'LBXGLT']), 1, any))
is.na(GO[, 'LBXGLT']
)
sum(apply(is.na(GO[, 'LBXGLT']), 1, any))
sum(!complete.cases(GO))
sum(complete.cases(GO))
1107+2084
library(naniar)
vis_miss(GO)
head(ogtt$SEQN)
head(ogtt, 2)
head(ogtt)
# GTDCODE - Incomplete OGTT Comment Code. Should only choose zero (=complete record).
library(dplyr)
ogtt_comp <- ogtt %>% filter(GTDCODE == 0)
head(ogtt_comp)
# GTXDRANK - Amount of glucose challenge drank. Should choose 1= all.
head(ogtt_comp$GTXDRANK)
# GTXDRANK - Amount of glucose challenge drank. Should choose 1= all.
table(ogtt_comp$GTXDRANK)
head(ogtt)
# Load the oral glucose tolerance test.
ogtt <- read.xport("eg_data/NHANES/Laboratory_data/OGTT_I.XPT")
head(ogtt)
# LBXGLU - Fasting Glucose (mg/dL).
# Count the number of rows with missing data.
sum(complete.cases(glu))
dim(glu)
vis_miss(glu)
head(glu, 2)
head(glu, 10)
head(glu, 50)
tail(glu, 50)
# Take out only rows with no missing data in LBXGLU and LBXGLUSI.
dataexists_TF <- is.na(glu$LBXGLU)
glu_comp <- glu[dataexists_TF , ]
dataexists_TF
glu
compind <-
glu_comp <- glu[is.na(glu$LBXGLU), ]
table(glu_comp$LBXGLU)
compind <-
glu_comp <- glu[is.na(glu$LBXGLU), ]
table(glu_comp$LBXGLU)
is.na(glu$LBXGLU)
plot(glu$LBXGLU)
vis_miss(glu)
compind <-
glu_comp <- glu[!is.na(glu$LBXGLU), ]
table(glu_comp$LBXGLU)
plot(glu_comp$LBXGLU)
hist(glu_comp$LBXGLU)
# Merge the complete glu and complete ogtt datasets.
GO <- merge(x=glu_comp, y=ogtt_comp, by="SEQN")
colnames(GO)
head(GO)
# Count the number of rows with missing data.
sum(complete.cases(GO))
vis_miss(GO)
# ---------------------------------------------------------------------------------------------------------------
# Use dataframe GO for further analysis.
# ---------------------------------------------------------------------------------------------------------------
GO$SEQN[``]
# ---------------------------------------------------------------------------------------------------------------
# Use dataframe GO for further analysis.
# ---------------------------------------------------------------------------------------------------------------
GO$SEQN[1]
head(GO$SEQN)
# ---------------------------------------------------------------------------------------------------------------
# Use dataframe GO for further analysis.
# ---------------------------------------------------------------------------------------------------------------
GO$SEQN[2]
summary(GO$LBXGLU)
for(i in 1: nrow(GO)){
if(     GO$LBXGLU[i] < 100){ GO$GLU_index[i] <- "Norm" }
else if(GO$LBXGLU[i] < 126){ GO$GLU_index[i] <- "Pred" }
else{                        GO$GLU_index[i] <- "Diab" }
}
table(GO$GLU_index)
# Convert to factor
GO$GLU_index <- as.factor(GO$GLU_index, levels('Norm', 'Pred', 'Diab'))
# Convert to factor
GO$GLU_index <- as.factor(GO$GLU_index, levels=c('Norm', 'Pred', 'Diab'))
# Convert to factor
GO$GLU_index <- factor(GO$GLU_index, levels = c('Norm', 'Pred', 'Diab'))
table(GO$GLU_index)
head(GO)
# LBXGLT - Two Hour Glucose (OGTT) (mg/dL) is of interest.
hist(ogtt$LBXGLT)
summary(GO$LBXGLT)
GO$OGTT_index <- NA
for(i in 1: nrow(GO)){
if(     GO$LBXGLT[i] < 141){ GO$OGTT_index[i] <- "Norm" }
else if(GO$LBXGLT[i] < 200){ GO$OGTT_index[i] <- "Pred" }
else{                        GO$OGTT_index[i] <- "Diab" }
}
head(GO)
# Look at the frequency of GO$GLU_index (by fasting glucose level) and GO$OGTT_index (oral glucose
# tolerance test).
twowaytable = table(GO$`GLU_index`, GO$OGTT_index)
twowaytable
# Convert to factor
GO$OGTT_index <- factor(GO$OGTT_index, levels = c('Norm', 'Pred', 'Diab'))
# Look at the frequency.
table(GO$OGTT_index)
# Look at the frequency of GO$GLU_index (by fasting glucose level) and GO$OGTT_index (oral glucose
# tolerance test).
twowaytable = table(GO$`GLU_index`, GO$OGTT_index)
twowaytable
# Look at the frequency of GO$GLU_index (by fasting glucose level) and GO$OGTT_index (oral glucose
# tolerance test).
twoway = table(GO$`GLU_index`, GO$OGTT_index)
twoway
Total = colSums(t(ttwoway)) # Column totals
Total = colSums(twoway) # Column totals
Total
cc = cbind(ttwoway, Total)  # Add column totals
ttwoway = t(twoway) #transpose
ttwoway = as.data.frame.matrix(ttwoway)
Total = colSums(twoway) # Column totals
Total
cc = cbind(ttwoway, Total)  # Add column totals
sortedcc = cc[ order(cc$Total, decreasing = T), ]  # sort by col totals
sortedccrr = rbind(sortedcc, colSums(sortedcc))  # Add row totals
rownames(sortedccrr)[length(rownames(sortedccrr))] <- "Total"  # Change the last rowname
sortedccrr
# Look at the frequency.
table(GO$OGTT_index)
# Save GO for later use.
write.table(x=GO, "GO.txt", sep="\t", quote=F, row.names = F)
# Change workind dir.
setwd("~/GitHub/dietary_patterns/eg_data/NHANES/Laboratory_data/")
# Save GO for later use.
write.table(x=GO, "GO.txt", sep="\t", quote=F, row.names = F)
# Load GO.txt
GO <-  read.delim("GO.txt", sep="\t", header=T)
head(GO)
