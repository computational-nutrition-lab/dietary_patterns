}else if(nthSNP >= 10 & nthSNP < 99){ prefix <- nthSNP }
# Save it a csv file with the SNP name in the filename.
write.csv(mmm, paste("LD_sw50_5_08/BLINKpc3/", paste(prefix, MySNP, "PICinfo_s.csv", sep="_"), sep=""), row.names=F)
#----------------------------------------------------------------------------------------------------
# Loop starts here.  Change the number of SNPs here.
MySNP= SNPs[3]
#Look for this value in all the columns of myG.
SNP1 = myG %>% filter_all(any_vars(. %in% paste(MySNP)))
# Get the first row of myG (names of individuals).
headings = head(myG, n=1)
# Bind the names of individuals and SNP genotype at SNP1.
indSNP = bind_rows(headings, SNP1)
indSNPt = t(indSNP) # Make indSNP into a long table
colnames(indSNPt) = c("Taxa", "Genotype")
# Join by Taxa
indSNP_CT = full_join(as.data.frame(indSNPt), as.data.frame(myPheno))   ### USE myPheno here ###
# Sort by genotype.
# attach(indSNP_CT) # Need to "Attach" in order to sort.
indSNP_CT_s = indSNP_CT[order(indSNP_CT$Genotype), ]
# Determine which is major and which is minor allele.
table(indSNP_CT_s$Genotype)
## CHANGE THIS FOR EVERY SNP
Major = "A"
Minor = "G"
Het =   "R"
# Define the vectors of hetero, major, and minor alleles.
MHM <-  c(Het, Major, Minor)
# Calculate means for each genotype (and heterozygotes if any)
SNP1means <- data.frame(SigSNP=MySNP, Alleles=c("Het", "Major", "Minor"), Genotype=NA, Count=NA, MeanPheno=NA)
for(i in 1:3){    # For loop for major, hetero, and minor alleles.
SNP1means[i,3]= MHM[i]                # Put genotype calls in column 2.
SNP1means[i,4]= indSNP_CT_s %>%       # Put number of individuals in column 3.
filter(Genotype == MHM[i]) %>%
nrow()
SNP1means[i,5]= indSNP_CT_s %>%       # Put mean CT for each genotype in column 4.
filter(Genotype == MHM[i]) %>%
summarise(mean(phenovalue))
}
# Difference between the Major allele and minor allele.
SNP1means$Diff = SNP1means[2,5] - SNP1means[3,5]
tail(SNP1means)
# Make a one-line table
OnelineSNP1means =
data.frame(SigSNP=MySNP,
Mjr=SNP1means[2,3], Mjr_n=SNP1means[2,4], Mjr_mean=SNP1means[2,5],
mnr=SNP1means[3,3], mnr_n=SNP1means[3,4], mnr_mean=SNP1means[3,5],
Diff= SNP1means[3,6],
Het=SNP1means[1,3], Het_n=SNP1means[1,4], Het_mean=SNP1means[1,5]
)
OnelineSNP1means
# <OR 2> Second SNP and onwards - Add this to the existing table!
OnelineTableALL <- bind_rows(OnelineTableALL, OnelineSNP1means)
# Add PIC information to indSNP_CT_s so that the individuals' info can be seen together with
# the genotype at this particular SNP.
# Merge PIC info with the geno-pheno table, too.
indSNP_CT_s_l <- merge(x=indSNP_CT_s, y=PICinfo, all.x=T, by="Taxa")
# Remove rows containing NAs in the phenotype value, then sort by Genotype then Taxa.
lll = indSNP_CT_s_l %>% filter(!is.na(phenovalue))
nrow(lll) # nrow should be the same as the number of individuals used for the GWAS.
mmm = lll[ order(lll$Genotype,
lll$phenovalue,
lll$Taxa), ]
# head(mmm[, 1:3], 10)
# tail(mmm[, 1:3], 10)
# Get the index number for the current SNP, to use it as a prefix.
nthSNP <- as.numeric(which(SNPs == MySNP))
prefix <- character()
# Add "0" if 'nthSNP' is one digit, so that the files will be easier to sort.
if(nthSNP < 10){ prefix <- paste("0", nthSNP, sep="")
}else if(nthSNP >= 10 & nthSNP < 99){ prefix <- nthSNP }
# Save it a csv file with the SNP name in the filename.
write.csv(mmm, paste("LD_sw50_5_08/BLINKpc3/", paste(prefix, MySNP, "PICinfo_s.csv", sep="_"), sep=""), row.names=F)
#----------------------------------------------------------------------------------------------------
# Loop starts here.  Change the number of SNPs here.
MySNP= SNPs[4]
#Look for this value in all the columns of myG.
SNP1 = myG %>% filter_all(any_vars(. %in% paste(MySNP)))
# Get the first row of myG (names of individuals).
headings = head(myG, n=1)
# Bind the names of individuals and SNP genotype at SNP1.
indSNP = bind_rows(headings, SNP1)
indSNPt = t(indSNP) # Make indSNP into a long table
colnames(indSNPt) = c("Taxa", "Genotype")
# Join by Taxa
indSNP_CT = full_join(as.data.frame(indSNPt), as.data.frame(myPheno))   ### USE myPheno here ###
# Sort by genotype.
# attach(indSNP_CT) # Need to "Attach" in order to sort.
indSNP_CT_s = indSNP_CT[order(indSNP_CT$Genotype), ]
# Determine which is major and which is minor allele.
table(indSNP_CT_s$Genotype)
## CHANGE THIS FOR EVERY SNP
Major = "T"
Minor = "C"
Het =   "Y"
# Define the vectors of hetero, major, and minor alleles.
MHM <-  c(Het, Major, Minor)
# Calculate means for each genotype (and heterozygotes if any)
SNP1means <- data.frame(SigSNP=MySNP, Alleles=c("Het", "Major", "Minor"), Genotype=NA, Count=NA, MeanPheno=NA)
for(i in 1:3){    # For loop for major, hetero, and minor alleles.
SNP1means[i,3]= MHM[i]                # Put genotype calls in column 2.
SNP1means[i,4]= indSNP_CT_s %>%       # Put number of individuals in column 3.
filter(Genotype == MHM[i]) %>%
nrow()
SNP1means[i,5]= indSNP_CT_s %>%       # Put mean CT for each genotype in column 4.
filter(Genotype == MHM[i]) %>%
summarise(mean(phenovalue))
}
# Difference between the Major allele and minor allele.
SNP1means$Diff = SNP1means[2,5] - SNP1means[3,5]
tail(SNP1means)
# Make a one-line table
OnelineSNP1means =
data.frame(SigSNP=MySNP,
Mjr=SNP1means[2,3], Mjr_n=SNP1means[2,4], Mjr_mean=SNP1means[2,5],
mnr=SNP1means[3,3], mnr_n=SNP1means[3,4], mnr_mean=SNP1means[3,5],
Diff= SNP1means[3,6],
Het=SNP1means[1,3], Het_n=SNP1means[1,4], Het_mean=SNP1means[1,5]
)
OnelineSNP1means
# <OR 2> Second SNP and onwards - Add this to the existing table!
OnelineTableALL <- bind_rows(OnelineTableALL, OnelineSNP1means)
# Add PIC information to indSNP_CT_s so that the individuals' info can be seen together with
# the genotype at this particular SNP.
# Merge PIC info with the geno-pheno table, too.
indSNP_CT_s_l <- merge(x=indSNP_CT_s, y=PICinfo, all.x=T, by="Taxa")
# Remove rows containing NAs in the phenotype value, then sort by Genotype then Taxa.
lll = indSNP_CT_s_l %>% filter(!is.na(phenovalue))
nrow(lll) # nrow should be the same as the number of individuals used for the GWAS.
mmm = lll[ order(lll$Genotype,
lll$phenovalue,
lll$Taxa), ]
# head(mmm[, 1:3], 10)
# tail(mmm[, 1:3], 10)
# Get the index number for the current SNP, to use it as a prefix.
nthSNP <- as.numeric(which(SNPs == MySNP))
prefix <- character()
# Add "0" if 'nthSNP' is one digit, so that the files will be easier to sort.
if(nthSNP < 10){ prefix <- paste("0", nthSNP, sep="")
}else if(nthSNP >= 10 & nthSNP < 99){ prefix <- nthSNP }
# Save it a csv file with the SNP name in the filename.
write.csv(mmm, paste("LD_sw50_5_08/BLINKpc3/", paste(prefix, MySNP, "PICinfo_s.csv", sep="_"), sep=""), row.names=F)
# Go back and do the next SNP.
#----------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------
# When all the significant SNPS were dealt with...
# colnames(OnelineSNP1means)<-NULL  # 2nd SNP and onwards # 1 line table.
# write.table(OnelineTableALL, "BLINKpc3/00_sigSNPs_MHMvalues.csv", sep=",", row.names=F)
write.table(OnelineTableALL, "LD_sw50_5_08/BLINKpc3/00_sigSNPs_MHMvalues.csv", sep=",", row.names=F)
# PR2019_DR_Checks_sw50_5_08, PCs=3  =================================================================================
setwd("E:/MSU OneDrive 20210829/PIC Cassoulet/PIC/GWAS/Manplot/PR2019_DR_Checks_sw50_5_08/")
Mypvalues = read.csv("Checks_sw50_5_08.csv")
head(Mypvalues)
dim(Mypvalues)
# Manhattan plot # Change the threshold value!
CMplot(Mypvalues, type="p", plot.type="m", LOG10=TRUE, threshold= 1.282E-04, threshold.lty= 2,
threshold.lwd=1, threshold.col="black", file="jpg", memo="",dpi=300,
file.output=T, width=8.92, height=3.52, amplify=F, box=T, cex.lab=1.2, cex.axis=1, mar= c(3,5,1,1)  )
# QQ plot
CMplot(Mypvalues, plot.type="q", box=T, file="jpg", memo="" ,dpi=300,
conf.int=TRUE, conf.int.col=NULL, col="darkblue", threshold.col="red",
threshold.lty=2, file.output=T,  cex.axis=1, cex.lab=1.1, main ="",
mar=c(4.5,4.5,1,1),  ylab.pos=2.3,  width=3.75, height=3.75)
# SNP density plot # Change the phenotype name in "main"!
CMplot(Mypvalues, type="d", plot.type="d",bin.size=1e6,chr.den.col=c("darkgreen", "yellow", "red"),
file="jpg",memo="",dpi=300, main=paste("Checks, ", nrow(Mypvalues), " SNPs", sep=""),
file.output=TRUE,verbose=TRUE,width=9,height=6)
library(ggplot2)
library(ggfortify)
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Load source scripts
source("lib/specify_data_dir.R")
source("lib/ggplot2themes.R")
source("lib/PCA.R")
# Specify where the data is.
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data")
# Your input data should be a data frame with variables with non-zero variance.
pca_input <- read.table("males50s_QCtotal_d_glu_body_meta_demo_Nut_rv.txt",
sep="\t", header=T)
# Ensure your input file has the correct number of rows and columns.
dim(pca_input)
head(pca_input)
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Import source code to run the analyses to follow.
source("lib/specify_data_dir.R")
source("lib/percent_kcal.R")
# Call color palette.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# Load example totals data
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/")
# Load the totals with demographic data.
totals <- read.table("VVKAJ_Tot_m_QCed.txt",  sep = "\t", header = T)
# Load the totals with demographic data.
totals <- read.table("Total_D12_FC_QC_mean_QC_d.txt",  sep = "\t", header = T)
head(totals)
View(CPTgramsPerUser)
View(CPTpctKcalPerUser)
# Get index numbers for username, recallno, "CARB","PROT","TFAT", "KCAL"
CPTpctKcalPerSEQN <- function(inputfn, user.name='SEQN', outfn){
indexno_username <- which(names(inputfn)== user.name)
indexno_carb <-     which(names(inputfn)== "CARB")
indexno_prot <-     which(names(inputfn)== "PROT")
indexno_tfat <-     which(names(inputfn)== "TFAT")
indexno_kcal <-     which(names(inputfn)== "KCAL")
paste(outfn)
}
CPTpctKcalPerSEQN(inputfn = totals, user.name = "SEQN", outfn="out.txt")
# Get index numbers for username, recallno, "CARB","PROT","TFAT", "KCAL"
CPTpctKcalPerSEQN <- function(inputfn, user.name='SEQN', outfn){
indexno_username <- which(names(inputfn)== user.name)
indexno_carb <-     which(names(inputfn)== "CARB")
indexno_prot <-     which(names(inputfn)== "PROT")
indexno_tfat <-     which(names(inputfn)== "TFAT")
indexno_kcal <-     which(names(inputfn)== "KCAL")
paste(outfn)
paste(indexno_username)
}
CPTpctKcalPerSEQN(inputfn = totals, user.name = "SEQN", outfn="out.txt")
# Get index numbers for username, recallno, "CARB","PROT","TFAT", "KCAL"
CPTpctKcalPerSEQN <- function(inputfn, user.name='SEQN', outfn){
indexno_username <- which(names(inputfn)== user.name)
indexno_carb <-     which(names(inputfn)== "CARB")
indexno_prot <-     which(names(inputfn)== "PROT")
indexno_tfat <-     which(names(inputfn)== "TFAT")
indexno_kcal <-     which(names(inputfn)== "KCAL")
paste(outfn, indexno_username)
}
CPTpctKcalPerSEQN(inputfn = totals, user.name = "SEQN", outfn="out.txt")
# Get index numbers for username, recallno, "CARB","PROT","TFAT", "KCAL"
CPTpctKcalPerSEQN <- function(inputfn, user.name='SEQN', outfn){
indexno_username <- which(names(inputfn)== user.name)
indexno_carb <-     which(names(inputfn)== "CARB")
indexno_prot <-     which(names(inputfn)== "PROT")
indexno_tfat <-     which(names(inputfn)== "TFAT")
indexno_kcal <-     which(names(inputfn)== "KCAL")
paste(outfn, indexno_username, indexno_carb, indexno_prot, indexno_tfat, indexno_kcal)
}
CPTpctKcalPerSEQN(inputfn = totals, user.name = "SEQN", outfn="out.txt")
colnames(totals)
# Get index numbers for username, recallno, "CARB","PROT","TFAT", "KCAL"
CPTpctKcalPerSEQN <- function(inputfn, user.name='SEQN', outfn){
indexno_username <- which(names(inputfn)== user.name)
indexno_carb <-     which(names(inputfn)== "CARB")
indexno_prot <-     which(names(inputfn)== "PROT")
indexno_tfat <-     which(names(inputfn)== "TFAT")
indexno_kcal <-     which(names(inputfn)== "KCAL")
# paste(outfn, indexno_username, indexno_carb, indexno_prot, indexno_tfat, indexno_kcal)
# Take only the relevant columns from inputfn.
totalssub2 <- inputfn[, c(indexno_username,
indexno_recallno,
indexno_carb,
indexno_prot,
indexno_tfat,
indexno_kcal)]
print(head(totalssub2, 2))
}
CPTpctKcalPerSEQN(inputfn = totals, user.name = "SEQN", outfn="out.txt")
# Get index numbers for username, recallno, "CARB","PROT","TFAT", "KCAL"
CPTpctKcalPerSEQN <- function(inputfn, user.name='SEQN', outfn){
indexno_username <- which(names(inputfn)== user.name)
indexno_carb <-     which(names(inputfn)== "CARB")
indexno_prot <-     which(names(inputfn)== "PROT")
indexno_tfat <-     which(names(inputfn)== "TFAT")
indexno_kcal <-     which(names(inputfn)== "KCAL")
# paste(outfn, indexno_username, indexno_carb, indexno_prot, indexno_tfat, indexno_kcal)
# Take only the relevant columns from inputfn.
totalssub2 <- inputfn[, c(indexno_username,
indexno_carb,
indexno_prot,
indexno_tfat,
indexno_kcal)]
print(head(totalssub2, 2))
}
CPTpctKcalPerSEQN(inputfn = totals, user.name = "SEQN", outfn="out.txt")
# Get index numbers for username, recallno, "CARB","PROT","TFAT", "KCAL"
CPTpctKcalPerSEQN <- function(inputfn, user.name='SEQN', outfn){
indexno_username <- which(names(inputfn)== user.name)
indexno_carb <-     which(names(inputfn)== "CARB")
indexno_prot <-     which(names(inputfn)== "PROT")
indexno_tfat <-     which(names(inputfn)== "TFAT")
indexno_kcal <-     which(names(inputfn)== "KCAL")
print(outfn, indexno_username, indexno_carb, indexno_prot, indexno_tfat, indexno_kcal)
# Take only the relevant columns from inputfn.
totalssub2 <- inputfn[, c(indexno_username,
indexno_carb,
indexno_prot,
indexno_tfat,
indexno_kcal)]
# % KCAL
# calculate calories
totalssub2$CARB_kcal <- totalssub2$CARB * 4
totalssub2$PROT_kcal <- totalssub2$PROT * 4
totalssub2$TFAT_kcal <- totalssub2$TFAT * 9
# calculate kcal of each macronutrient per engergy (%)
totalssub2$CARB_kcal_pct <- totalssub2$CARB_kcal / totalssub2$KCAL * 100
totalssub2$PROT_kcal_pct <- totalssub2$PROT_kcal / totalssub2$KCAL * 100
totalssub2$TFAT_kcal_pct <- totalssub2$TFAT_kcal / totalssub2$KCAL * 100
print(head(totalssub2, 3))
}
CPTpctKcalPerSEQN(inputfn = totals, user.name = "SEQN", outfn="out.txt")
# Get index numbers for username, recallno, "CARB","PROT","TFAT", "KCAL"
CPTpctKcalPerSEQN <- function(inputfn, user.name="SEQN", outfn){
indexno_username <- which(names(inputfn)== user.name)
indexno_carb <-     which(names(inputfn)== "CARB")
indexno_prot <-     which(names(inputfn)== "PROT")
indexno_tfat <-     which(names(inputfn)== "TFAT")
indexno_kcal <-     which(names(inputfn)== "KCAL")
print(outfn, indexno_username, indexno_carb, indexno_prot, indexno_tfat, indexno_kcal)
# Take only the relevant columns from inputfn.
totalssub2 <- inputfn[, c(indexno_username,
indexno_carb,
indexno_prot,
indexno_tfat,
indexno_kcal)]
# % KCAL
# calculate calories
totalssub2$CARB_kcal <- totalssub2$CARB * 4
totalssub2$PROT_kcal <- totalssub2$PROT * 4
totalssub2$TFAT_kcal <- totalssub2$TFAT * 9
# calculate kcal of each macronutrient per engergy (%)
totalssub2$CARB_kcal_pct <- totalssub2$CARB_kcal / totalssub2$KCAL * 100
totalssub2$PROT_kcal_pct <- totalssub2$PROT_kcal / totalssub2$KCAL * 100
totalssub2$TFAT_kcal_pct <- totalssub2$TFAT_kcal / totalssub2$KCAL * 100
print(head(totalssub2, 3))
}
CPTpctKcalPerSEQN(inputfn = totals, user.name = "SEQN", outfn="out.txt")
# Get index numbers for username, recallno, "CARB","PROT","TFAT", "KCAL"
CPTpctKcalPerSEQN <- function(inputfn, user.name="SEQN", outfn){
indexno_username <- which(names(inputfn)== user.name)
indexno_carb <-     which(names(inputfn)== "CARB")
indexno_prot <-     which(names(inputfn)== "PROT")
indexno_tfat <-     which(names(inputfn)== "TFAT")
indexno_kcal <-     which(names(inputfn)== "KCAL")
# print(outfn, indexno_username, indexno_carb, indexno_prot, indexno_tfat, indexno_kcal)
# Take only the relevant columns from inputfn.
totalssub2 <- inputfn[, c(indexno_username,
indexno_carb,
indexno_prot,
indexno_tfat,
indexno_kcal)]
# % KCAL
# calculate calories
totalssub2$CARB_kcal <- totalssub2$CARB * 4
totalssub2$PROT_kcal <- totalssub2$PROT * 4
totalssub2$TFAT_kcal <- totalssub2$TFAT * 9
# calculate kcal of each macronutrient per engergy (%)
totalssub2$CARB_kcal_pct <- totalssub2$CARB_kcal / totalssub2$KCAL * 100
totalssub2$PROT_kcal_pct <- totalssub2$PROT_kcal / totalssub2$KCAL * 100
totalssub2$TFAT_kcal_pct <- totalssub2$TFAT_kcal / totalssub2$KCAL * 100
print(head(totalssub2, 3))
}
CPTpctKcalPerSEQN(inputfn = totals, user.name = "SEQN", outfn="out.txt")
# Get index numbers for username, recallno, "CARB","PROT","TFAT", "KCAL"
CPTpctKcalPerSEQN <- function(inputfn, user.name="SEQN", outfn){
indexno_username <- which(names(inputfn)== user.name)
indexno_carb <-     which(names(inputfn)== "CARB")
indexno_prot <-     which(names(inputfn)== "PROT")
indexno_tfat <-     which(names(inputfn)== "TFAT")
indexno_kcal <-     which(names(inputfn)== "KCAL")
# print(outfn, indexno_username, indexno_carb, indexno_prot, indexno_tfat, indexno_kcal)
# Take only the relevant columns from inputfn.
totalssub2 <- inputfn[, c(indexno_username,
indexno_carb,
indexno_prot,
indexno_tfat,
indexno_kcal)]
# % KCAL
# calculate calories
totalssub2$CARB_kcal <- totalssub2$CARB * 4
totalssub2$PROT_kcal <- totalssub2$PROT * 4
totalssub2$TFAT_kcal <- totalssub2$TFAT * 9
# calculate kcal of each macronutrient per engergy (%)
totalssub2$CARB_kcal_pct <- totalssub2$CARB_kcal / totalssub2$KCAL * 100
totalssub2$PROT_kcal_pct <- totalssub2$PROT_kcal / totalssub2$KCAL * 100
totalssub2$TFAT_kcal_pct <- totalssub2$TFAT_kcal / totalssub2$KCAL * 100
totalssub2$kcal_pct_sum <-  totalssub2$CARB_kcal + totalssub2$PROT_kcal + totalssub2$TFAT_kcal
print(head(totalssub2, 6))
}
CPTpctKcalPerSEQN(inputfn = totals, user.name = "SEQN", outfn="out.txt")
# Get index numbers for username, recallno, "CARB","PROT","TFAT", "KCAL"
CPTpctKcalPerSEQN <- function(inputfn, user.name="SEQN", outfn){
indexno_username <- which(names(inputfn)== user.name)
indexno_carb <-     which(names(inputfn)== "CARB")
indexno_prot <-     which(names(inputfn)== "PROT")
indexno_tfat <-     which(names(inputfn)== "TFAT")
indexno_kcal <-     which(names(inputfn)== "KCAL")
# print(outfn, indexno_username, indexno_carb, indexno_prot, indexno_tfat, indexno_kcal)
# Take only the relevant columns from inputfn.
totalssub2 <- inputfn[, c(indexno_username,
indexno_carb,
indexno_prot,
indexno_tfat,
indexno_kcal)]
# % KCAL
# calculate calories
totalssub2$CARB_kcal <- totalssub2$CARB * 4
totalssub2$PROT_kcal <- totalssub2$PROT * 4
totalssub2$TFAT_kcal <- totalssub2$TFAT * 9
# calculate kcal of each macronutrient per engergy (%)
totalssub2$CARB_kcal_pct <- totalssub2$CARB_kcal / totalssub2$KCAL * 100
totalssub2$PROT_kcal_pct <- totalssub2$PROT_kcal / totalssub2$KCAL * 100
totalssub2$TFAT_kcal_pct <- totalssub2$TFAT_kcal / totalssub2$KCAL * 100
totalssub2$kcal_pct_sum <-  totalssub2$CARB_kcal_pct + totalssub2$PROT_kcal_pct + totalssub2$TFAT_kcal_pct
print(head(totalssub2, 6))
}
CPTpctKcalPerSEQN(inputfn = totals, user.name = "SEQN", outfn="out.txt")
totals[2, ]
hist[, "ALCO" ]
hist(totals[, "ALCO" ])
# Get index numbers for username, recallno, "CARB","PROT","TFAT", "KCAL"
CPTpctKcalPerSEQN <- function(inputfn, user.name="SEQN", outfn){
indexno_username <- which(names(inputfn)== user.name)
indexno_carb <-     which(names(inputfn)== "CARB")
indexno_prot <-     which(names(inputfn)== "PROT")
indexno_tfat <-     which(names(inputfn)== "TFAT")
indexno_kcal <-     which(names(inputfn)== "KCAL")
indexno_alco <-     which(names(inputfn)== "ALCO")
# print(outfn, indexno_username, indexno_carb, indexno_prot, indexno_tfat, indexno_kcal)
# Take only the relevant columns from inputfn.
totalssub2 <- inputfn[, c(indexno_username,
indexno_carb,
indexno_prot,
indexno_tfat,
indexno_kcal,
indexno_alco
)]
# % KCAL
# calculate calories
totalssub2$CARB_kcal <- totalssub2$CARB * 4
totalssub2$PROT_kcal <- totalssub2$PROT * 4
totalssub2$TFAT_kcal <- totalssub2$TFAT * 9
# calculate kcal of each macronutrient per engergy (%)
totalssub2$CARB_kcal_pct <- totalssub2$CARB_kcal / totalssub2$KCAL * 100
totalssub2$PROT_kcal_pct <- totalssub2$PROT_kcal / totalssub2$KCAL * 100
totalssub2$TFAT_kcal_pct <- totalssub2$TFAT_kcal / totalssub2$KCAL * 100
totalssub2$kcal_pct_sum <-  totalssub2$CARB_kcal_pct + totalssub2$PROT_kcal_pct + totalssub2$TFAT_kcal_pct
print(head(totalssub2, 6))
}
CPTpctKcalPerSEQN(inputfn = totals, user.name = "SEQN", outfn="out.txt")
# Get index numbers for username, recallno, "CARB","PROT","TFAT", "KCAL"
CPTpctKcalPerSEQN <- function(inputfn, user.name="SEQN", outfn){
indexno_username <- which(names(inputfn)== user.name)
indexno_carb <-     which(names(inputfn)== "CARB")
indexno_prot <-     which(names(inputfn)== "PROT")
indexno_tfat <-     which(names(inputfn)== "TFAT")
indexno_kcal <-     which(names(inputfn)== "KCAL")
indexno_alco <-     which(names(inputfn)== "ALCO")
# print(outfn, indexno_username, indexno_carb, indexno_prot, indexno_tfat, indexno_kcal)
# Take only the relevant columns from inputfn.
totalssub2 <- inputfn[, c(indexno_username,
indexno_carb,
indexno_prot,
indexno_tfat,
indexno_kcal,
indexno_alco
)]
# % KCAL
# calculate calories
totalssub2$CARB_kcal <- totalssub2$CARB * 4
totalssub2$PROT_kcal <- totalssub2$PROT * 4
totalssub2$TFAT_kcal <- totalssub2$TFAT * 9
# calculate kcal of each macronutrient per engergy (%)
totalssub2$CARB_kcal_pct <- totalssub2$CARB_kcal / totalssub2$KCAL * 100
totalssub2$PROT_kcal_pct <- totalssub2$PROT_kcal / totalssub2$KCAL * 100
totalssub2$TFAT_kcal_pct <- totalssub2$TFAT_kcal / totalssub2$KCAL * 100
totalssub2$kcal_pct_sum <-  totalssub2$CARB_kcal_pct + totalssub2$PROT_kcal_pct + totalssub2$TFAT_kcal_pct
print(head(totalssub2, 6))
write.table(totalssub2, "Total_D12_FC_QC_mean_QC_d_CPT_kcal.txt", sep="\t", quote=F, row.names=F)
}
# Get index numbers for username, recallno, "CARB","PROT","TFAT", "KCAL"
CPTpctKcalPerSEQN <- function(inputfn, user.name="SEQN", outfn){
indexno_username <- which(names(inputfn)== user.name)
indexno_carb <-     which(names(inputfn)== "CARB")
indexno_prot <-     which(names(inputfn)== "PROT")
indexno_tfat <-     which(names(inputfn)== "TFAT")
indexno_kcal <-     which(names(inputfn)== "KCAL")
indexno_alco <-     which(names(inputfn)== "ALCO")
# print(outfn, indexno_username, indexno_carb, indexno_prot, indexno_tfat, indexno_kcal)
# Take only the relevant columns from inputfn.
totalssub2 <- inputfn[, c(indexno_username,
indexno_carb,
indexno_prot,
indexno_tfat,
indexno_kcal,
indexno_alco
)]
# % KCAL
# calculate calories
totalssub2$CARB_kcal <- totalssub2$CARB * 4
totalssub2$PROT_kcal <- totalssub2$PROT * 4
totalssub2$TFAT_kcal <- totalssub2$TFAT * 9
# calculate kcal of each macronutrient per engergy (%)
totalssub2$CARB_kcal_pct <- totalssub2$CARB_kcal / totalssub2$KCAL * 100
totalssub2$PROT_kcal_pct <- totalssub2$PROT_kcal / totalssub2$KCAL * 100
totalssub2$TFAT_kcal_pct <- totalssub2$TFAT_kcal / totalssub2$KCAL * 100
totalssub2$kcal_pct_sum <-  totalssub2$CARB_kcal_pct + totalssub2$PROT_kcal_pct + totalssub2$TFAT_kcal_pct
print(head(totalssub2, 6))
write.table(x=totalssub2, file=outfn, sep="\t", quote=F, row.names=F)
}
CPTpctKcalPerSEQN(inputfn= totals, user.name= "SEQN",
outfn="Total_D12_FC_QC_mean_QC_d_CPT_kcal.txt")
totals_CPT_kcal <- read.table("Total_D12_FC_QC_mean_QC_d_CPT_kcal.txt", sep="\t", header=T)
colnames(totals_CPT_kcal)
# What's the relationship between ALCO and total KCAL %?
plot(totals_CPT_kcal$ALCO, totals_CPT_kcal$kcal_pct_sum)
hist(totals_CPT_kcal[, "kcal_pct_sum" ])
totals_CPT_kcal[order(totals_CPT_kcal$kcal_pct_sum), ]
totals_CPT_kcal[order(totals_CPT_kcal$kcal_pct_sum, decreasing=T), ]
