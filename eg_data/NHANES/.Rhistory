# Plot it with the percentage labels.
ggplot(shorttable_pc, aes(x= agegroup, y= value, fill = variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c("red", "yellow", "blue" ) ) +
geom_text(aes(label = paste0( round(value, 0),"%")),
position = position_stack(vjust = 0.5), size = 2)
# Plot it with the percentage labels.
ggplot(shorttable_pc, aes(x= agegroup, y= value, fill = variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c("limegreen", "gold", "magenta" ) ) +
geom_text(aes(label = paste0( round(value, 0),"%")),
position = position_stack(vjust = 0.5), size = 10)
# Plot it with the percentage labels.
ggplot(shorttable_pc, aes(x= agegroup, y= value, fill = variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c("limegreen", "gold", "magenta" ) ) +
geom_text(aes(label = paste0( round(value, 0),"%")),
position = position_stack(vjust = 0.5), size = 5)
# Plot it with the percentage labels.
ggplot(shorttable_pc, aes(x= agegroup, y= value, fill = variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c("limegreen", "gold", "magenta" ) ) +
geom_text(aes(label = paste0( round(value*100, 0),"%")),
position = position_stack(vjust = 0.5), size = 5)
# Plot it with the percentage labels.
is(shorttable_pc$agegroup)
# Plot it with the percentage labels.
is(shorttable_pc$variable)
countbar <- ggplot(glu_2_males, aes(x=agegroup, y=length(SEQN))) +
geom_bar(aes(fill=GLU_index), position="fill", stat="identity") +
scale_fill_manual(values = mycolors) +
labs(x="Age Group") +
rotate_X_labels + space_axes + no_grid
countbar
mycolors
# Show HEX code to use in Excel
gplots::col2hex("aquamarine3")
# from here
# ---------------------------------------------------------------------------------------------------------------
# Load the data of those to be used in the diabetic status analysis.
glu <- read.delim( file="Laboratory_data/QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
table(glu$GLU_index)
# Make GLU_index as a factor for plotting.
glu$GLU_index <- factor(glu$GLU_index, levels = c("Normal", "Prediabetic", "Diabetic"))
# Exclude those who are following special diets.
# Look at the number of individuals who are following any specific diet (DRQSDIET==1).
table(glu$DRQSDIET)
# DRQSDIET==1 is following a special diet, so select only rows with DRQSDIET==2.
glu_2 <- subset(glu, DRQSDIET == 2)
# DRQSDIET==1 is following a special diet, so select only rows with DRQSDIET==2.
glu_2 <- subset(glu, DRQSDIET == 2)
# How many people remained? -- 1625 remained.
table(glu_2$DRQSDIET)
# Check the sample size of each category.
table(glu_2$GLU_index)
setwd("~/GitHub/dietarry_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Load necessary functions.
source("lib/specify_data_dir.R")
source("lib/ggplot2themes.R")
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("~/GitHub/R_Toolbox/distinct100colors.rda")
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/NHANES")
# Load the data of those to be used in the diabetic status analysis.
glu <- read.delim( file="Laboratory_data/QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
# Make GLU_index as a factor for plotting.
glu$GLU_index <- factor(glu$GLU_index, levels = c("Normal", "Prediabetic", "Diabetic"))
setwd("~/GitHub/dietarry_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Load necessary packages.
library(SASxport)
# Load necessary functions.
source("lib/specify_data_dir.R")
source("lib/load_clean_NHANES.R")
source("lib/prep_data_for_clustering.R")
source("lib/ggplot2themes.R")
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("~/GitHub/R_Toolbox/distinct100colors.rda")
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/NHANES")
# Load the QC-ed total (with food categories), filtered for KCAL, PROT, TFAT, VC. 4207 people.
QCtotals_d <- read.table("Total_D12_FC_QC_mean_QC_d.txt", sep="\t", header=T)
# Check the number of participants in the QCtotals - should be 4,207 people.
length(unique(QCtotals_d$SEQN))
# ---------------------------------------------------------------------------------------------------------------
# Load the blood glucose data and see.
glu <- read.xport("Raw_data/GLU_I.XPT")
# glu has LBXGLU - Fasting Glucose (mg/dL).
head(glu)
# Count the number of rows with no missing data.
# 2972 individuals have glucose data.
sum(complete.cases(glu))
# Take out only the rows with no missing data in LBXGLU.
glu_comp <- glu[!is.na(glu$LBXGLU), ]
# Take a quick look at the distribution of LBXGLU.
hist(glu_comp$LBXGLU)
# Use default of merge to only keep SEQNs found in both datasets.
QCtotal_d_glu <- merge(x=QCtotals_d, y=glu_comp, by="SEQN")
# Check the dimension of QCtotal_d_glu - should be 1,943 rows.
dim(QCtotal_d_glu)
# ---------------------------------------------------------------------------------------------------------------
# Load the body measure data.
bodymea <- read.xport("Raw_data/BMX_I.XPT")
# Add body measure to QCtotal_d_glu
QCtotal_d_glu_body <- merge(x=QCtotal_d_glu, y=bodymea, by="SEQN")
# ---------------------------------------------------------------------------------------------------------------
# Load the metadata of people, which is in Total Day 1.
metadata_raw <- read.xport("E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/DR1TOT_I.XPT")
# First, specify the first and the last column names to select.
# Look for the column number that matches the first and last variable specified.
sta_col_num_a <- match("DBQ095Z"  , names(metadata_raw))  # Salt-related questions
end_col_num_a <- match("DRQSPREP" , names(metadata_raw))
sta_col_num_b <- match("DRQSDIET" , names(metadata_raw))  # Diet-related questions
end_col_num_b <- match("DRQSDT91" , names(metadata_raw))
sta_col_num_c <- match("DRD340"   , names(metadata_raw))  # Fish-related questions
end_col_num_c <- match("DRD370V"  , names(metadata_raw))
# Only select the metadata variables and SEQN, which is in column 1.
metadata_only <- metadata_raw[, c(1,
sta_col_num_a:end_col_num_a,
sta_col_num_b:end_col_num_b,
sta_col_num_c:end_col_num_c
)]
# Check that this has only the SEQN and metadata columns.
head(metadata_only, 1)
# Add meatadata to QCtotal_d_glu_body
QCtotal_d_glu_body_meta <- merge(x=QCtotal_d_glu_body, y=metadata_only, by="SEQN")
QCtotal_d_glu_body_meta
# Create an empty column to insert glucose level index.
QCtotal_d_glu_body_meta$GLU_index <- NA
# Add glucose level index.
for(i in 1: nrow(QCtotal_d_glu_body_meta)){
if(     QCtotal_d_glu_body_meta$LBXGLU[i] < 100){ QCtotal_d_glu_body_meta$GLU_index[i] <- "Normal" }
else if(QCtotal_d_glu_body_meta$LBXGLU[i] < 126){ QCtotal_d_glu_body_meta$GLU_index[i] <- "Prediabetic" }
else{                                             QCtotal_d_glu_body_meta$GLU_index[i] <- "Diabetic" }
}
# Check the first 10 rows of glucose and GLU_index columns in QCtotal_d_glu_body_meta.
QCtotal_d_glu_body_meta[1:10, c("LBXGLU", "GLU_index")]
# Look at the frequency of GLU_index.
table(QCtotal_d_glu_body_meta$GLU_index)
# Check the number of individuals who are following any specific diet (DRQSDIET==1).
table(glu$DRQSDIET)
# ---------------------------------------------------------------------------------------------------------------
# Load the blood glucose data and see.
glu <- read.xport("Raw_data/GLU_I.XPT")
# Check the number of individuals who are following any specific diet (DRQSDIET==1).
table(glu$DRQSDIET)
# Check the number of individuals who are following any specific diet (DRQSDIET==1).
table(QCtotal_d_glu_body_meta$DRQSDIET)
# DRQSDIET==1 is following a special diet, so select only rows with DRQSDIET==2.
QCtotal_d_glu_body_meta_2 <- subset(QCtotal_d_glu_body_meta, DRQSDIET == 2)
# How many people remained? -- 1625 remained.
table(QCtotal_d_glu_body_meta_2$DRQSDIET)
# Check the sample size of each category.
table(QCtotal_d_glu_body_meta_2$GLU_index)
# Save the dataset as a .txt file.
write.table(QCtotal_d_glu_body_meta, file="Laboratory_data/QCtotal_d_glu_body_meta_2.txt",
sep= "\t", row.names=F, quote= F)
# Load the data of those to be used in the diabetic status analysis.
glu <- read.delim( file="Laboratory_data/QCtotal_d_glu_body_meta_2.txt", sep= "\t", header= T )
# Make GLU_index as a factor for plotting.
glu$GLU_index <- factor(glu$GLU_index, levels = c("Normal", "Prediabetic", "Diabetic"))
# Load the data of those to be used in the diabetic status analysis.
glu <- read.delim( file="Laboratory_data/QCtotal_d_glu_body_meta_2.txt", sep= "\t", header= T )
# Save the dataset as a .txt file.
write.table(QCtotal_d_glu_body_meta_2, file="Laboratory_data/QCtotal_d_glu_body_meta_2.txt",
sep= "\t", row.names=F, quote= F)
# Load the data of those to be used in the diabetic status analysis.
glu <- read.delim( file="Laboratory_data/QCtotal_d_glu_body_meta_2.txt", sep= "\t", header= T )
# Make GLU_index as a factor for plotting.
glu$GLU_index <- factor(glu$GLU_index, levels = c("Normal", "Prediabetic", "Diabetic"))
# Check the summary data - this will also show the number of missing data if any.
summary(glu_2$BMXBMI)
# Load the data of those to be used in the diabetic status analysis.
glu_2 <- read.delim( file="Laboratory_data/QCtotal_d_glu_body_meta_2.txt", sep= "\t", header= T )
# Make GLU_index as a factor for plotting.
glu_2$GLU_index <- factor(glu_2$GLU_index, levels = c("Normal", "Prediabetic", "Diabetic"))
# Check the summary data - this will also show the number of missing data if any.
summary(glu_2$BMXBMI)
# 14 are missing BMI and has NA's. You can also see that by counting the number of NAs
# in specified rows.
colSums(is.na(glu_2[, c("SEQN", "BMXBMI")]))
# Create a density plot of BMI by GLU_index type.
BMIfreq <- ggplot(data=glu_2, aes(x=BMXBMI, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("steelblue3", "yellow", "hotpink") ) +
labs(x="BMI", y="Density")
BMIfreq
# Check the summary data - this will show the number of missing data if any.
summary(glu_2$BMXWT)
colSums(is.na(glu_2[, c("SEQN", "BMXWT")]))
# Show histogram of body weight.
hist(glu_2$BMXWT)
# Create a density plot of body weight by GLU_index type.
weightfreq <- ggplot(data=glu_2, aes(x=BMXWT, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("steelblue3", "yellow", "hotpink")) +
labs(x="Body weight (kg)", y="Density")
weightfreq
# Save the chart as .pdf. n = 1625 - 12 missing = 1613.
ggsave("Laboratory_data/QCtotal_d_glu_body_meta_demo_n1613_weight_by_GLU_index.pdf",
weightfreq, device="pdf", width=5.3, height=4.5)
# ---------------------------------------------------------------------------------------------------------------
# Look at the KCAL frequency of each group.
# Check the summary data - this will show the number of missing data if any.
summary(glu_2$KCAL)
# Create a line chart of the KCAL frequency of each group.
KCALfreq <- ggplot(data=glu_2, aes(x=KCAL, group=GLU_index, color=GLU_index)) +
geom_density(adjust=1.5, alpha=.4, size=1.2, linetype="longdash") + space_axes + no_grid +
scale_color_manual(values= c("steelblue3", "gold3", "hotpink") ) +
labs(x="KCAL", y="Density") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
KCALfreq
# Add age group column.
glu_2$agegroup <- NA
# Load the data of those to be used in the diabetes status analysis.
glu_2 <- read.delim( file="Laboratory_data/QCtotal_d_glu_body_meta_2.txt", sep= "\t", header= T )
# Make GLU_index as a factor for plotting.
glu_2$GLU_index <- factor(glu$GLU_index, levels = c("Normal", "Prediabetic", "Diabetic"))
# Add age group column.
glu_2$agegroup <- NA
# Add age group according to the age in RIDAGEYR.
for(i in 1: nrow(glu_2)){
if(     glu_2$RIDAGEYR[i] < 30){ glu_2$agegroup[i] <- "29_and_below" }
else if(glu_2$RIDAGEYR[i] < 40){ glu_2$agegroup[i] <- "30s" }
else if(glu_2$RIDAGEYR[i] < 50){ glu_2$agegroup[i] <- "40s" }
else if(glu_2$RIDAGEYR[i] < 60){ glu_2$agegroup[i] <- "50s" }
else{                            glu_2$agegroup[i] <- "60s_and_over" }
}
# Check the result.
table(glu_2$agegroup)
# Select males
glu_2_males <- subset(glu_2, RIAGENDR == 1)
# Check the dimension of the selected data - 774 rows.
dim(glu_2_males)
# Check the dimension of the selected data - 774 rows.
nrow(glu_2_males)
# Create a table with the count of each agegroup and GLU_index combination.
longtable <- aggregate(SEQN ~ agegroup + GLU_index,
data = glu_2_males,
FUN = length)
longtable
# Make a short table with GLU_index levels in each column in order to compute their proportions.
shorttable <- reshape2::dcast(longtable, agegroup ~ GLU_index, sum)
shorttable
# Calculate the sum of all the levels of GLU_index.
shorttable$sum <- rowSums(shorttable[, 2:4])
shorttable
# Calculate the proportion of each - to be used as percentages.
shorttable$Normal_pc      <- shorttable$Normal/shorttable$sum
shorttable$Prediabetic_pc <- shorttable$Prediabetic/shorttable$sum
shorttable$Diabetic_pc    <- shorttable$Diabetic/shorttable$sum
# Calculate the sum of the proportions - should be all 1.
shorttable$sum_pc <- rowSums(shorttable[, 6:8])
shorttable
# Make a short table with GLU_index levels in each column in order to compute their proportions.
shorttable <- reshape2::dcast(longtable, agegroup ~ GLU_index, sum)
shorttable
# Calculate the sum of all the levels of GLU_index.
shorttable$sum <- rowSums(shorttable[, 2:4])
# Calculate the proportion of each - to be used as percentages.
shorttable$Normal_pr      <- shorttable$Normal/shorttable$sum
shorttable$Prediabetic_pr <- shorttable$Prediabetic/shorttable$sum
shorttable$Diabetic_pr    <- shorttable$Diabetic/shorttable$sum
# Calculate the sum of the proportions - should be all 1.
shorttable$sum_pr <- rowSums(shorttable[, 6:8])
shorttable
# Take the proportions and make it into a long table again for plotting.
longtable_pr <- shorttable[, c(1, 6:8)]
shorttable_pr <- reshape2::melt(longtable_pc)
shorttable_pr
shorttable_pr <- reshape2::melt(longtable_pr)
shorttable_pr
# Take the proportions and make it into a long table again for plotting.
longtable_pr <- shorttable[, c(1, 6:8)]
longtable_pr
# Take the proportions and make it into a long table again for plotting.
longtable_pr <- reshape2::melt(shorttable[, c(1, 6:8)])
longtable_pr
# Plot it with percentage labels.
ggplot(longtable_pr, aes(x= agegroup, y= value, fill= variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c("limegreen", "gold", "magenta" ) ) +
geom_text(aes(label = paste0( round(value*100, 0),"%")),
position = position_stack(vjust = 0.5), size = 5)
# Plot it with percentage labels.
ggplot(longtable_pr, aes(x= agegroup, y= value, fill= variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c("steelblue3", "gold3", "hotpink") ) +
geom_text(aes(label = paste0( round(value*100, 0),"%")),
position = position_stack(vjust = 0.5), size = 5)
# Create a density plot of BMI by GLU_index type.
BMIfreq <- ggplot(data=glu_2, aes(x=BMXBMI, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("steelblue3", "yellow", "hotpink") ) +
labs(x="BMI", y="Density")
BMIfreq
# Plot it with percentage labels.
ggplot(longtable_pr, aes(x= agegroup, y= value, fill= variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c("steelblue3", "yellow", "hotpink") ) +
geom_text(aes(label = paste0( round(value*100, 0),"%")),
position = position_stack(vjust = 0.5), size = 5)
# Plot it with percentage labels.
ggplot(longtable_pr, aes(x= agegroup, y= value, fill= variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c("steelblue2", "lightgoldenrod1", "lightpink1") ) +
geom_text(aes(label = paste0( round(value*100, 0),"%")),
position = position_stack(vjust = 0.5), size = 5)
glu_2_females <- subset(glu_2, RIAGENDR == 2)
# Check the dimension of the selected data - 774 rows.
dim(glu_2_females)
# ---------------------------------------------------------------------------------------------------------------
# female
# Select females
glu_2_females <- subset(glu_2, RIAGENDR == 2)
# Check the dimension of the selected data - 774 rows.
nrow(glu_2_females)
# ---------------------------------------------------------------------------------------------------------------
# Repeat the same operation and tables for females will be created.
# female
# Select females
glu_2_females <- subset(glu_2, RIAGENDR == 2)
# Check the dimension of the selected data - 851 rows.
nrow(glu_2_females)
# Create a table with the count of each agegroup and GLU_index combination.
# The variable to be counted can be any one with no missing data; therefore, "SEQN" is selected here.
longtable <- aggregate(SEQN ~ agegroup + GLU_index,
data = glu_2_females,   # Change the input dataset here.
FUN = length)
longtable
# Make a short table with GLU_index levels in each column in order to compute their proportions.
shorttable <- reshape2::dcast(longtable, agegroup ~ GLU_index, sum)
shorttable
# Calculate the sum of all the levels of GLU_index.
shorttable$sum <- rowSums(shorttable[, 2:4])
# Calculate the proportion of each - to be used as percentages.
shorttable$Normal_pr      <- shorttable$Normal/shorttable$sum
shorttable$Prediabetic_pr <- shorttable$Prediabetic/shorttable$sum
shorttable$Diabetic_pr    <- shorttable$Diabetic/shorttable$sum
# Calculate the sum of the proportions - should be all 1.
shorttable$sum_pr <- rowSums(shorttable[, 6:8])
shorttable
# Take the proportions and make it into a long table again for plotting.
longtable_pr <- reshape2::melt(shorttable[, c(1, 6:8)])
longtable_pr
# Using the same code above, generate a stacked barchart for females: GLU_index_pr_F.
GLU_index_pr_F <- ggplot(longtable_pr, aes(x= agegroup, y= value, fill= variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c("steelblue2", "lightgoldenrod1", "lightpink1") ) +
geom_text(aes(label = paste0( round(value*100, 0),"%")),
position = position_stack(vjust = 0.5), size = 5)
GLU_index_pr_F
# Using the same code above, generate a stacked barchart for females: GLU_index_pr_F.
GLU_index_pr_F <- ggplot(longtable_pr, aes(x= agegroup, y= value, fill= variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c("steelblue2", "lightgoldenrod1", "lightpink1") ) +
geom_text(aes(label = paste0( round(value*100, 0),"%")),
position = position_stack(vjust = 0.5), size = 5) +
rotate_X_labels + space_axes +
lab(x="Age Group", y="")
# Using the same code above, generate a stacked barchart for females: GLU_index_pr_F.
GLU_index_pr_F <- ggplot(longtable_pr, aes(x= agegroup, y= value, fill= variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c("steelblue2", "lightgoldenrod1", "lightpink1") ) +
geom_text(aes(label = paste0( round(value*100, 0),"%")),
position = position_stack(vjust = 0.5), size = 5) +
rotate_X_labels + space_axes +
labs(x="Age Group", y="")
GLU_index_pr_F
# Using the same code above, generate a stacked barchart for females: GLU_index_pr_F.
GLU_index_pr_F <- ggplot(longtable_pr, aes(x= agegroup, y= value, fill= variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c("steelblue2", "lightgoldenrod1", "lightpink1") ) +
geom_text(aes(label = paste0( round(value*100, 0),"%")),
position = position_stack(vjust = 0.5), size = 5) +
rotate_X_labels + space_axes +
labs(x="Age Group", y="")
GLU_index_pr_F
# Save the plot.
ggsave("Laboratory_data/QCtotal_d_glu_body_meta_2_agegroup_GLU_index_male.tx",
GLU_index_pr_M, device="png", width=6, height=4.5, unit="in", dpi=300)
# Plot it with percentage labels.
GLU_index_pr_M <- ggplot(longtable_pr, aes(x= agegroup, y= value, fill= variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c("steelblue2", "lightgoldenrod1", "lightpink1") ) +
geom_text(aes(label = paste0( round(value*100, 0),"%")),
position = position_stack(vjust = 0.5), size = 5) +
rotate_X_labels + space_axes +
labs(x="Age Group", y="")
# ---------------------------------------------------------------------------------------------------------------
# male
# Select males
glu_2_males <- subset(glu_2, RIAGENDR == 1)
# Check the number of rows of the selected data - 774 rows.
nrow(glu_2_males)
# Create a table with the count of each agegroup and GLU_index combination.
# The variable to be counted can be any one with no missing data; therefore, "SEQN" is selected here.
longtable <- aggregate(SEQN ~ agegroup + GLU_index,
data = glu_2_males,
FUN = length)
longtable
# Make a short table with GLU_index levels in each column in order to compute their proportions.
shorttable <- reshape2::dcast(longtable, agegroup ~ GLU_index, sum)
shorttable
# Calculate the sum of all the levels of GLU_index.
shorttable$sum <- rowSums(shorttable[, 2:4])
# Calculate the proportion of each - to be used as percentages.
shorttable$Normal_pr      <- shorttable$Normal/shorttable$sum
shorttable$Prediabetic_pr <- shorttable$Prediabetic/shorttable$sum
shorttable$Diabetic_pr    <- shorttable$Diabetic/shorttable$sum
# Calculate the sum of the proportions - should be all 1.
shorttable$sum_pr <- rowSums(shorttable[, 6:8])
shorttable
# Take the proportions and make it into a long table again for plotting.
longtable_pr <- reshape2::melt(shorttable[, c(1, 6:8)])
longtable_pr
# Plot it with percentage labels.
GLU_index_pr_M <- ggplot(longtable_pr, aes(x= agegroup, y= value, fill= variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c("steelblue2", "lightgoldenrod1", "lightpink1") ) +
geom_text(aes(label = paste0( round(value*100, 0),"%")),
position = position_stack(vjust = 0.5), size = 5) +
rotate_X_labels + space_axes +
labs(x="Age Group", y="")
GLU_index_pr_M
# Save the plot.
ggsave("Laboratory_data/QCtotal_d_glu_body_meta_2_agegroup_GLU_index_male.tx",
GLU_index_pr_M, device="png", width=6, height=4.5, unit="in", dpi=300)
# Save the plot.
ggsave("Laboratory_data/QCtotal_d_glu_body_meta_2_agegroup_GLU_index_male.png",
GLU_index_pr_M, device="png", width=6, height=4.5, unit="in", dpi=300)
# ---------------------------------------------------------------------------------------------------------------
# Repeat the same operation and tables for females will be created.
# female
# Select females
glu_2_females <- subset(glu_2, RIAGENDR == 2)
# Check the dimension of the selected data - 851 rows.
nrow(glu_2_females)
# Create a table with the count of each agegroup and GLU_index combination.
# The variable to be counted can be any one with no missing data; therefore, "SEQN" is selected here.
longtable <- aggregate(SEQN ~ agegroup + GLU_index,
data = glu_2_females,   # Change the input dataset here.
FUN = length)
longtable
# Make a short table with GLU_index levels in each column in order to compute their proportions.
shorttable <- reshape2::dcast(longtable, agegroup ~ GLU_index, sum)
shorttable
# Calculate the sum of all the levels of GLU_index.
shorttable$sum <- rowSums(shorttable[, 2:4])
# Calculate the proportion of each - to be used as percentages.
shorttable$Normal_pr      <- shorttable$Normal/shorttable$sum
shorttable$Prediabetic_pr <- shorttable$Prediabetic/shorttable$sum
shorttable$Diabetic_pr    <- shorttable$Diabetic/shorttable$sum
# Calculate the sum of the proportions - should be all 1.
shorttable$sum_pr <- rowSums(shorttable[, 6:8])
shorttable
# Take the proportions and make it into a long table again for plotting.
longtable_pr <- reshape2::melt(shorttable[, c(1, 6:8)])
longtable_pr
# Generate a stacked barchart for females: GLU_index_pr_F.
GLU_index_pr_F <- ggplot(longtable_pr, aes(x= agegroup, y= value, fill= variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c("steelblue2", "lightgoldenrod1", "lightpink1") ) +
geom_text(aes(label = paste0( round(value*100, 0),"%")),
position = position_stack(vjust = 0.5), size = 5) +
rotate_X_labels + space_axes +
labs(x="Age Group", y="")
GLU_index_pr_F
# side-by-side
panel <- gridExtra::grid.arrange(GLU_index_pr_F, GLU_index_pr_M, nrow = 1)
panel
# Save the plot.
ggsave("Laboratory_data/QCtotal_d_glu_body_meta_2_agegroup_GLU_index_female.png",
GLU_index_pr_F, device="png", width=6, height=4.5, unit="in", dpi=300)
# Generate a stacked barchart for females: GLU_index_pr_F.
GLU_index_pr_F <- ggplot(longtable_pr, aes(x= agegroup, y= value, fill= variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c("aquamarine3", "lightgoldenrod1", "lightpink1") ) +
geom_text(aes(label = paste0( round(value*100, 0),"%")),
position = position_stack(vjust = 0.5), size = 5) +
rotate_X_labels + space_axes +
labs(x="Age Group", y="")
GLU_index_pr_F
# Generate a stacked barchart for females: GLU_index_pr_F.
GLU_index_pr_F <- ggplot(longtable_pr, aes(x= agegroup, y= value, fill= variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c("steelblue2", "lightgoldenrod1", "lightpink1") ) +
geom_text(aes(label = paste0( round(value*100, 0),"%")),
position = position_stack(vjust = 0.5), size = 5) +
rotate_X_labels + space_axes +
labs(x="Age Group", y="")
GLU_index_pr_F
