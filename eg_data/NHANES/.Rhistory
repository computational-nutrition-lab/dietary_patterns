stacked_wo_SD
# Plot a barchart without SD.
# Change the font size if necessary.
# This assumes that CPT_kcal has "Group" column.
stacked_wo_SD <- StackedwoSD_NHANES(data= CPT_kcal) + theme(axis.text.x=element_text(size=11))
stacked_wo_SD
# ====================================================================================================================
# Plot individual bars for each macronutrients (3 bars in total) with SD ... NHANES
# ====================================================================================================================
DodgedBarchart_NHANES <- function(data){
ggplot(data, aes(x = factor(Group), y = mean, fill = macronutrient, colour = macronutrient)) +
geom_bar(stat = "identity", position = "dodge", color="black")  +
geom_errorbar(aes(ymin= mean, ymax= mean + sd), position = position_dodge(0.9), width = 0.25,
color="black") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
}
CalcStackedSD_NHANES <- function(input.df, out.fn){
# Generate a dataframe to save sd data.
CPT_kcal_forstacked <<- data.frame(matrix(NA, nrow=length(individuals)*3, ncol=7))
# Specify its column names.
colnames(CPT_kcal_forstacked) <- c("Grroup", "macronutrient", "n", "mean", "sd", "sd_base", "sd_stacked")
for(i in 1:length(individuals)){
if(i == 1){
ith_user <- subset(input.df, UserName == individuals[i])
# CARBmeanval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "mean"]
PROTmeanval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "mean"]
TFATmeanval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "mean"]
CARBsdval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "sd"]
PROTsdval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "sd"]
TFATsdval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "sd"]
# sd values for stacked barchart.
ith_user$sd_base <- c(TFATmeanval+PROTmeanval,  # carb, on top of the stacked barchart.
TFATmeanval,              # prot, in the middle.
0)                        # tfat, on the bottom.
ith_user$sd_stacked <-  c(CARBsdval+PROTmeanval+TFATmeanval,    # carb, on top of the stacked barchart.
PROTsdval+TFATmeanval,                # prot, in the middle.
TFATsdval)                            # tfat, on the bottom.
# for i=1, make the first result dataframe.
CPT_kcal_forstacked[c(i,i+1,i+2), ] <- ith_user
}else{
ith_user <- subset(input.df, Group == individuals[i])
# CARBmeanval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "mean"]
PROTmeanval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "mean"]
TFATmeanval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "mean"]
CARBsdval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "sd"]
PROTsdval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "sd"]
TFATsdval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "sd"]
# sd values for stacked barchart.
ith_user$sd_base <- c(TFATmeanval+PROTmeanval,  # carb, on top of the stacked barchart.
TFATmeanval,              # prot, in the middle.
0)                        # tfat, on the bottom.
ith_user$sd_stacked <-  c(CARBsdval+PROTmeanval+TFATmeanval,    # carb, on top of the stacked barchart.
PROTsdval+TFATmeanval,                # prot, in the middle.
TFATsdval)                            # tfat, on the bottom.
# need another value k in order to specify the correct row.
k = i-2
# for i = 2,3,4,..., combine rows with the previously made CPT_kcal_forstacked.
CPT_kcal_forstacked[c(i+i+k, i+i+k+1, i+i+k+2), ] <- ith_user
}
}
# Save the resultant file as .txt file.
write.table(x=CPT_kcal_forstacked, file = out.fn, sep="\t", row.names=F, quote=F)
}
# Create a vector that contains all the users (individuals).
individuals <- unique(CPT_kcal$Group)
individuals
# Calculate sd_base and sd_forstacked for stacked barchart.
# Note that this function assumes all users (individuals) have CARB, PROT, and TFAT values.
CalcStackedSD_NHANES(input.df= CPT_kcal, out.fn= "ccc2_CPT_kcal_forstacked.txt")
CalcStackedSD_NHANES <- function(input.df, out.fn){
# Generate a dataframe to save sd data.
CPT_kcal_forstacked <<- data.frame(matrix(NA, nrow=length(individuals)*3, ncol=7))
# Specify its column names.
colnames(CPT_kcal_forstacked) <- c("Grroup", "macronutrient", "n", "mean", "sd", "sd_base", "sd_stacked")
for(i in 1:length(individuals)){
if(i == 1){
ith_user <- subset(input.df, Group == individuals[i])
# CARBmeanval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "mean"]
PROTmeanval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "mean"]
TFATmeanval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "mean"]
CARBsdval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "sd"]
PROTsdval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "sd"]
TFATsdval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "sd"]
# sd values for stacked barchart.
ith_user$sd_base <- c(TFATmeanval+PROTmeanval,  # carb, on top of the stacked barchart.
TFATmeanval,              # prot, in the middle.
0)                        # tfat, on the bottom.
ith_user$sd_stacked <-  c(CARBsdval+PROTmeanval+TFATmeanval,    # carb, on top of the stacked barchart.
PROTsdval+TFATmeanval,                # prot, in the middle.
TFATsdval)                            # tfat, on the bottom.
# for i=1, make the first result dataframe.
CPT_kcal_forstacked[c(i,i+1,i+2), ] <- ith_user
}else{
ith_user <- subset(input.df, Group == individuals[i])
# CARBmeanval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "mean"]
PROTmeanval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "mean"]
TFATmeanval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "mean"]
CARBsdval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "sd"]
PROTsdval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "sd"]
TFATsdval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "sd"]
# sd values for stacked barchart.
ith_user$sd_base <- c(TFATmeanval+PROTmeanval,  # carb, on top of the stacked barchart.
TFATmeanval,              # prot, in the middle.
0)                        # tfat, on the bottom.
ith_user$sd_stacked <-  c(CARBsdval+PROTmeanval+TFATmeanval,    # carb, on top of the stacked barchart.
PROTsdval+TFATmeanval,                # prot, in the middle.
TFATsdval)                            # tfat, on the bottom.
# need another value k in order to specify the correct row.
k = i-2
# for i = 2,3,4,..., combine rows with the previously made CPT_kcal_forstacked.
CPT_kcal_forstacked[c(i+i+k, i+i+k+1, i+i+k+2), ] <- ith_user
}
}
# Save the resultant file as .txt file.
write.table(x=CPT_kcal_forstacked, file = out.fn, sep="\t", row.names=F, quote=F)
}
# Calculate sd_base and sd_forstacked for stacked barchart.
# Note that this function assumes all users (individuals) have CARB, PROT, and TFAT values.
CalcStackedSD_NHANES(input.df= CPT_kcal, out.fn= "ccc2_CPT_kcal_forstacked.txt")
# Create a vector that contains all the groups.
groups <- unique(CPT_kcal$Group)
CalcStackedSD_NHANES <- function(input.df, out.fn){
# Generate a dataframe to save sd data.
CPT_kcal_forstacked <<- data.frame(matrix(NA, nrow=length(groups)*3, ncol=7))
# Specify its column names.
colnames(CPT_kcal_forstacked) <- c("Grroup", "macronutrient", "n", "mean", "sd", "sd_base", "sd_stacked")
for(i in 1:length(groups)){
if(i == 1){
ith_user <- subset(input.df, Group == groups[i])
# CARBmeanval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "mean"]
PROTmeanval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "mean"]
TFATmeanval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "mean"]
CARBsdval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "sd"]
PROTsdval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "sd"]
TFATsdval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "sd"]
# sd values for stacked barchart.
ith_user$sd_base <- c(TFATmeanval+PROTmeanval,  # carb, on top of the stacked barchart.
TFATmeanval,              # prot, in the middle.
0)                        # tfat, on the bottom.
ith_user$sd_stacked <-  c(CARBsdval+PROTmeanval+TFATmeanval,    # carb, on top of the stacked barchart.
PROTsdval+TFATmeanval,                # prot, in the middle.
TFATsdval)                            # tfat, on the bottom.
# for i=1, make the first result dataframe.
CPT_kcal_forstacked[c(i,i+1,i+2), ] <- ith_user
}else{
ith_user <- subset(input.df, Group == groups[i])
# CARBmeanval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "mean"]
PROTmeanval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "mean"]
TFATmeanval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "mean"]
CARBsdval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "sd"]
PROTsdval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "sd"]
TFATsdval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "sd"]
# sd values for stacked barchart.
ith_user$sd_base <- c(TFATmeanval+PROTmeanval,  # carb, on top of the stacked barchart.
TFATmeanval,              # prot, in the middle.
0)                        # tfat, on the bottom.
ith_user$sd_stacked <-  c(CARBsdval+PROTmeanval+TFATmeanval,    # carb, on top of the stacked barchart.
PROTsdval+TFATmeanval,                # prot, in the middle.
TFATsdval)                            # tfat, on the bottom.
# need another value k in order to specify the correct row.
k = i-2
# for i = 2,3,4,..., combine rows with the previously made CPT_kcal_forstacked.
CPT_kcal_forstacked[c(i+i+k, i+i+k+1, i+i+k+2), ] <- ith_user
}
}
# Save the resultant file as .txt file.
write.table(x=CPT_kcal_forstacked, file = out.fn, sep="\t", row.names=F, quote=F)
}
# Calculate sd_base and sd_forstacked for stacked barchart.
# Note that this function assumes all users (individuals) have CARB, PROT, and TFAT values.
CalcStackedSD_NHANES(input.df= CPT_kcal, out.fn= "ccc2_CPT_kcal_forstacked.txt")
# Calculate sd_base and sd_forstacked for stacked barchart.
# Note that this function assumes all users (individuals) have CARB, PROT, and TFAT values.
CalcStackedSD_NHANES(input.df= CPT_kcal, out.fn= "ccc2_CPT_kcal_forstacked.txt")
StackedWithSD_NHANES <- function(data){
ggplot(data, aes(x = Group, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black", width = 0.7)  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
# scale_fill_manual(values = distinct100colors,
#                   labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
}
# Stacked barchart with SD as error bars.
stacked_with_SD <- StackedWithSD_NHANES(data= CPT_kcal_forstacked_read) + theme(axis.text.x=element_text(size=11))
stacked_with_SD
CPT_kcal_forstacked_read
# Load the saved file that has SD for stacked barchart.
CPT_kcal_forstacked_read <- read.table("ccc2_CPT_kcal_forstacked.txt", sep="\t", header=T)
# Stacked barchart with SD as error bars.
stacked_with_SD <- StackedWithSD_NHANES(data= CPT_kcal_forstacked_read) + theme(axis.text.x=element_text(size=11))
stacked_with_SD
CPT_kcal_forstacked_read
CalcStackedSD_NHANES <- function(input.df, out.fn){
# Generate a dataframe to save sd data.
CPT_kcal_forstacked <<- data.frame(matrix(NA, nrow=length(groups)*3, ncol=7))
# Specify its column names.
colnames(CPT_kcal_forstacked) <- c("Group", "macronutrient", "n", "mean", "sd", "sd_base", "sd_stacked")
for(i in 1:length(groups)){
if(i == 1){
ith_user <- subset(input.df, Group == groups[i])
# CARBmeanval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "mean"]
PROTmeanval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "mean"]
TFATmeanval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "mean"]
CARBsdval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "sd"]
PROTsdval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "sd"]
TFATsdval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "sd"]
# sd values for stacked barchart.
ith_user$sd_base <- c(TFATmeanval+PROTmeanval,  # carb, on top of the stacked barchart.
TFATmeanval,              # prot, in the middle.
0)                        # tfat, on the bottom.
ith_user$sd_stacked <-  c(CARBsdval+PROTmeanval+TFATmeanval,    # carb, on top of the stacked barchart.
PROTsdval+TFATmeanval,                # prot, in the middle.
TFATsdval)                            # tfat, on the bottom.
# for i=1, make the first result dataframe.
CPT_kcal_forstacked[c(i,i+1,i+2), ] <- ith_user
}else{
ith_user <- subset(input.df, Group == groups[i])
# CARBmeanval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "mean"]
PROTmeanval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "mean"]
TFATmeanval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "mean"]
CARBsdval <- subset(ith_user, macronutrient=="CARB_kcal_pct")[, "sd"]
PROTsdval <- subset(ith_user, macronutrient=="PROT_kcal_pct")[, "sd"]
TFATsdval <- subset(ith_user, macronutrient=="TFAT_kcal_pct")[, "sd"]
# sd values for stacked barchart.
ith_user$sd_base <- c(TFATmeanval+PROTmeanval,  # carb, on top of the stacked barchart.
TFATmeanval,              # prot, in the middle.
0)                        # tfat, on the bottom.
ith_user$sd_stacked <-  c(CARBsdval+PROTmeanval+TFATmeanval,    # carb, on top of the stacked barchart.
PROTsdval+TFATmeanval,                # prot, in the middle.
TFATsdval)                            # tfat, on the bottom.
# need another value k in order to specify the correct row.
k = i-2
# for i = 2,3,4,..., combine rows with the previously made CPT_kcal_forstacked.
CPT_kcal_forstacked[c(i+i+k, i+i+k+1, i+i+k+2), ] <- ith_user
}
}
# Save the resultant file as .txt file.
write.table(x=CPT_kcal_forstacked, file = out.fn, sep="\t", row.names=F, quote=F)
}
# Calculate sd_base and sd_forstacked for stacked barchart.
# Note that this function assumes all users (individuals) have CARB, PROT, and TFAT values.
CalcStackedSD_NHANES(input.df= CPT_kcal, out.fn= "ccc2_CPT_kcal_forstacked.txt")
# Calculate sd_base and sd_forstacked for stacked barchart.
# Note that this function assumes all users (individuals) have CARB, PROT, and TFAT values.
CalcStackedSD_NHANES(input.df= CPT_kcal, out.fn= "ccc2_CPT_kcal_forstacked.txt")
# Load the saved file that has SD for stacked barchart.
CPT_kcal_forstacked_read <- read.table("ccc2_CPT_kcal_forstacked.txt", sep="\t", header=T)
CPT_kcal_forstacked_read
# Stacked barchart with SD as error bars.
stacked_with_SD <- StackedWithSD_NHANES(data= CPT_kcal_forstacked_read) + theme(axis.text.x=element_text(size=11))
stacked_with_SD
# Load the saved file that has SD for stacked barchart.
CPT_kcal_forstacked_read <- read.table("ccc2_CPT_kcal_forstacked.txt", sep="\t", header=T)
StackedWithSD_NHANES <- function(data){
ggplot(data, aes(x = Group, y = mean, fill=macronutrient, colour=macronutrient)) +
geom_bar(stat = "identity", position = "stack", colour = "black", width = 0.7)  +
geom_errorbar(aes(ymin= mean+sd_base, ymax= mean+sd_stacked), width = 0.15, color="grey10") +
scale_fill_manual(values = distinct100colors,
labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x= element_blank(), y= "Percentages of total kcal intake", fill = "Macronutrients") +
no_grid + space_axes +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1))
}
# Stacked barchart with SD as error bars.
stacked_with_SD <- StackedWithSD_NHANES(data= CPT_kcal_forstacked_read) + theme(axis.text.x=element_text(size=11))
stacked_with_SD
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Import source code to run the analyses to follow.
source("lib/specify_data_dir.R")
source("lib/ggplot2themes.R")
source("lib/percent_kcal.R")
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Import source code to run the analyses to follow.
source("lib/specify_data_dir.R")
source("lib/ggplot2themes.R")
source("lib/percent_kcal.R")
# Call color palette.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# Load example totals data
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/")
# Load the totals with demographic data.
totals <- read.table("Total_D12_FC_QC_mean_QC_d.txt",  sep = "\t", header = T)
head(totals)
dim(totals)
# Check the distribution of gender. 1: male, 2: female.
table(totals$RIAGENDR)
# Add a new column of Gender.
totals$Gender = NA
totals
totals$Gender
# Add gender index to totals.
for(i in 1:nrow(totals)){
if(     totals$RIAGENDR[i]==1){totals$Gender[i] <- "M"}
else if(totals$RIAGENDR[i]==2){totals$Gender[i] <- "F"}
}
# Ensure the distribution is correct.
table(totals$Gender)
# Check the distribution of gender. 1: male, 2: female.
table(totals$RIAGENDR)
# Look at the summary of age. Min is 18 and max is 80.
summary(totals$RIDAGEYR)
# Add a new column of AgeGroup.
totals$AgeGroup = NA
# Add age group index to totals.
for(i in 1:nrow(totals)){
if(     totals$RIDAGEYR[i] < 20){totals$AgeGroup[i] <- "18_19"}
else if(totals$RIDAGEYR[i] < 30){totals$AgeGroup[i] <- "20s"}
else if(totals$RIDAGEYR[i] < 40){totals$AgeGroup[i] <- "30s"}
else if(totals$RIDAGEYR[i] < 50){totals$AgeGroup[i] <- "40s"}
else if(totals$RIDAGEYR[i] < 60){totals$AgeGroup[i] <- "50s"}
else if(totals$RIDAGEYR[i] < 70){totals$AgeGroup[i] <- "60s"}
else                                     {totals$AgeGroup[i] <- "70s_80s"}
}
# Ensure grouping has been done correctly.
head(totals[, c("RIAGENDR", "Gender", "RIDAGEYR", "AgeGroup")])
# Combine Age_Group and Gender as a new factor. e.g. "M_40s".
totals$Gender_Age <- paste(totals$Gender, totals$AgeGroup, sep="_")
# Check the distribution.
table(totals$Gender_Age)
# Calculate the %kcal of CARB, PROT, and TFAT for each user and take means by Gender_Age.
CPTpctKcalPerUser_NHANES(inputfn=totals, group='Gender_Age', across='SEQN', outfn="ccc2.txt")
# Calculate the %kcal of CARB, PROT, and TFAT for each user and take means by Gender_Age.
CPTpctKcalPerUser_NHANES(inputfn=totals, group='Gender_Age', across='SEQN', outfn="Total_D12_FC_QC_mean_QC_d_CPT_kcal.txt")
# Load the output.
CPT_kcal <- read.table("Total_D12_FC_QC_mean_QC_d_CPT_kcal.txt", sep="\t", header=T)
head(CPT_kcal)
# Plot a barchart without SD.
# Change the font size if necessary.
# This assumes that CPT_kcal has "Group" column.
stacked_wo_SD <- StackedwoSD_NHANES(data= CPT_kcal) + theme(axis.text.x=element_text(size=11))
stacked_wo_SD
# Save as a .pdf.
ggsave(x=stacked_wo_SD, filename="Total_D12_FC_QC_mean_QC_d_CPT_kcal_wo_SD.png",
device="png", width=6.2, height=4.2)
# Save as a .pdf.
ggsave(stacked_wo_SD, "Total_D12_FC_QC_mean_QC_d_CPT_kcal_wo_SD.png",
device="png", width=6.2, height=4.2)
# Save as a .pdf.
ggsave(stacked_wo_SD, "Total_D12_FC_QC_mean_QC_d_CPT_kcal_wo_SD.png",
device="png", width=6.2, height=4.2, units="in", dpi=300)
stacked_wo_SD
# Save as a .pdf.
ggsave("Total_D12_FC_QC_mean_QC_d_CPT_kcal_wo_SD.png", stacked_wo_SD,
device="png", width=6.2, height=4.2, units="in", dpi=300)
# Save as a .pdf.
ggsave("Total_D12_FC_QC_mean_QC_d_CPT_kcal_wo_SD.pdf", stacked_wo_SD,
device="pdf", width=6.2, height=4.2, units="in", dpi=300)
# --------------------------------------------------------------------------------------------------------------
# Plot the "dodge"-type of barchart (3 bars per group, NOT STACKED).
# Change the font size if necessary.
dodgedtypebarchart <- DodgedBarchart_NHANES(data= CPT_kcal) + theme(axis.text.x=element_text(size=11))
dodgedtypebarchart
# Save as a .pdf.
ggsave("Total_D12_FC_QC_mean_QC_d_CPT_kcal_dodgedtypebarchart.pdf", dodgedtypebarchart,
device="pdf", width=9.0, height=4, units="in", dpi=300)
# Save as a .pdf.
ggsave("Total_D12_FC_QC_mean_QC_d_CPT_kcal_dodgedtypebarchart.png", dodgedtypebarchart,
device="png", width=9.0, height=4, units="in", dpi=300)
# Create a vector that contains all the groups.
groups <- unique(CPT_kcal$Group)
groups
# Calculate sd_base and sd_forstacked for stacked barchart.
# Note that this function assumes all users (individuals) have CARB, PROT, and TFAT values.
CalcStackedSD_NHANES(input.df= CPT_kcal, out.fn= "Total_D12_FC_QC_mean_QC_d_CPT_kcal_forstacked.txt")
# Load the saved file that has SD for stacked barchart.
CPT_kcal_forstacked_read <- read.table("Total_D12_FC_QC_mean_QC_d_CPT_kcal_forstacked.txt", sep="\t", header=T)
# Stacked barchart with SD as error bars.
stacked_with_SD <- StackedWithSD_NHANES(data= CPT_kcal_forstacked_read) + theme(axis.text.x=element_text(size=11))
stacked_with_SD
stacked_with_SD
# Save as a .pdf.
ggsave("Total_D12_FC_QC_mean_QC_d_CPT_kcal_with_SD.png", stacked_with_SD,
device="png", width=6.2, height=4.3, units="in", dpi=300)
# Save as a .pdf.
ggsave("Total_D12_FC_QC_mean_QC_d_CPT_kcal_with_SD.pdf", stacked_with_SD,
device="pdf", width=6.2, height=4.3, units="in", dpi=300)
# Save as a .pdf.
ggsave("VVKAJ_Tot_m_QCed_CPT_kcal_wo_SD.pdf", stacked_wo_SD,
device="pdf", width=6.2, height=4.2, units="in", dpi=300)
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Import source code to run the analyses to follow.
source("lib/specify_data_dir.R")
source("lib/percent_kcal.R")
# Load example totals data
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/")
# Load the totals data.
totals <- read.table("VVKAJ_Tot_m_QCed.txt",  sep = "\t", header = T)
# --------------------------------------------------------------------------------------------------------------
# Calculate the mean and SD of CARB, PROT, and TFAT.
CPTgramsPerUser(inputfn= totals, user.name = "UserName", recall.no = "RecallNo",
outfn="VVKAJ_Tot_m_QCed_CPT_g.txt")
# Calculate the mean % of energy intake (kcal) and SD of CARB, PROT, and TFAT.
CPTpctKcalPerUser(inputfn=totals, user.name = "UserName", recall.no = "RecallNo",
outfn="VVKAJ_Tot_m_QCed_CPT_kcal.txt")
# Load the %kcal values
CPT_kcal <- read.table("VVKAJ_Tot_m_QCed_CPT_kcal.txt", sep="\t", header=T)
CPT_kcal
# --------------------------------------------------------------------------------------------------------------
# Plot a barchart without SD.
# Change the font size if necessary.
stacked_wo_SD <- StackedwoSD(data= CPT_kcal) + theme(axis.text.x=element_text(size=11))
stacked_wo_SD
stacked_wo_SD
# Save as a .pdf.
ggsave("VVKAJ_Tot_m_QCed_CPT_kcal_wo_SD.pdf", stacked_wo_SD,
device="pdf", width=6.2, height=4.2, units="in", dpi=300)
# --------------------------------------------------------------------------------------------------------------
# Plot the "dodge"-type of barchart (3 bars per user, NOT STACKED).
# Change the font size if necessary.
dodgedtypebarchart <- DodgedBarchart(data= CPT_kcal) + theme(axis.text.x=element_text(size=11))
dodgedtypebarchart
# Save as a .pdf.
ggsave("VVKAJ_Tot_m_QCed_CPT_kcal_CPT_kcal_dodgedtypebarchart.pdf", dodgedtypebarchart,
device="pdf", width=9.0, height=4, units="in", dpi=300)
# Create a vector that contains all the users (individuals).
individuals <- unique(CPT_kcal$UserName)
# Calculate sd_base and sd_forstacked for stacked barchart.
# Note that this function assumes all users (individuals) have CARB, PROT, and TFAT values.
CalcStackedSD(input.df= CPT_kcal, out.fn= "CPT_kcal_forstacked.txt")
# Load the saved file that has SD for stacked barchart.
CPT_kcal_forstacked_read <- read.table("CPT_kcal_forstacked.txt", sep="\t", header=T)
# Stacked barchart with SD as error bars.
stacked_with_SD <- StackedWithSD(data=CPT_kcal_forstacked_read) + theme(axis.text.x=element_text(size=11))
stacked_with_SD
stacked_with_SD
# Save as a .pdf.
ggsave("VVKAJ_Tot_m_QCed_CPT_kcal_CPT_kcal_with_SD.pdf", stacked_with_SD,
device="pdf", width=6.2, height=4.3, units="in", dpi=300)
# You can also change the breakpoints of the Y axis.
stacked_with_SD + scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100))
stacked_with_SD
stacked_wo_SD
# Save as a .png.
ggsave("VVKAJ_Tot_m_QCed_CPT_kcal_wo_SD.png", stacked_wo_SD,
device="png", width=6.2, height=4.2, units="in", dpi=300)
# Save as a .png.
ggsave("VVKAJ_Tot_m_QCed_CPT_kcal_CPT_kcal_dodgedtypebarchart.png", dodgedtypebarchart,
device="png", width=9.0, height=4, units="in", dpi=300)
stacked_with_SD
# Save as a .png.
ggsave("VVKAJ_Tot_m_QCed_CPT_kcal_CPT_kcal_with_SD.png", stacked_with_SD,
device="png", width=6.2, height=4.3, units="in", dpi=300)
# You can also change the breakpoints of the Y axis.
stacked_with_SD + scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100))
n
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Import source code to run the analyses to follow.
source("lib/specify_data_dir.R")
source("lib/ggplot2themes.R")
source("lib/percent_kcal.R")
# Call color palette.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# --------------------------------------------------------------------------------------------------------------
# Load example totals data
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/")
# Load the totals with demographic data.
totals <- read.table("Total_D12_FC_QC_mean_QC_d.txt",  sep = "\t", header = T)
# Check the distribution of gender. 1: male, 2: female.
table(totals$RIAGENDR)
# Function to add gender and age groups to NHANES totals data.
AddGenderAgeGroups <- function(input=totals, age.col="RIDAGEYR", gender.col="RIAGENDR"){
# rename input.
totals2 <- input
age.col.number <- which(colnames(totals2)==age.col)
print(age.col.number)
# Add a new column of Gender.
totals2$Gender = NA
print(head(totals2$Gender))
# # Add gender index to totals.
# for(i in 1:nrow(totals2)){
#   if(     totals2$RIAGENDR[i]==1){totals2$Gender[i] <- "M"}
#   else if(totals2$RIAGENDR[i]==2){totals2$Gender[i] <- "F"}
}
AddGenderAgeGroups(input=totals, age.col="RIDAGEYR", gender.col="RIAGENDR")
colnames(totals)
# Function to add gender and age groups to NHANES totals data.
AddGenderAgeGroups <- function(input=totals, age.col="RIDAGEYR", gender.col="RIAGENDR"){
# rename input.
totals2 <- input
# column number of gender
gender.col.number <- which(colnames(totals2)==gender.col)
print(gender.col.number)
# Add a new column of Gender.
totals2$Gender = NA
# Add gender index to totals.
for(i in 1:nrow(totals2)){
if(     totals2[i, gender.col.number]==1){totals2$Gender[i] <- "M"}
else if(totals2[i, gender.col.number]==2){totals2$Gender[i] <- "F"}
}
# column number of age
age.col.number <- which(colnames(totals2)==age.col)
print(age.col.number)
print(head(totals2))
}
AddGenderAgeGroups(input=totals, age.col="RIDAGEYR", gender.col="RIAGENDR")
