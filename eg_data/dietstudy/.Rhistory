# mycol
bbb = as.data.frame(table(mycol))
bbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
library(psych)
install.packages(psych)
install.packages("psych")
library(psych)
Holzinger.9
cor.plot(Holzinger.9,numbers=TRUE)
factanal(factors = 2, covmat = Holzinger.9, n.obs = 145,
rotation = "varimax")
ev <- eigen(Holzinger.9)
ev
fa <- factanal(factors = 2, covmat = Holzinger.9,n.obs = 145,
rotation = "varimax")
cluster.plot(fa)
cluster.plot(fa)
cluster.plot(fa)
# ------------------------------------------------------------------------------------------
# From the agricolae maintainer, Filipe de Mendiburu Delgado, 01/25/2022.
library(agricolae)
data(cotton)
cotton$lineage<-as.factor(cotton$lineage)
cotton$epoca<-as.factor(cotton$epoca)
# Build a mixed effect model with the block effect.
mymodel <- lmer(yield ~ lineage + (1|block), data = cotton)
# Build a mixed effect model with the block effect.
mymodel <- lme4::lmer(yield ~ lineage + (1|block), data = cotton)
out1<-anova(mymodel, type="3", test.statistic= "F")
out1<-agricolae::anova(mymodel, type="3", test.statistic= "F")
out1<-lme4::anova(mymodel, type="3", test.statistic= "F")
out1<-lmerTest::anova(mymodel, type="3", test.statistic= "F")
out1<-emmeans::anova(mymodel, type="3", test.statistic= "F")
# ------------------------------------------------------------------------------------------
# Load packages
library(agricolae)
data(cotton)
library(lm4)
library(lmerTest)
# Build a mixed effect model with the block effect.
mymodel <- lmer(yield ~ lineage + (1|block), data = cotton)
# Show anova table. But this does not show DFerror and MSerror that
# I need for LSD.test.
anova(mymodel,  type="3", test.statistic= "F")
# Build a mixed effect model with the block effect.
mymodel <- lme4::lmer(yield ~ lineage + (1|block), data = cotton)
out1<-emmeans::anova(mymodel, type="3", test.statistic= "F")
out1<-anova(mymodel, type="3", test.statistic= "F")
# Build a mixed effect model with the block effect.
mymodel <- lmer(yield ~ lineage + (1|block), data = cotton)
out1 <- anova(mymodel, type="3", test.statistic= "F")
out1
out2<-summary(mymodel)
out2
View(out2)
out3<-with(cotton, LSD.test(yield, lineage, DFerror, MSerror, console = TRUE))
DFerror <- out1$DenDF
MSerror <- out2$sigma^2
out3<-with(cotton, LSD.test(yield, lineage, DFerror, MSerror, console = TRUE))
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
data(pigs)
agricolae::data(cotton)
data(cotton)
library(agricolae)
data(cotton)
data(pigs)
library(emmeans)
data(pigs)
head(pigs)
head(pigs,10)
table(pigs$source)
table(pigs$percent)
# Use pigs data and build a model
mod3 = nlme::gls(conc ~ source, data = pigs,
weights = varIdent(form = ~1 | source)) # This part
library(gls)
library(nlme)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t") # sep="," for 1 column, sep="\t" for multiple columns
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t") # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
head(mydata)
tail(mydata)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t") # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
head(mydata)
tail(mydata)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t") # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
head(mydata)
tail(mydata)
plot(mydata$V1)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t") # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
head(mydata)
# write.table(mycol, "clipboard", sep="\t")
mydata
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t") # sep="," for 1 column, sep="\t" for multiple columns
source("E:/MSU OneDrive 20210829/Uni/Beans/Expts/15. FlourSurvey/91 responses/Survey_analysis_91.R", echo=TRUE)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t") # sep="," for 1 column, sep="\t" for multiple columns
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t") # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
mydata
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t") # sep="," for 1 column, sep="\t" for multiple columns
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t") # sep="," for 1 column, sep="\t" for multiple columns
head(mydata)
tail(mydata)
mydata[2176,]
mydata[2177,]
# Load the text file with food code and descriptions.
codetable <- read.table("FoodCodes_Description.txt", sep="")
setwd("E:/MSU OneDrive 20210829/UMinn/10_ASA24/ASA242020-data-dictionaries")
codetable <- read.table("FoodCodes_Description.txt", sep="")
codetable <- read.table("FoodCodes_Description.txt", sep="\t")
# ========================================================================================
# Import NHANES data.
# ========================================================================================
#
# ---------------------------------------------------------------------------------------------------------------
# Import data.
# install.packages("SASxport")
require(SASxport)
library(foreign)
setwd("E:/MSU OneDrive 20210829/UMinn/20_NHANES")
nhanes1718 <- read.xport("DR1IFF_J.XPT")
dim(nhanes1718)
head(nhanes1718, 10)
# How many participants?
length(unique(nhanes1718$SEQN))
codetable <- read.table("E:/MSU OneDrive 20210829/UMinn/10_ASA24/ASA242020-data-dictionaries/FoodCodes_Description.txt", sep="\t")
nhanes1718_raw <- read.xport("DR1IFF_J.XPT")
colnames(codetable)
# ---------------------------------------------------------------------------------------------------------------
# Load the text file with food code and descriptions.
codetable <- read.table("E:/MSU OneDrive 20210829/UMinn/10_ASA24/ASA242020-data-dictionaries/FoodCodes_Description.txt",
sep="\t", header = T)
colnames(codetable)
head(nhanes1718_raw, 10)
# ---------------------------------------------------------------------------------------------------------------
# Load the text file with food code and descriptions.
codetable <- read.table("E:/MSU OneDrive 20210829/UMinn/10_ASA24/ASA242020-data-dictionaries/FoodCodes_Description.txt",
sep="\t", col.names = c("DR1IFDCD", "Food_code_description"))
colnames(codetable)
# Merge the NHANES data and codetable.
nhanes1718 <- merge(nhanes1718_raw, codetable, by = "DR1IFDCD" )
# How many participants?
length(unique(nhanes1718$SEQN))
head(codetable)
# ---------------------------------------------------------------------------------------------------------------
# Load the text file with food code and descriptions.
codetable <- read.table("E:/MSU OneDrive 20210829/UMinn/10_ASA24/ASA242020-data-dictionaries/FoodCodes_Description.txt",
sep="\t", header = T)
col.names = c("DR1IFDCD", "Food_code_description")
head(codetable)
# Merge the NHANES data and codetable.
nhanes1718 <- merge(nhanes1718_raw, codetable, by = "DR1IFDCD", all = T)
# ---------------------------------------------------------------------------------------------------------------
# Load the text file with food code and descriptions.
codetable <- read.table("E:/MSU OneDrive 20210829/UMinn/10_ASA24/ASA242020-data-dictionaries/FoodCodes_Description.txt",
sep="\t", header = T)
col.names = c("DR1IFDCD", "Food_code_description")
head(codetable)
col.names(codetable) = c("DR1IFDCD", "Food_code_description")
colnames(codetable) = c("DR1IFDCD", "Food_code_description")
head(codetable)
# Merge the NHANES data and codetable.
nhanes1718 <- merge(nhanes1718_raw, codetable, by = "DR1IFDCD", all = T)
dim(nhanes1718_raw)
dim(nhanes1718)
# Merge the NHANES data and codetable.
nhanes1718 <- merge(nhanes1718_raw, codetable, by = "DR1IFDCD", all.x = T)
dim(nhanes1718_raw)
dim(nhanes1718)
head(nhanes1718, 10)
# How many participants?
length(unique(nhanes1718$SEQN))
head(nhanes1718_raw, 10)
# ---------------------------------------------------------------------------------------------------------------
# Load the text file with food code and descriptions.
codetable <- read.table("E:/MSU OneDrive 20210829/UMinn/10_ASA24/ASA242020-data-dictionaries/FoodCodes_Description.txt",
sep="\t", header = T)
colnames(codetable)
dim(nhanes1718_raw)
nhanes1718_raw$Food_code <- nhanes1718_raw$DR1IFDCD
dim(nhanes1718_raw)
head(nhanes1718_raw, 10)
# Have the food code at the beginning for merging.
nhanes1718_raw_2 <- nhanes1718_raw[, c(85, 1:84)]
colnames(nhanes1718_raw_2)
# ---------------------------------------------------------------------------------------------------------------
# Load the text file with food code and descriptions.
codetable <- read.table("E:/MSU OneDrive 20210829/UMinn/10_ASA24/ASA242020-data-dictionaries/FoodCodes_Description.txt",
sep="\t", header = T)
colnames(codetable)
head(codetable)
# Merge the NHANES data and codetable.
nhanes1718 <- merge(nhanes1718_raw, codetable, by="Food_code", all.x=T) # all.x means 'match all the rows in the first dataframe.
dim(nhanes1718_raw_2)
dim(nhanes1718)
head(nhanes1718, 10)
# Merge the NHANES data and codetable.
nhanes1718 <- merge(nhanes1718_raw_2, codetable, by="Food_code", all.x=T) # all.x means 'match all the rows in the first dataframe.
dim(nhanes1718_raw_2)
dim(nhanes1718)
head(nhanes1718, 10)
str(nhanes1718_raw_2)
head(nhanes1718_raw_2)
head(codetable)
head(nhanes1718)
aaa = head(nhanes1718, 30)
aaa[, 86]
aaa = head(nhanes1718, 100)
aaa[, 86]
# Merge the NHANES data and codetable.
nhanes1718 <- merge(nhanes1718_raw_2, codetable, by=Food_code, all.x=T) # all.x means 'match all the rows in the first dataframe.
# ---------------------------------------------------------------------------------------------------------------
# Load the text file with food code and descriptions.
codetable <- read.table("E:/MSU OneDrive 20210829/UMinn/10_ASA24/ASA242020-data-dictionaries/FoodCodes_Description.txt",
sep="\t", header = T)
head(codetable)
# Merge the NHANES data and codetable.
nhanes1718 <- merge(nhanes1718_raw_2, codetable, by="Food_code", all.x=T) # all.x means 'match all the rows in the first dataframe.
dim(nhanes1718)
head(nhanes1718_raw_2)
head(nhanes1718)
aaa[, 1]
colnames(nhanes1718_raw_2)
head(nhanes1718_raw_2, 2)
head(nhanes1718_raw_2$Food_code)
fulljoined = dplyr::full_join(nhanes1718_raw_2, codetable)
head(fulljoined)
dim(fulljoined)
fulljoined = dplyr::left_join(nhanes1718_raw_2, codetable)
head(fulljoined)
dim(fulljoined)
# Merge the NHANES data and codetable.
nhanes1718 <- merge(nhanes1718_raw_2, codetable, all.x=T) # all.x means 'match all the rows in the first dataframe.
dim(nhanes1718)
head(nhanes1718)
# Merge the NHANES data and codetable.
nhanes1718 <- merge(nhanes1718_raw_2, codetable, all.y=T) # all.x means 'match all the rows in the first dataframe.
dim(nhanes1718)
head(nhanes1718)
# Make a copy of the food code column at the end of nhanes1718_raw.
nhanes1718_raw$Food_code <- as.factor(nhanes1718_raw$DR1IFDCD)
# Have the food code at the beginning for merging.
nhanes1718_raw_2 <- nhanes1718_raw[, c(85, 1:84)]
colnames(nhanes1718_raw_2)
head(nhanes1718_raw_2$Food_code)
# ---------------------------------------------------------------------------------------------------------------
# Load the text file with food code and descriptions.
codetable <- read.table("E:/MSU OneDrive 20210829/UMinn/10_ASA24/ASA242020-data-dictionaries/FoodCodes_Description.txt",
sep="\t", header = T)
head(codetable)
# Merge the NHANES data and codetable.
nhanes1718 <- merge(nhanes1718_raw_2, codetable, all.x=T) # all.x means 'match all the rows in the first dataframe.
dim(nhanes1718)
head(nhanes1718)
nhanes1718_raw <- read.xport("DR1IFF_J.XPT")
dim(nhanes1718_raw)
head(nhanes1718_raw, 10)
# Make a copy of the food code column at the end of nhanes1718_raw.
nhanes1718_raw$Food_code <- as.factor(nhanes1718_raw$DR1IFDCD)
str(nhanes1718_raw)
# Make a copy of the food code column at the end of nhanes1718_raw.
nhanes1718_raw$Food_code <- nhanes1718_raw$DR1IFDCD
str(nhanes1718_raw)
# Have the food code at the beginning for merging.
nhanes1718_raw_2 <- nhanes1718_raw[, c(85, 1:84)]
colnames(nhanes1718_raw_2)
head(nhanes1718_raw_2, 2)
head(nhanes1718_raw_2$Food_code)
# ---------------------------------------------------------------------------------------------------------------
# Load the text file with food code and descriptions.
codetable <- read.table("E:/MSU OneDrive 20210829/UMinn/10_ASA24/ASA242020-data-dictionaries/FoodCodes_Description.txt",
sep="\t", header = T)
head(codetable)
# Merge the NHANES data and codetable.
nhanes1718 <- merge(nhanes1718_raw_2, codetable, all.x=T) # all.x means 'match all the rows in the first dataframe.
dim(nhanes1718)
head(nhanes1718)
str(nhanes1718_raw)
# Make a copy of the food code column at the end of nhanes1718_raw.
nhanes1718_raw$Food_code <- as.character(nhanes1718_raw$DR1IFDCD)
str(nhanes1718_raw)
# Have the food code at the beginning for merging.
nhanes1718_raw_2 <- nhanes1718_raw[, c(85, 1:84)]
colnames(nhanes1718_raw_2)
str(nhanes1718_raw_2)
head(nhanes1718_raw_2$Food_code)
# ---------------------------------------------------------------------------------------------------------------
# Load the text file with food code and descriptions.
codetable <- read.table("E:/MSU OneDrive 20210829/UMinn/10_ASA24/ASA242020-data-dictionaries/FoodCodes_Description.txt",
sep="\t", header = T)
head(codetable)
# Merge the NHANES data and codetable.
nhanes1718 <- merge(nhanes1718_raw_2, codetable, all.x=T) # all.x means 'match all the rows in the first dataframe.
dim(nhanes1718)
head(nhanes1718)
fulljoined = dplyr::left_join(nhanes1718_raw_2, codetable)
str(codetable)
codetable$Food_code <- as.character(codetable$Food_code)
str(codetable)
# Merge the NHANES data and codetable.
nhanes1718 <- merge(nhanes1718_raw_2, codetable, all.x=T) # all.x means 'match all the rows in the first dataframe.
dim(nhanes1718)
head(nhanes1718)
str(nhanes1718_raw_2)
# Merge the NHANES data and codetable.
nhanes1718 <- merge(nhanes1718_raw_2, codetable, by = "Food_code", all.x=T) # all.x means 'match all the rows in the first dataframe.
dim(nhanes1718)
head(nhanes1718)
fulljoined = dplyr::left_join(nhanes1718_raw_2, codetable)
head(fulljoined)
fulljoined = dplyr::left_join(nhanes1718_raw_2, codetable)
dim(fulljoined)
unique(nhanes1718$Food_code)
is(nhanes1718_raw)
nhanes1718_raw <- read.xport("DR1IFF_J.XPT", colClasses=c("DR1IFDCD"="character"))
is(nhanes1718_raw)
str(nhanes1718_raw)
nhanes1718_raw <- read.xport("DR1IFF_J.XPT", colClasses=c("DR1IFDCD"="character"))
str(nhanes1718_raw)
nhanes1718_raw <- read.xport("DR1IFF_J.XPT", colClasses=c("DR1IFDCD"="character", "SEQN"="character"))
str(nhanes1718_raw)
nhanes1718_raw <- read.xport("DR1IFF_J.XPT") #, colClasses=c("DR1IFDCD"="character", "SEQN"="character"))
dim(nhanes1718_raw)
head(nhanes1718_raw, 7)
# Make a copy of the food code column at the end of nhanes1718_raw.
nhanes1718_raw$Food_code <- as.integer(nhanes1718_raw$DR1IFDCD)
str(nhanes1718_raw)
# Have the food code at the beginning for merging.
nhanes1718_raw_2 <- nhanes1718_raw[, c(85, 1:84)]
colnames(nhanes1718_raw_2)
str(nhanes1718_raw_2)
head(nhanes1718_raw_2, 2)
head(nhanes1718_raw_2$Food_code)
# ---------------------------------------------------------------------------------------------------------------
# Load the text file with food code and descriptions.
codetable <- read.table("E:/MSU OneDrive 20210829/UMinn/10_ASA24/ASA242020-data-dictionaries/FoodCodes_Description.txt",
sep="\t", header = T)
head(codetable)
codetable$Food_code <- as.integer(codetable$Food_code)
# Merge the NHANES data and codetable.
nhanes1718 <- merge(nhanes1718_raw_2, codetable, by = "Food_code", all.x=T) # all.x means 'match all the rows in the first dataframe.
dim(nhanes1718)
head(nhanes1718)
unique(nhanes1718$Food_code)
head(nhanes1718_raw_2, 2)
unique(nhanes1718_raw_2$SEQN)
nrow(unique(nhanes1718_raw_2$SEQN))
length(unique(nhanes1718_raw_2$SEQN))
nhanes1718_raw <- read.xport("DR1IFF_J.XPT") #, colClasses=c("DR1IFDCD"="character", "SEQN"="character"))
# Add a sequential number to sort the rows after merging.
nhanes1718_raw$id <- 1:nrow(nhanes1718_raw)
str(nhanes1718_raw)
head(nhanes1718_raw, 7)
tail(nhanes1718_raw, 7)
# Make a copy of the food code column as integer at the end of nhanes1718_raw.
nhanes1718_raw$Food_code <- as.integer(nhanes1718_raw$DR1IFDCD)
str(nhanes1718_raw)
# Have the food code at the beginning for merging.
nhanes1718_raw_2 <- nhanes1718_raw[, c(86, 1:85)]
colnames(nhanes1718_raw_2)
str(nhanes1718_raw_2)
# ---------------------------------------------------------------------------------------------------------------
# Load the text file with food code and descriptions.
codetable <- read.table("E:/MSU OneDrive 20210829/UMinn/10_ASA24/ASA242020-data-dictionaries/FoodCodes_Description.txt",
sep="\t", header = T)
head(codetable)
str(codetable)
codetable$Food_code <- as.integer(codetable$Food_code)
# Merge the NHANES data and codetable.
nhanes1718 <- merge(nhanes1718_raw_2, codetable, by = "Food_code", all.x=T) # all.x means 'match all the rows in the first dataframe.
# Sort by the id (the original order of nhanes1718_raw)
nhanes1718 <- nhanes1718[order(nhanes1718$id), ]
dim(nhanes1718)
head(nhanes1718)
# Merge the NHANES data and codetable.
nhanes1718 <- merge(x=nhanes1718_raw_2, y=codetable,
by = "Food_code", all.x=T)        # all.x=T matches all the rows in the 1st dataframe.
dim(nhanes1718)
# Sort by the id (the original order of nhanes1718_raw)
nhanes1718 <- nhanes1718[order(nhanes1718$id), ]
head(nhanes1718)
# ---------------------------------------------------------------------------------------------------------------
# Analyze NHANES17-18 data
# How many participants?
length(unique(nhanes1718$SEQN))
table(nhanes1718$DR1_040Z)
# ---------------------------------------------------------------------------------------------------------------
# Analyze NHANES17-18 data
# How many participants?
length(unique(nhanes1718$SEQN))
table(nhanes1718$DR1_040Z)
nhanes_sub <- head(nhanes1718, 2000)
dim(nhanes_sub)
# How many participants?
length(unique(nhanes_sub$SEQN))
summary(nhanes_sub$DR1IGRMS)
hist(nhanes_sub$DR1IGRMS)
boxplot(nhanes_sub$DR1IKCAL)
# ---------------------------------------------------------------------------------------------------------------
# Explore data
library(dplyr)
# Gram weight of the food/individual component
nhanes_sub %>% filter(SEQN == 93704) %>% nrow()  # 13 datapoints for this participant
nhanes_sub %>% filter(SEQN == 93704) %>% summarize(protmean = mean(DR1IPROT))
# ---------------------------------------------------------------------------------------------------------------
# remove records that report 500 g or higher intake.
# 6.7% of the data will be removed and 93.3% of the data will still be preserved (for the n=450 subset).
nhanes_sub_a <- nhanes_sub %>% filter(DR1IGRMS < 500)
dim(nhanes_sub_a)
# See the food codes of 400-500 g
head(nhanes_sub_a[ order(nhanes_sub_a$DR1IGRMS, decreasing = T), ])
# Use this dataset nhanes_sub_a.
# How many records/participants?
user_freq <- as.data.frame(table(nhanes_sub_a$SEQN))
hist(user_freq$Freq)
min(user_freq$Freq)
# Sort by the number of records/participant
user_freq_s <- user_freq[order(user_freq$Freq, decreasing = F), ]
head(user_freq_s, 10)
# 93763 has only 2 records. what did they eat?
nhanes_sub_a %>% filter(SEQN == 93763)
# 93834 has only 4 records. what did they eat?
nhanes_sub_a %>% filter(SEQN == 93834)
# 93724 has only 6 records. what did they eat?
nhanes_sub_a %>% filter(SEQN == 93724)
# Intake day of the week frequency
table(nhanes_sub_b$DR1DAY)
codetable <- read.csv("E:/MSU OneDrive 20210829/UMinn/10_ASA24/ASA242020-data-dictionaries/2020Recall/PEPPER_2020-02-18_69738_Items.csv",
header = T)
codetable <- read.table("E:/MSU OneDrive 20210829/UMinn/10_ASA24/ASA242020-data-dictionaries/FoodCodes_Description.txt",
sep="\t", header = T)
itemstable <- read.csv("E:/MSU OneDrive 20210829/UMinn/10_ASA24/ASA242020-data-dictionaries/2020Recall/PEPPER_2020-02-18_69738_Items.csv",
header = T)
dim(itemstable)
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main.wd <- file.path(getwd())
# Import source code to run the analyses to follow.
source("lib/load_and_check.R")
source("lib/prep_data.R")
# ---------------------------------------------------------------------------------------------------------------
# Load example totals data
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
# Load the totals.csv
totals <- read.table("Totals_to_use.txt",  sep = "\t", header = T)
# Load the items.csv
items <- read.table("Items_to_use.txt",  sep = "\t", header = T)
# Load the items.csv
items <- read.table("Items_to_use.txt",  sep = "\t", header = T)
# Load the items.csv
items <- read.table("Items_to_use.txt", quote = "", sep = "\t", header = T)
head(items)
metadata2 <- read.csv("Food_map_txt_Metadata_2.csv", header=T)
head(metadata2)
# Load your metadata if you have one.
metadata_1 <- read.csv("Metadata_1.csv", header=T)
metadata_2 <- read.csv("Food_map_txt_Metadata_2.csv", header=T)
rm(metadata2)
rm(metadata)
# Show which has "yes" in the "Remove" column, and remove them.
RemoveRows(data = totals, metadata.file = metadata_1)
# Take only the first row of each participant.
metadata_3 <- metadata_2[!duplicated(metadata_2$UserName), ]
View(metadata_3)
# Take only the first row of each participant.
metadata_3 <- metadata_2[!duplicated(metadata_2$UserName),
c("UserName", "Gender", "Age", "Weight", "Height", "BMI", "Waist.Circumference")]
head(metadata_3)
dim(metadata_3)
head(totals)
# Add this metadata of each participant in totals.
totals_selected_m <- merge(x=totals_selected, y=metadata_3, by="UserName", all.x=T)
head(totals_selected_m)
View(totals_selected_m)
head(totals_selected_m[, c("UserName", "Gender", "Waist.Circumference")]
)
head(metadata_3)
head(totals_selected_m["MCTs03", c("UserName", "Gender", "Waist.Circumference")])
head(totals_selected_m[18, c("UserName", "Gender", "Waist.Circumference")])
View(metadata_3)
# Add this metadata of each participant in totals.
totals_selected <- merge(x=totals_selected, y=metadata_3, by="UserName", all.x=T)
