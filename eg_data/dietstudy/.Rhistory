tttwoway = as.data.frame.matrix(ttwoway)
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway$Prev_pct <- tttwoway$Previous/4*100
tttwoway$Considered_pct <- tttwoway$Considered/9*100
tttwoway
tttwowaysum = rbind(tttwoway, colSums(tttwoway))
tttwowaysum
rownames(tttwowaysum)[length(rownames(tttwowaysum))] <- "Total"  # Change the last rowname
freqtable <- tttwowaysum[, c(1,4,2,5,3,6)] # change column orders.
write.table(freqtable,"clipboard", sep = "\t")
twoway = table(mydata$`User_status`, mydata$Is_there_supplier)
twoway
ttwoway = t(twoway)
tttwoway = as.data.frame.matrix(ttwoway)
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway$Prev_pct <- tttwoway$Previous/4*100
tttwoway$Considered_pct <- tttwoway$Considered/9*100
tttwoway
tttwowaysum = rbind(tttwoway, colSums(tttwoway))
tttwowaysum
rownames(tttwowaysum)[length(rownames(tttwowaysum))] <- "Total"  # Change the last rowname
freqtable <- tttwowaysum[, c(1,4,2,5,3,6)] # change column orders.
write.table(freqtable,"clipboard", sep = "\t")
twoway = table(mydata$`User_status`, mydata$Is_cost_critical)
twoway
ttwoway = t(twoway)
tttwoway = as.data.frame.matrix(ttwoway)
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway$Prev_pct <- tttwoway$Previous/4*100
tttwoway$Considered_pct <- tttwoway$Considered/9*100
tttwoway
tttwowaysum = rbind(tttwoway, colSums(tttwoway))
tttwowaysum
rownames(tttwowaysum)[length(rownames(tttwowaysum))] <- "Total"  # Change the last rowname
freqtable <- tttwowaysum[, c(1,4,2,5,3,6)] # change column orders.
write.table(freqtable,"clipboard", sep = "\t")
twoway = table(mydata$`User_status`, mydata$Is_supply_enough)
twoway
ttwoway = t(twoway)
tttwoway = as.data.frame.matrix(ttwoway)
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway$Prev_pct <- tttwoway$Previous/4*100
tttwoway$Considered_pct <- tttwoway$Considered/9*100
tttwoway
tttwowaysum = rbind(tttwoway, colSums(tttwoway))
tttwowaysum
rownames(tttwowaysum)[length(rownames(tttwowaysum))] <- "Total"  # Change the last rowname
freqtable <- tttwowaysum[, c(1,4,2,5,3,6)] # change column orders.
write.table(freqtable,"clipboard", sep = "\t")
twoway = table(mydata$`User_status`, mydata$Availability_changed)
twoway
ttwoway = t(twoway)
tttwoway = as.data.frame.matrix(ttwoway)
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway$Prev_pct <- tttwoway$Previous/4*100
tttwoway$Considered_pct <- tttwoway$Considered/9*100
tttwoway
tttwowaysum = rbind(tttwoway, colSums(tttwoway))
tttwowaysum
rownames(tttwowaysum)[length(rownames(tttwowaysum))] <- "Total"  # Change the last rowname
freqtable <- tttwowaysum[, c(1,4,2,5,3,6)] # change column orders.
write.table(freqtable,"clipboard", sep = "\t")
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
sortedbbb = bbb[ order(bbb$Freq, decreasing = T), ]
sortedbbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
sortedbbb = bbb[ order(bbb$Freq, decreasing = T), ]
sortedbbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t")
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t")
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
library(psych)
install.packages(psych)
install.packages("psych")
library(psych)
Holzinger.9
cor.plot(Holzinger.9,numbers=TRUE)
factanal(factors = 2, covmat = Holzinger.9, n.obs = 145,
rotation = "varimax")
ev <- eigen(Holzinger.9)
ev
fa <- factanal(factors = 2, covmat = Holzinger.9,n.obs = 145,
rotation = "varimax")
cluster.plot(fa)
cluster.plot(fa)
cluster.plot(fa)
# ------------------------------------------------------------------------------------------
# From the agricolae maintainer, Filipe de Mendiburu Delgado, 01/25/2022.
library(agricolae)
data(cotton)
cotton$lineage<-as.factor(cotton$lineage)
cotton$epoca<-as.factor(cotton$epoca)
# Build a mixed effect model with the block effect.
mymodel <- lmer(yield ~ lineage + (1|block), data = cotton)
# Build a mixed effect model with the block effect.
mymodel <- lme4::lmer(yield ~ lineage + (1|block), data = cotton)
out1<-anova(mymodel, type="3", test.statistic= "F")
out1<-agricolae::anova(mymodel, type="3", test.statistic= "F")
out1<-lme4::anova(mymodel, type="3", test.statistic= "F")
out1<-lmerTest::anova(mymodel, type="3", test.statistic= "F")
out1<-emmeans::anova(mymodel, type="3", test.statistic= "F")
# ------------------------------------------------------------------------------------------
# Load packages
library(agricolae)
data(cotton)
library(lm4)
library(lmerTest)
# Build a mixed effect model with the block effect.
mymodel <- lmer(yield ~ lineage + (1|block), data = cotton)
# Show anova table. But this does not show DFerror and MSerror that
# I need for LSD.test.
anova(mymodel,  type="3", test.statistic= "F")
# Build a mixed effect model with the block effect.
mymodel <- lme4::lmer(yield ~ lineage + (1|block), data = cotton)
out1<-emmeans::anova(mymodel, type="3", test.statistic= "F")
out1<-anova(mymodel, type="3", test.statistic= "F")
# Build a mixed effect model with the block effect.
mymodel <- lmer(yield ~ lineage + (1|block), data = cotton)
out1 <- anova(mymodel, type="3", test.statistic= "F")
out1
out2<-summary(mymodel)
out2
View(out2)
out3<-with(cotton, LSD.test(yield, lineage, DFerror, MSerror, console = TRUE))
DFerror <- out1$DenDF
MSerror <- out2$sigma^2
out3<-with(cotton, LSD.test(yield, lineage, DFerror, MSerror, console = TRUE))
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
data(pigs)
agricolae::data(cotton)
data(cotton)
library(agricolae)
data(cotton)
data(pigs)
library(emmeans)
data(pigs)
head(pigs)
head(pigs,10)
table(pigs$source)
table(pigs$percent)
# Use pigs data and build a model
mod3 = nlme::gls(conc ~ source, data = pigs,
weights = varIdent(form = ~1 | source)) # This part
library(gls)
library(nlme)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
setwd("~/GitHub/dietary_patterns")
# Import source code to run the analyses to follow.
source("lib/load_and_check.R")
source("lib/prep_data.R")
# ---------------------------------------------------------------------------------------------------------------
# Load example totals data
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
# Name your main directory for future use.
main.wd <- file.path(getwd())
# ---------------------------------------------------------------------------------------------------------------
# Load example totals data
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
# Load the totals.csv
totals <- read.table("Totals_to_use.txt",  sep = "\t", header = T)
dim(totals)
as.data.frame(table(totals$X.SampleID))
as.data.frame(table(totals$UserName))
# ---------------------------------------------------------------------------------------------------------------
# Metadata
# Filter data based on matadata information
metadata <- read.csv("Metadata_1.csv", header=T)
head(metadata)
# ---------------------------------------------------------------------------------------------------------------
# Metadata
# Filter data based on matadata information
metadata <- read.csv("Metadata_1.csv", header=T)
head(metadata)
metadata[, "Remove"]
metadata[, order(metadata$Remove)]
metadata[order(metadata$Remove), ]
metadata[order(metadata$Remove, desc=T), ]
metadata[order(metadata$Remove, decreasing=T), ]
# ---------------------------------------------------------------------------------------------------------------
# Metadata
# Filter data based on matadata information
metadata <- read.csv("Metadata_1.csv", header=T)
head(metadata)
#
metadata[order(metadata$Remove, decreasing=T), ]
subset(sorted, Remove=="yes")
# Show which has "yes" in the "Remove" column.
sorted <- metadata[order(metadata$Remove, decreasing=T), ]
subset(sorted, Remove=="yes")
toberemoved <- subset(sorted, Remove=="yes")
nrow(toberemoved)
toberemoved
# Remove the users marked as "Remove==yes".
# Bind sorted metadata and totals.
totals_meta <- dplyr::full.join(totals, metadata)
library(dplyr)
# Remove the users marked as "Remove==yes".
# Bind sorted metadata and totals.
totals_meta <- full.join(totals, metadata)
# Remove the users marked as "Remove==yes".
# Bind sorted metadata and totals.
totals_meta <- full_join(totals, metadata)
# Remove the users marked as "Remove==yes".
# Bind sorted metadata and totals.
totals_meta <- full_join(totals, metadata, by="UserName")
# Remove the users marked as "Remove==yes".
# Bind sorted metadata and totals.
totals_meta <- full_join(totals, metadata, by=UserName)
# Remove the users marked as "Remove==yes".
# Bind sorted metadata and totals.
totals_meta <- full_join(totals, metadata, by="UserName")
dim(totals_meta)
dim(totals)
tail(totals_meta)
colnames(totals)
head(totals,1)
as.data.frame(totals$UserName)
as.data.frame(table(totals$UserName))
as.data.frame(table(totals$UserName))
as.data.frame(table(metadata$UserName))
as.data.frame(table(totals_meta$UserName)  )
write.table(as.data.frame(table(totals$UserName)), "clipboard", sep = "\t")
# ---------------------------------------------------------------------------------------------------------------
# Metadata
# Filter data based on matadata information
metadata <- read.csv("Metadata_1.csv", header=T)
head(metadata)
# Show which has "yes" in the "Remove" column.
sorted <- metadata[order(metadata$Remove, decreasing=T), ]
toberemoved <- subset(sorted, Remove=="yes")
nrow(toberemoved)
toberemoved
# Remove the users marked as "Remove==yes".
# Bind sorted metadata and totals.
totals_meta <- full_join(totals, metadata, by="UserName")
dim(totals)
dim(totals_meta)
tail(totals_meta)
as.data.frame(table(metadata$UserName))
as.data.frame(table(totals_meta$UserName)  )
toberemoved
# Remove the rows that have "yes" in the "Remove" column.
tatals_meta2 <- subset(tatals_meta, Remove=="yes")
# Remove the users marked as "Remove==yes".
# Bind sorted metadata and totals.
totals_meta <- full_join(totals, metadata, by="UserName")
dim(totals)
dim(totals_meta)
# ---------------------------------------------------------------------------------------------------------------
# Metadata
# Filter data based on matadata information
metadata <- read.csv("Metadata_1.csv", header=T)
head(metadata)
# Show which has "yes" in the "Remove" column.
sorted <- metadata[order(metadata$Remove, decreasing=T), ]
toberemoved <- subset(sorted, Remove=="yes")
toberemoved
toberemoved <- subset(metadata, Remove=="yes")
toberemoved
nrow(toberemoved)
# Show which has "yes" in the "Remove" column.
which(metadata, Remove=="yes")
# Show which has "yes" in the "Remove" column.
toberemoved <- subset(metadata, Remove=="yes")
toberemoved
nrow(toberemoved)
# Remove the users marked as "Remove==yes".
# Bind sorted metadata and totals.
totals_meta <- full_join(totals, metadata, by="UserName")
dim(totals)
dim(totals_meta)
tail(totals_meta)
head(totals_meta)
tail(totals_meta)
head(totals,1)
# Remove the rows that have "yes" in the "Remove" column.
tatals_meta2 <- subset(tatals_meta, Remove=="yes")
# Remove the users marked as "Remove==yes".
# Bind sorted metadata and totals.
totals_meta <- full_join(totals, metadata, by="UserName")
dim(totals)
dim(totals_meta)
tail(totals_meta)
# Remove the rows that have "yes" in the "Remove" column.
tatals_meta2 <- subset(totals_meta, Remove=="yes")
# Remove the rows that have "yes" in the "Remove" column.
tatals_meta2 <- subset(totals_meta, Remove!="yes")
tatals_meta2$UserName
table(tatals_meta2$UserName)
# Show which has "yes" in the "Remove" column.
RemoveRows <- function(data=totals, metadata.file=metadata){
cat("nnn", nrow(data), "mmm", nrow(metadata.file) )
}
RemoveRows(data=totals, metadata.file=metadata)
toberemoved <-
nrow(subset(metadata, Remove=="yes"))
# toberemoved <-
nrow(subset(metadata, Remove=="yes"))
totals_meta <- merge(totals, metadata, by="UserName", all.x=T)
dim(totals)
dim(totals_meta)
tail(totals_meta)
# Show which has "yes" in the "Remove" column.
RemoveRows <- function(data=totals, metadata.file=metadata){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), " rows below are to be removed:")
toberemoved
# Remove the rows that have "yes" in the "Remove" column.
totals_meta <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
head(totals_meta)
}
RemoveRows(data=totals, metadata.file=metadata)
# Show which has "yes" in the "Remove" column.
RemoveRows <- function(data=totals, metadata.file=metadata){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), " rows below are to be removed:")
toberemoved
# Remove the rows that have "yes" in the "Remove" column.
totals_meta <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
}
RemoveRows(data=totals, metadata.file=metadata)
# Show which has "yes" in the "Remove" column.
RemoveRows <- function(data=totals, metadata.file=metadata){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed:")
print(toberemoved)
# Remove the rows that have "yes" in the "Remove" column.
totals_meta <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
}
RemoveRows(data=totals, metadata.file=metadata)
# Show which has "yes" in the "Remove" column.
RemoveRows <- function(data=totals, metadata.file=metadata){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed: n/")
print(toberemoved)
# Remove the rows that have "yes" in the "Remove" column.
totals_meta <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
}
RemoveRows(data=totals, metadata.file=metadata)
# Show which has "yes" in the "Remove" column.
RemoveRows <- function(data=totals, metadata.file=metadata){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed:", "\n")
print(toberemoved)
# Remove the rows that have "yes" in the "Remove" column.
totals_meta <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
}
RemoveRows(data=totals, metadata.file=metadata)
# Show which has "yes" in the "Remove" column.
RemoveRows <- function(data=totals, metadata.file=metadata){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed:", "\n")
print(toberemoved)
# Remove the rows that have "yes" in the "Remove" column.
output.file <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
}
RemoveRows(data=totals, metadata.file=metadata, output.file="outtm")
# Show which has "yes" in the "Remove" column.
RemoveRows <- function(data=totals, metadata.file=metadata){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed:", "\n")
print(toberemoved)
# Remove the rows that have "yes" in the "Remove" column.
totals_selected <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
cat("The resulting file, totals_selected, has",
nrow(totals_selected), "rows and",
ncolumn(totals_selected), "columns.")
}
RemoveRows(data=totals, metadata.file=metadata)
# Show which has "yes" in the "Remove" column.
RemoveRows <- function(data=totals, metadata.file=metadata){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed:", "\n")
print(toberemoved)
# Remove the rows that have "yes" in the "Remove" column.
totals_selected <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
cat("The resulting file, totals_selected, has",
nrow(totals_selected), "rows and",
ncol(totals_selected), "columns.")
}
RemoveRows(data=totals, metadata.file=metadata)
