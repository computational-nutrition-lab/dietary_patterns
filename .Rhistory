# Check the summary data - this will show the number of missing data if any.
summary(glu_2$KCAL)
# Save the chart as .png.
ggsave("Laboratory_data/QCtotal_d_glu_body_meta_demo_n1625_KCAL_by_GLU_index_line.png", KCALfreq, device="png")
# Age - no missing data.
hist(glu_3$RIDAGEYR)
table(glu_3$RIDAGEYR)
summary(glu_3$RIDAGEYR)
# Gender - no missing data. 1: male, 2: female.
summary(glu_3$RIAGENDR)
table(glu_3$RIAGENDR)
# Select males in their 50s
glu_3_males <- subset(glu_3, RIAGENDR == 1)
glu_3_males50s <- subset(glu_3_males, RIDAGEYR >= 50 & RIDAGEYR <= 59 )
dim(glu_3_males50s)
table(glu_3_males50s$RIDAGEYR)
table(glu_3_males50s$GLU_index)
# Save the glu_3_males50s as a txt file.
write.table(glu_3_males50s, "Laboratory_data/QCtotal_d_glu_body_meta_demo_males50s_2.txt",
sep="\t", row.names = F, quote = F)
# Save the glu_3_males50s as a txt file.
write.table(glu_3_males50s, "Laboratory_data/QCtotal_d_glu_body_meta_demo_males50s.txt",
sep="\t", row.names = F, quote = F)
# Check the dimension of the selected data - should be 128 rows.
dim(glu_2_males50s)
# Age - no missing data.
summary(glu_2$RIDAGEYR)
hist(glu_2$RIDAGEYR)
# Gender - no missing data. 1: male, 2: female.
summary(glu_2$RIAGENDR)
table(glu_2$RIAGENDR)
# Select males in their 50s
glu_2_males <- subset(glu_2, RIAGENDR == 1)
glu_2_males50s <- subset(glu_2_males, RIDAGEYR >= 50 & RIDAGEYR <= 59 )
# Check the dimension of the selected data - should be 128 rows.
dim(glu_2_males50s)
# Ensure the ages of the selected subpopulation are between 50-59.
table(glu_2_males50s$RIDAGEYR)
# Look at the distribution of GLU_index among the selected subpopulation.
table(glu_2_males50s$GLU_index)
# Save the glu_2_males50s as a txt file.
write.table(glu_2_males50s, "Laboratory_data/QCtotal_d_glu_body_meta_demo_males50s.txt",
sep="\t", row.names = F, quote = F)
males50s_BMIfreq <- ggplot(data=glu_2_males50s, aes(x=BMXBMI, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=0.4) + space_axes + no_grid +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +  # lighter color.
labs(x="BMI", y="Density")
males50s_BMIfreq
males50s_BMIfreq
# Save the chart as .png.
ggsave("Laboratory_data/males50s_BMI_by_GLU_index.png", males50s_BMIfreq, device="png")
# Save the chart as .png. n = 1625 - 14 missing = 1611.
ggsave("Laboratory_data/QCtotal_d_glu_body_meta_demo_n1611_BMI_by_GLU_index.png", BMIfreq,
device="png", width=5.3, height=4.5)
# Save the chart as .png. n = 1625 - 14 missing = 1611.
ggsave("Laboratory_data/QCtotal_d_glu_body_meta_demo_n1611_BMI_by_GLU_index.png", BMIfreq,
device="png", width=5.3, height=4.5)
# Check the summary data - this will show the number of missing data if any.
summary(glu_2$BMXWT)
colSums(is.na(glu_2[, c("SEQN", "BMXWT")]))
# Show histogram of body weight.
hist(glu_2$BMXWT)
# Create a density plot of body weight by GLU_index type.
weightfreq <- ggplot(data=glu_2, aes(x=BMXWT, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("steelblue3", "yellow", "hotpink")
) +
labs(x="Body weight (kg)", y="Density")
weightfreq
# Save the chart as .png. n = 1625 - 12 missing = 1613.
ggsave("Laboratory_data/QCtotal_d_glu_body_meta_demo_n1613_weight_by_GLU_index.png", weightfreq,
device="png", width=5.3, height=4.5)
# ---------------------------------------------------------------------------------------------------------------
# Look at the KCAL frequency of each group.
# Check the summary data - this will show the number of missing data if any.
summary(glu_2$KCAL)
# Create a line chart of the KCAL frequency of each group.
KCALfreq <- ggplot(data=glu_2, aes(x=KCAL, group=GLU_index, color=GLU_index)) +
geom_density(adjust=1.5, alpha=.4, size=1.2, linetype="longdash") + space_axes + no_grid +
scale_color_manual(values= c("steelblue3", "gold3", "hotpink") ) +
labs(x="KCAL", y="Density") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
KCALfreq
# Save the chart as .png.
ggsave("Laboratory_data/QCtotal_d_glu_body_meta_demo_n1625_KCAL_by_GLU_index_line.png", KCALfreq,
device="png", width=5.3, height=4.5)
# Age - no missing data.
summary(glu_2$RIDAGEYR)
hist(glu_2$RIDAGEYR)
# Gender - no missing data. 1: male, 2: female.
table(glu_2$RIAGENDR)
# Select males in their 50s
glu_2_males <- subset(glu_2, RIAGENDR == 1)
glu_2_males50s <- subset(glu_2_males, RIDAGEYR >= 50 & RIDAGEYR <= 59 )
# Check the dimension of the selected data - should be 128 rows.
dim(glu_2_males50s)
# Ensure the ages of the selected subpopulation are between 50-59.
table(glu_2_males50s$RIDAGEYR)
# Look at the distribution of GLU_index among the selected subpopulation.
table(glu_2_males50s$GLU_index)
# Save the glu_2_males50s as a txt file.
write.table(glu_2_males50s, "Laboratory_data/QCtotal_d_glu_body_meta_demo_males50s.txt",
sep="\t", row.names = F, quote = F)
# ----------------------------------------------------------------------------------------------------------------
# Look at the BMI frequency of each group.
# This uses lighter colors for the subpopulation.
males50s_BMIfreq <- ggplot(data=glu_2_males50s, aes(x=BMXBMI, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=0.4) + space_axes + no_grid +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
labs(x="BMI", y="Density")
males50s_BMIfreq
# Save the chart as .png.
ggsave("Laboratory_data/males50s_BMI_by_GLU_index.png", males50s_BMIfreq,
device="png", width=5.3, height=4.5)
# ----------------------------------------------------------------------------------------------------------------
# Body weight
# Make sure the labels in the legend are correct.
weightfreq <- ggplot(data=glu_2_males50s, aes(x=BMXWT, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
labs(x="Body weight (kg)", y="Density")
weightfreq
ggsave("eg_data/NHANES/Laboratory_data/males50s_weight_by_GLU_index.png", weightfreq,
device="png", width=5.3, height=4.5)
ggsave("Laboratory_data/males50s_weight_by_GLU_index.png", weightfreq,
device="png", width=5.3, height=4.5)
# ----------------------------------------------------------------------------------------------------------------
# Look at the KCAL frequency of each group.
# Make sure the labels in the legend are correct.
males50s_KCALfreq <- ggplot(data=glu_2_males50s, aes(x=KCAL, group=GLU_index, color=GLU_index)) +
geom_density(adjust=1.5, alpha=0.4, size=1.2, linetype="longdash") + space_axes + no_grid +
scale_color_manual(values= c("aquamarine3", "lightgoldenrod3", "lightpink1")) +
labs(x="KCAL", y="Density") +
scale_y_continuous(labels= function(x) format(x, scientific = FALSE))
males50s_KCALfreq
# Save the chart as .png.
ggsave("Laboratory_data/males50s_KCAL_by_GLU_index.png", males50s_KCALfreq,
device="png", width=5.3, height=4.5)
# ----------------------------------------------------------------------------------------------------------------
# Create a boxplot of KCAL of each GLU_index group.
males50s_KCAL <- ggplot(glu_2_males50s, aes(x=GLU_index, y=KCAL, fill=GLU_index)) +
geom_boxplot(outlier.shape = NA) + no_grid + space_axes +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
geom_jitter(width=0.3)
males50s_KCAL
ggsave("Laboratory_data/males50s_KCAL_by_GLU_index_box.png", males50s_KCAL,
device="png", width=5.3, height=4.5)
# ===============================================================================================================
# Load NHANES15-16totals with demographic data
# ===============================================================================================================
# Load necessary packages.
library(SASxport)
# Set where the NHANES data and food code table are.
setwd("~/GitHub/dietary_patterns")
# Load necessary functions.
source("lib/load_clean_NHANES.R")
source("lib/prep_data_for_clustering.R")
source("lib/ggplot2themes.R")
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/NHANES")
# Load necessary functions.
source("lib/specify_dir_and_check_col.R")
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/NHANES")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/NHANES")
# Load the QC-ed total (with food categories), filtered for KCAL, PROT, TFAT, VC. 4207 people.
QCtotals_d <- read.table("Total_D12_FC_QC_mean_QC_d.txt", sep="\t", header=T)
# Check the number of participants in the QCtotals - should be 4,207 people.
length(unique(QCtotals_d$SEQN))
# ---------------------------------------------------------------------------------------------------------------
# Load the blood glucose data and see.
glu <- read.xport("Raw_data/GLU_I.XPT")
# glu has LBXGLU - Fasting Glucose (mg/dL).
head(glu)
# Count the number of rows with no missing data.
sum(complete.cases(glu))
# Count the number of rows with no missing data.
sum(complete.cases(glu))
# Take out only the rows with no missing data in LBXGLU.
glu_comp <- glu[!is.na(glu$LBXGLU), ]
head(glu_comp)
dim(glu_comp)
# Take a quick look at the distribution of LBXGLU.
hist(glu_comp$LBXGLU)
# Count the number of rows with no missing data.
# 2972 individuals have glucose data.
sum(complete.cases(glu))
# Use default of merge to only keep SEQNs found in both datasets.
QCtotal_d_glu <- merge(x=QCtotals_d, y=glu_comp, by="SEQN")
# Check the dimension of QCtotal_d_glu - should be 1,943 rows.
dim(QCtotal_d_glu)
# ---------------------------------------------------------------------------------------------------------------
# Load the body measure data.
bodymea <- read.xport("Raw_data/BMX_I.XPT")
# Add body measure to QCtotal_d_glu
QCtotal_d_glu_body <- merge(x=QCtotal_d_glu, y=bodymea, by="SEQN")
# ---------------------------------------------------------------------------------------------------------------
# Load the metadata of people, which is in Total Day 1.
metadata_raw <- read.xport("E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/DR1TOT_I.XPT")
# First, specify the first and the last column names to calculate totals for.
# Look for the column number that matches the first and last variable specified.
sta_col_num_a <- match("DBQ095Z"  , names(metadata_raw))  # Salt-related questions
end_col_num_a <- match("DRQSPREP" , names(metadata_raw))
sta_col_num_b <- match("DRQSDIET" , names(metadata_raw))  # Diet-related questions
end_col_num_b <- match("DRQSDT91" , names(metadata_raw))
sta_col_num_c <- match("DRD340"   , names(metadata_raw))  # Fish-related questions
end_col_num_c <- match("DRD370V"  , names(metadata_raw))
# Only select the metadata variables we would like to merge.
# We will also take SEQN, which is in column 1.
metadata_only <- metadata_raw[, c(1,
sta_col_num_a:end_col_num_a,
sta_col_num_b:end_col_num_b,
sta_col_num_c:end_col_num_c
)]
# This should have only the metadata columns.
head(metadata_only, 1)
# Create an empty column to insert glucose level index.
QCtotal_d_glu_body_meta$GLU_index <- NA
# Add glucose index.
for(i in 1: nrow(QCtotal_d_glu_body_meta)){
if(     QCtotal_d_glu_body_meta$LBXGLU[i] < 100){ QCtotal_d_glu_body_meta$GLU_index[i] <- "Normal" }
else if(QCtotal_d_glu_body_meta$LBXGLU[i] < 126){ QCtotal_d_glu_body_meta$GLU_index[i] <- "Prediabetic" }
else{                                             QCtotal_d_glu_body_meta$GLU_index[i] <- "Diabetic" }
}
# ---------------------------------------------------------------------------------------------------------------
# Load the body measure data.
bodymea <- read.xport("Raw_data/BMX_I.XPT")
# Add body measure to QCtotal_d_glu
QCtotal_d_glu_body <- merge(x=QCtotal_d_glu, y=bodymea, by="SEQN")
# ---------------------------------------------------------------------------------------------------------------
# Load the metadata of people, which is in Total Day 1.
metadata_raw <- read.xport("E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/DR1TOT_I.XPT")
# First, specify the first and the last column names to calculate totals for.
# Look for the column number that matches the first and last variable specified.
sta_col_num_a <- match("DBQ095Z"  , names(metadata_raw))  # Salt-related questions
end_col_num_a <- match("DRQSPREP" , names(metadata_raw))
sta_col_num_b <- match("DRQSDIET" , names(metadata_raw))  # Diet-related questions
end_col_num_b <- match("DRQSDT91" , names(metadata_raw))
sta_col_num_c <- match("DRD340"   , names(metadata_raw))  # Fish-related questions
end_col_num_c <- match("DRD370V"  , names(metadata_raw))
# Only select the metadata variables we would like to merge.
# We will also take SEQN, which is in column 1.
metadata_only <- metadata_raw[, c(1,
sta_col_num_a:end_col_num_a,
sta_col_num_b:end_col_num_b,
sta_col_num_c:end_col_num_c
)]
# This should have only the metadata columns.
head(metadata_only, 1)
# Add meatadata to QCtotal_d_glu_body
QCtotal_d_glu_body_meta <- merge(x=QCtotal_d_glu_body, y=metadata_only, by="SEQN")
# Create an empty column to insert glucose level index.
QCtotal_d_glu_body_meta$GLU_index <- NA
# Add glucose index.
for(i in 1: nrow(QCtotal_d_glu_body_meta)){
if(     QCtotal_d_glu_body_meta$LBXGLU[i] < 100){ QCtotal_d_glu_body_meta$GLU_index[i] <- "Normal" }
else if(QCtotal_d_glu_body_meta$LBXGLU[i] < 126){ QCtotal_d_glu_body_meta$GLU_index[i] <- "Prediabetic" }
else{                                             QCtotal_d_glu_body_meta$GLU_index[i] <- "Diabetic" }
}
# Check the first 10 rows of glucose and GLU_index columns in QCtotal_d_glu_body_meta.
QCtotal_d_glu_body_meta[1:10, c("LBXGLU", "GLU_index")]
# Look at the frequency of GLU_index.
table(QCtotal_d_glu_body_meta$GLU_index)
# Save the dataset as a .txt file.
write.table(QCtotal_d_glu_body_meta, file="Laboratory_data/QCtotal_d_glu_body_meta.txt",
sep= "\t", row.names=F, quote= F)
# ---------------------------------------------------------------------------------------------------------------
# Load the data of those to be used in the diabetes status analysis.
glu <- read.delim( file="Laboratory_data/QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
# make GLU_index as a factor for plotting.
glu$GLU_index <- factor(glu$GLU_index, levels = c("Normal", "Prediabetic", "Diabetic"))
# Exclude those who are following special diets.
# Extract only those following any specific diet.
table(glu$DRQSDIET)
# DRQSDIET==1 is following a special diet, so select only rows with DRQSDIET==2.
glu_2 <- subset(glu, DRQSDIET == 2)
# How many people remained? -- 1625 remained.
table(glu_2$DRQSDIET)
# Check the sample size of each category.
table(glu_2$GLU_index)
# Check the summary data - this will also show the number of missing data if any.
summary(glu_2$BMXBMI)
# 14 are missing BMI and has NA's. You can also see that by counting the number of NAs
# in specified rows.
colSums(is.na(glu_2[, c("SEQN", "BMXBMI")]))
# Create a density plot of BMI by GLU_index type.
BMIfreq <- ggplot(data=glu_2, aes(x=BMXBMI, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("steelblue3", "yellow", "hotpink") ) +
labs(x="BMI", y="Density")
BMIfreq
# Check the summary data - this will show the number of missing data if any.
summary(glu_2$BMXWT)
colSums(is.na(glu_2[, c("SEQN", "BMXWT")]))
# Show histogram of body weight.
hist(glu_2$BMXWT)
# Create a density plot of body weight by GLU_index type.
weightfreq <- ggplot(data=glu_2, aes(x=BMXWT, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("steelblue3", "yellow", "hotpink")
) +
labs(x="Body weight (kg)", y="Density")
weightfreq
# Save the chart as .png. n = 1625 - 12 missing = 1613.
ggsave("Laboratory_data/QCtotal_d_glu_body_meta_demo_n1613_weight_by_GLU_index.png", weightfreq,
device="png", width=5.3, height=4.5)
# Save the chart as .png. n = 1625 - 14 missing = 1611.
ggsave("Laboratory_data/QCtotal_d_glu_body_meta_demo_n1611_BMI_by_GLU_index.png", BMIfreq,
device="png", width=5.3, height=4.5)
# Save the chart as .png. n = 1625 - 14 missing = 1611.
ggsave("Laboratory_data/QCtotal_d_glu_body_meta_demo_n1611_BMI_by_GLU_index.png",
BMIfreq, device="png", width=5.3, height=4.5)
# Create a density plot of body weight by GLU_index type.
weightfreq <- ggplot(data=glu_2, aes(x=BMXWT, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("steelblue3", "yellow", "hotpink")
) +
labs(x="Body weight (kg)", y="Density")
weightfreq
# Save the chart as .png. n = 1625 - 12 missing = 1613.
ggsave("Laboratory_data/QCtotal_d_glu_body_meta_demo_n1613_weight_by_GLU_index.png",
weightfreq, device="png", width=5.3, height=4.5)
# Create a line chart of the KCAL frequency of each group.
KCALfreq <- ggplot(data=glu_2, aes(x=KCAL, group=GLU_index, color=GLU_index)) +
geom_density(adjust=1.5, alpha=.4, size=1.2, linetype="longdash") + space_axes + no_grid +
scale_color_manual(values= c("steelblue3", "gold3", "hotpink") ) +
labs(x="KCAL", y="Density") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
KCALfreq
# Save the chart as .png.
ggsave("Laboratory_data/QCtotal_d_glu_body_meta_demo_n1625_KCAL_by_GLU_index_line.png",
KCALfreq, device="png", width=5.3, height=4.5)
# Age - no missing data.
summary(glu_2$RIDAGEYR)
hist(glu_2$RIDAGEYR)
# Gender - no missing data. 1: male, 2: female.
table(glu_2$RIAGENDR)
# Select males in their 50s
glu_2_males <-    subset(glu_2, RIAGENDR == 1)
glu_2_males50s <- subset(glu_2_males, RIDAGEYR >= 50 & RIDAGEYR <= 59 )
# Check the dimension of the selected data - should be 128 rows.
dim(glu_2_males50s)
# Ensure the ages of the selected subpopulation are between 50-59.
table(glu_2_males50s$RIDAGEYR)
# Look at the distribution of GLU_index among the selected subpopulation.
table(glu_2_males50s$GLU_index)
# Save the glu_2_males50s as a txt file.
write.table(glu_2_males50s, "Laboratory_data/QCtotal_d_glu_body_meta_demo_males50s.txt",
sep="\t", row.names = F, quote = F)
# ----------------------------------------------------------------------------------------------------------------
# Look at the BMI frequency of each group.
# This uses lighter colors for the subpopulation.
males50s_BMIfreq <- ggplot(data=glu_2_males50s, aes(x=BMXBMI, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=0.4) + space_axes + no_grid +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
labs(x="BMI", y="Density")
males50s_BMIfreq
# Save the chart as .png.
ggsave("Laboratory_data/males50s_BMI_by_GLU_index.png",
males50s_BMIfreq, device="png", width=5.3, height=4.5)
# ----------------------------------------------------------------------------------------------------------------
# Body weight
# Make sure the labels in the legend are correct.
weightfreq <- ggplot(data=glu_2_males50s, aes(x=BMXWT, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
labs(x="Body weight (kg)", y="Density")
weightfreq
# ----------------------------------------------------------------------------------------------------------------
# Body weight
# Make sure the labels in the legend are correct.
males50s_weightfreq <- ggplot(data=glu_2_males50s, aes(x=BMXWT, group=GLU_index, fill=GLU_index)) +
geom_density(adjust=1.5, alpha=.4) + space_axes + no_grid +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
labs(x="Body weight (kg)", y="Density")
males50s_weightfreq
ggsave("Laboratory_data/males50s_weight_by_GLU_index.png",
males50s_weightfreq, device="png", width=5.3, height=4.5)
# ----------------------------------------------------------------------------------------------------------------
# Look at the KCAL frequency of each group.
# Make sure the labels in the legend are correct.
males50s_KCALfreq <- ggplot(data=glu_2_males50s, aes(x=KCAL, group=GLU_index, color=GLU_index)) +
geom_density(adjust=1.5, alpha=0.4, size=1.2, linetype="longdash") + space_axes + no_grid +
scale_color_manual(values= c("aquamarine3", "lightgoldenrod3", "lightpink1")) +
labs(x="KCAL", y="Density") +
scale_y_continuous(labels= function(x) format(x, scientific = FALSE))
males50s_KCALfreq
# Save the chart as .png.
ggsave("Laboratory_data/males50s_KCAL_by_GLU_index.png",
males50s_KCALfreq, device="png", width=5.3, height=4.5)
# ----------------------------------------------------------------------------------------------------------------
# Create a boxplot of KCAL of each GLU_index group.
males50s_KCAL <- ggplot(glu_2_males50s, aes(x=GLU_index, y=KCAL, fill=GLU_index)) +
geom_boxplot(outlier.shape = NA) + no_grid + space_axes +
scale_fill_manual(values= c("aquamarine2", "lightgoldenrod1", "lightpink1") ) +
geom_jitter(width=0.3)
males50s_KCAL
ggsave("Laboratory_data/males50s_KCAL_by_GLU_index_box.png",
males50s_KCAL, device="png", width=5.3, height=4.5)
# You can come back to the main directory by:
setwd(main_wd)
setwd("~/GitHub/dietary_patterns")
# Import source code to run the analyses to follow and generate plots.
source("lib/specify_dir_and_check_col.R")
# Name your main directory for future use.
main_wd <- file.path(getwd())
source("lib/data_overview.R")
source("lib/ggplot2themes.R")
# Call color palette.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# You can come back to the main directory by:
setwd(main_wd)
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/NHANES")
# Load your items data to be analyzed.
# "_FC_cc_f_d" stands for: "Food category variables added", "column names changed",
# "food formatted", and "demographic data merged".
food12f_d <- read.table("Food_D12_FC_cc_f_d.txt", sep="\t", header=T)
head(food12f_d, 2)
# View min, quantiles, mean, etc. for a variable in your dataset.
summary(food12f_d$KCAL)
# Summary statistics of all the variables
# Calculate the minimum, 1st quantile, median, mean, 3rd quantile, max, and standard deviation
# for each variable in the input dataframe and save as a .txt file.
SummaryStats(inputdf = food12f_d,
outfn = "Food_D12_FC_cc_f_d_summ.txt")
# Convert RIAGENDR into a factor, so that it will be a categorical variable.
food12f_d$RIAGENDR <- factor(food12f_d$RIAGENDR, levels= c('1', '2'))
# Generate a boxplot of KCAL by gender.
gender_kcal <- ggplot(food12f_d, aes(x=RIAGENDR, y=KCAL, group=RIAGENDR)) +
geom_boxplot() + no_grid + space_axes + labs(x="Gender") +
scale_x_discrete(labels = c("Male", "Female"))
gender_kcal
# Save it as a .pdf file.
ggsave("Food_D12_FC_cc_f_d_gender_kcal.pdf",
gender_kcal, device="pdf", width=5.3, height=4.5)
# Scaterplot of two numeric variables: TFAT and KCAL.
TFAT_KCAL <- ggplot(food12f_d, aes(x=TFAT, y=KCAL)) +
geom_point() + no_grid + space_axes
TFAT_KCAL
# Save it as a .pdf file.
ggsave("Food_D12_FC_cc_f_d_TFAT_KCAL.pdf",
TFAT_KCAL, device="pdf", width=5.3, height=4.5)
# Test if the two variables are correlated.
# The output should show p-value and R correlation coefficient
cor.test(x=food12f_d$TFAT, y=food12f_d$KCAL, method="pearson")
# QCtotals <- read.table("NHANES1516_total_d12_FC_mean.txt", sep="\t", header=T)
QCtotals_d <- read.table("Total_D12_FC_QC_mean_QC_d.txt", sep="\t", header=T)
# Note that each row is a total dietary intake of each user on each day.
head(QCtotals_d, 2)
# Summary statistics of one variable
summary(QCtotals_d$KCAL)
# Calculate the min, quantiles, mean, etc. for a variable in your dataset
# in the same way we did with the items.
SummaryStats(inputdf = QCtotals_d,
outfn = "Total_D12_FC_QC_mean_QC_d_summ.txt")
# Convert RIAGENDR into a factor, so that it will be a categorical variable.
QCtotals_d$RIAGENDR <- factor(QCtotals_d$RIAGENDR, levels= c('1', '2'))
# Boxplot of KCAL by gender (RIAGENDR).
gender_KCAL_t <- ggplot(QCtotals_d, aes(x= RIAGENDR, y=KCAL)) +
geom_boxplot() + no_grid + space_axes + labs(x="Gender") +
scale_x_discrete(labels = c("Male", "Female"))
gender_KCAL_t
# Boxplot of KCAL by gender (RIAGENDR). "t" stands for "total"
gender_KCAL_t <- ggplot(QCtotals_d, aes(x= RIAGENDR, y=KCAL)) +
geom_boxplot() + no_grid + space_axes + labs(x="Gender") +
scale_x_discrete(labels = c("Male", "Female"))
gender_KCAL_t
# Save it as a .pdf file.
ggsave("Total_D12_FC_QC_mean_QC_d_gender_KCAL.pdf",
gender_KCAL_t, device="pdf", width=5.3, height=4.5)
# Boxplot of KCAL by gender, with each datapoint.  Note that geom_boxplot must have outlier.shape = NA
# when plotted with geom_jitter. Otherwise, outlier points will be duplicated and will be misleading.
gender_KCAL_t_dots <- ggplot(QCtotals_d, aes(x= RIAGENDR, y= KCAL)) +
geom_boxplot(outlier.shape = NA) + no_grid + space_axes + labs(x="Gender") +
geom_jitter(width=0.3, color="grey60", alpha=0.5) +
scale_x_discrete(labels = c("Male", "Female"))
gender_KCAL_t_dots
# Save it as a .pdf file.
ggsave("Total_D12_FC_QC_mean_QC_d_KCAL_dots.pdf",
gender_KCAL_t_dots, device="pdf", width=5.3, height=4.5)
# Scaterplot of two variables.
TFAT_KCAL_t <- ggplot(QCtotals_d, aes(x=TFAT, y=KCAL)) +
geom_point(color="grey30", alpha=0.5) + no_grid + space_axes
TFAT_KCAL_t
# Save it as a .pdf file.
ggsave("Total_D12_FC_QC_mean_QC_d_TFAT_KCAL.pdf",
TFAT_KCAL_t, device="pdf", width=5.3, height=4.5)
# Test if the two variables are correlated.
# The output should show p-value and R correlation coefficient
cor.test(x=QCtotals_d$TFAT, y=QCtotals_d$KCAL, method="pearson")
# ---------------------------------------------------------------------------------------------------------------
# Come back to the main directory before you start running another script.
setwd(main_wd)
# Save it as a .png file.
ggsave("Food_D12_FC_cc_f_d_gender_kcal.png",
gender_kcal, device="png", width=5.3, height=4.5)
# Save it as a .png file.
ggsave("Food_D12_FC_cc_f_d_TFAT_KCAL.png",
TFAT_KCAL, device="png", width=5.3, height=4.5)
# Save it as a .png file.
ggsave("Total_D12_FC_QC_mean_QC_d_gender_KCAL.png",
gender_KCAL_t, device="png", width=5.3, height=4.5)
# Save it as a .png file.
ggsave("Total_D12_FC_QC_mean_QC_d_KCAL_dots.png",
gender_KCAL_t_dots, device="png", width=5.3, height=4.5)
# Save it as a .png file.
ggsave("Total_D12_FC_QC_mean_QC_d_TFAT_KCAL.png",
TFAT_KCAL_t, device="png", width=5.3, height=4.5)
