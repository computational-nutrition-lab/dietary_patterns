SNP1means <- data.frame(SigSNP=MySNP, Alleles=c("Het", "Major", "Minor"), Genotype=NA, Count=NA, MeanPheno=NA)
for(i in 1:3){    # For loop for major, hetero, and minor alleles.
SNP1means[i,3]= MHM[i]                # Put genotype calls in column 2.
SNP1means[i,4]= indSNP_CT_s %>%       # Put number of individuals in column 3.
filter(Genotype == MHM[i]) %>%
nrow()
SNP1means[i,5]= indSNP_CT_s %>%       # Put mean CT for each genotype in column 4.
filter(Genotype == MHM[i]) %>%
summarise(mean(phenovalue))
}
# Difference between the Major allele and minor allele.
SNP1means$Diff = SNP1means[2,5] - SNP1means[3,5]
tail(SNP1means)
# Make a one-line table
OnelineSNP1means =
data.frame(SigSNP=MySNP,
Mjr=SNP1means[2,3], Mjr_n=SNP1means[2,4], Mjr_mean=SNP1means[2,5],
mnr=SNP1means[3,3], mnr_n=SNP1means[3,4], mnr_mean=SNP1means[3,5],
Diff= SNP1means[3,6],
Het=SNP1means[1,3], Het_n=SNP1means[1,4], Het_mean=SNP1means[1,5]
)
OnelineSNP1means
# <OR 2> Second SNP and onwards - Add this to the existing table!
OnelineTableALL <- bind_rows(OnelineTableALL, OnelineSNP1means)
OnelineTableALL
indSNP_CT_s_l <- merge(x=indSNP_CT_s, y=PICinfo, all.x=T, by="Taxa")
# Remove rows containing NAs in the phenotype value, then sort by Genotype then Taxa.
lll = indSNP_CT_s_l %>% filter(!is.na(phenovalue))
nrow(lll) # nrow should be the same as the number of individuals used for the GWAS.
mmm = lll[ order(lll$Genotype,
lll$phenovalue,
lll$Taxa), ]
# head(mmm[, 1:3], 10)
# tail(mmm[, 1:3], 10)
# Get the index number for the current SNP, to use it as a prefix.
nthSNP <- as.numeric(which(SNPs == MySNP))
prefix <- character()
# Add "0" if 'nthSNP' is one digit, so that the files will be easier to sort.
if(nthSNP < 10){ prefix <- paste("0", nthSNP, sep="")
}else if(nthSNP >= 10 & nthSNP < 99){ prefix <- nthSNP }
# Save it a csv file with the SNP name in the filename.
write.csv(mmm, paste("LD_sw50_5_08/BLINKpc3/", paste(prefix, MySNP, "PICinfo_s.csv", sep="_"), sep=""), row.names=F)
# Go back and do the next SNP.
#----------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------
# When all the significant SNPS were dealt with...
# colnames(OnelineSNP1means)<-NULL  # 2nd SNP and onwards  # 1-line table.
# write.table(OnelineTableALL, "BLINKpc3/00_sigSNPs_MHMvalues.csv", sep=",", row.names=F)
write.table(OnelineTableALL, "LD_sw50_5_08/BLINKpc3/00_sigSNPs_MHMvalues.csv", sep=",", row.names=F)
# PR2019_DR_PodScore_sw50_5_08, PCs=3  ========================================================================================================================
setwd("E:/MSU OneDrive 20210829/PIC Cassoulet/PIC/GWAS/Manplot/PR2019_DR_PodScore_sw50_5_08/")
# BiocManager::install("CMplot")
library(CMplot)
Mypvalues = read.csv("PodScore_sw50_5_08.csv")
head(Mypvalues)
# Manhattan plot
CMplot(Mypvalues, type="p", plot.type="m", LOG10=TRUE,threshold= 1.281E-04, threshold.lty= 2,
threshold.lwd=1, threshold.col="black", file="jpg", memo="",dpi=300,
file.output=T, width=8.92, height=3.52, amplify=F, box=T, cex.lab=1.2, cex.axis=1, mar= c(3,5,1,1)  )
# QQ plot
CMplot(Mypvalues, plot.type="q", box=T, file="jpg", memo="" ,dpi=300,
conf.int=TRUE, conf.int.col=NULL, col="darkblue", threshold.col="red",
threshold.lty=2, file.output=T,  cex.axis=1, cex.lab=1.1, main ="",
mar=c(4.5,4.5,1,1),  ylab.pos=2.3,  width=3.75, height=3.75)
# SNP density plot
CMplot(Mypvalues, type="d", plot.type="d",bin.size=1e6,chr.den.col=c("darkgreen", "yellow", "red"),
file="jpg",memo="",dpi=300,  main=paste("PodScore, ", nrow(Mypvalues), " SNPs", sep=""),
file.output=TRUE,verbose=TRUE,width=9,height=6)
# Pick up only the SNPs with FDR-adjusted p-value < 0.05.
aaa <- subset(GWASresults, FDR_Adjusted_P.values < 0.1)
nrow(aaa)
# Take only necessary info
bbb <- aaa[, c("SNP","Chromosome","Position","FDR_Adjusted_P.values")]
# Round the FDR_Adjusted_P.values.
bbb$FDR_Adjusted_P.values <- formatC(bbb$FDR_Adjusted_P.values, format="e", digits=1)
# Insert a thousand separator on 'Position'.
bbb$Position <- prettyNum(bbb$Position, big.mark=",")
# Add the correct number of PCs
bbb$PCs <- 3
# Re-order columns
ccc <- bbb[, c(1,5,2,3,4)]
ccc
# Re-order columns
ccc <- bbb[, c(1,5,2,3,4)]
ccc
# Copy to clipboard and paste it to xxx_GWASrestuls.xlsx.
write.table(ccc, "clipboard", sep="\t", row.names=F, quote=F)
head(PICinfo)
#----------------------------------------------------------------------------------------------------
# Loop starts here.  Change the number of SNPs here.
MySNP= SNPs[5]
MySNP
# Take the SNP column of ccc df generated above.
SNPs <- ccc[, "SNP"]
SNPs
#----------------------------------------------------------------------------------------------------
# Loop starts here.  Change the number of SNPs here.
MySNP= SNPs[5]
myG <- read.table("LD_sw50_5_08/PIC_pl_geno999_PR2019_DR_PodScore_het25_mi80_maf3_sw50_5_08.hmp_f.txt", head=F)
nrow(myG)
setwd("E:/MSU OneDrive 20210829/PIC Cassoulet/PIC/GWAS/05_PR2019_DR_PodScore/")
myhist <- read.table("PR2019_DR_PodScore.txt", sep="\t", header=F)
myhist <- read.table("PR2019_DR_PodScore.txt", sep="\t", header=F)
myG <- read.table("LD_sw50_5_08/PIC_pl_geno999_PR2019_DR_PodScore_het25_mi80_maf3_sw50_5_08.hmp_f.txt", head=F)
nrow(myG)
# Prep myPheno
head(myhist)
max(myhist$V2)
nrow(myhist)
# <1> If no backtransformation is necessary...
myPheno <- myhist[, c(1,2)]  # Pick columns that have Taxa and appropriate phenotype values.
colnames(myPheno) = c("Taxa", "phenovalue")
head(myPheno)
library(dplyr)
# Take the SNP column of ccc df generated above.
SNPs <- ccc[, "SNP"]
SNPs
#----------------------------------------------------------------------------------------------------
# Prep PIC info here, too, for merging.
# Load PIC fingerprint info.
PICinfo <- read.csv("E:/MSU OneDrive 20210829/PIC Cassoulet/12K_SNP samples/PICinfo_forR.csv", header=T)
head(PICinfo)
# Change "Short ID" to "Taxa" for merging.
colnames(PICinfo)[1] <- "Taxa"
#----------------------------------------------------------------------------------------------------
# Loop starts here.  Change the number of SNPs here.
MySNP= SNPs[5]
#Look for this value in all the columns of myG.
SNP1 = myG %>% filter_all(any_vars(. %in% paste(MySNP)))
# Get the first row of myG (names of individuals).
headings = head(myG, n=1)
# Bind the names of individuals and SNP genotype at SNP1.
indSNP = bind_rows(headings, SNP1)
indSNPt = t(indSNP) # Make indSNP into a long table
colnames(indSNPt) = c("Taxa", "Genotype")
# Join by Taxa
indSNP_CT = full_join(as.data.frame(indSNPt), as.data.frame(myPheno))   ### USE myPheno here ###
# Sort by genotype.
# attach(indSNP_CT) # Need to "Attach" in order to sort.
indSNP_CT_s = indSNP_CT[order(indSNP_CT$Genotype), ]
# Determine which is major and which is minor allele.
table(indSNP_CT_s$Genotype)
## CHANGE THIS FOR EVERY SNP
Major = "C"
Minor = "T"
Het =   "Y"
# Define the vectors of hetero, major, and minor alleles.
MHM <-  c(Het, Major, Minor)
# Calculate means for each genotype (and heterozygotes if any)
SNP1means <- data.frame(SigSNP=MySNP, Alleles=c("Het", "Major", "Minor"), Genotype=NA, Count=NA, MeanPheno=NA)
for(i in 1:3){    # For loop for major, hetero, and minor alleles.
SNP1means[i,3]= MHM[i]                # Put genotype calls in column 2.
SNP1means[i,4]= indSNP_CT_s %>%       # Put number of individuals in column 3.
filter(Genotype == MHM[i]) %>%
nrow()
SNP1means[i,5]= indSNP_CT_s %>%       # Put mean CT for each genotype in column 4.
filter(Genotype == MHM[i]) %>%
summarise(mean(phenovalue))
}
# Difference between the Major allele and minor allele.
SNP1means$Diff = SNP1means[2,5] - SNP1means[3,5]
tail(SNP1means)
# Make a one-line table
OnelineSNP1means =
data.frame(SigSNP=MySNP,
Mjr=SNP1means[2,3], Mjr_n=SNP1means[2,4], Mjr_mean=SNP1means[2,5],
mnr=SNP1means[3,3], mnr_n=SNP1means[3,4], mnr_mean=SNP1means[3,5],
Diff= SNP1means[3,6],
Het=SNP1means[1,3], Het_n=SNP1means[1,4], Het_mean=SNP1means[1,5]
)
OnelineSNP1means
OnelineSNP1means
OnelineTableALL
# <OR 2> Second SNP and onwards - Add this to the existing table!
OnelineTableALL <- bind_rows(OnelineTableALL, OnelineSNP1means)
# Add PIC information to indSNP_CT_s so that the individuals' info can be seen together with
# the genotype at this particular SNP.
# Merge PIC info with the geno-pheno table, too.
indSNP_CT_s_l <- merge(x=indSNP_CT_s, y=PICinfo, all.x=T, by="Taxa")
# Remove rows containing NAs in the phenotype value, then sort by Genotype then Taxa.
lll = indSNP_CT_s_l %>% filter(!is.na(phenovalue))
nrow(lll) # nrow should be the same as the number of individuals used for the GWAS.
mmm = lll[ order(lll$Genotype,
lll$phenovalue,
lll$Taxa), ]
# Get the index number for the current SNP, to use it as a prefix.
nthSNP <- as.numeric(which(SNPs == MySNP))
prefix <- character()
# Add "0" if 'nthSNP' is one digit, so that the files will be easier to sort.
if(nthSNP < 10){ prefix <- paste("0", nthSNP, sep="")
}else if(nthSNP >= 10 & nthSNP < 99){ prefix <- nthSNP }
# Save it a csv file with the SNP name in the filename.
write.csv(mmm, paste("LD_sw50_5_08/BLINKpc3/", paste(prefix, MySNP, "PICinfo_s.csv", sep="_"), sep=""), row.names=F)
# Go back and do the next SNP.
#----------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------
# When all the significant SNPS were dealt with...
# colnames(OnelineSNP1means)<-NULL  # 2nd SNP and onwards  # 1-line table.
# write.table(OnelineTableALL, "BLINKpc3/00_sigSNPs_MHMvalues.csv", sep=",", row.names=F)
write.table(OnelineTableALL, "LD_sw50_5_08/BLINKpc3/00_sigSNPs_MHMvalues.csv", sep=",", row.names=F)
library(ggplot2)
library(ggfortify)
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Load source scripts
source("lib/specify_data_dir.R")
source("lib/ggplot2themes.R")
source("lib/PCA.R")
# Specify where the data is.
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data")
# Your input data should be a data frame with variables with non-zero variance.
pca_input <- read.table("males50s_QCtotal_d_glu_body_meta_demo_Nut_rv.txt",
sep="\t", header=T)
# Ensure your input file has the correct number of rows and columns.
dim(pca_input)
head(pca_input)
# Ensure your input file has the correct number of rows and columns.
dim(pca_input)
# Perform PCA with the subset data, scaled.
scaled_pca <- prcomp(x= pca_input, scale= TRUE)
source("lib/PCA.R")
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Load source scripts
source("lib/specify_data_dir.R")
source("lib/ggplot2themes.R")
source("lib/PCA.R")
# Your input data should be a data frame with variables with non-zero variance.
pca_input <- read.table("males50s_QCtotal_d_glu_body_meta_demo_Nut_rv.txt",
sep="\t", header=T)
# Specify where the data is.
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data")
# Your input data should be a data frame with variables with non-zero variance.
pca_input <- read.table("males50s_QCtotal_d_glu_body_meta_demo_Nut_rv.txt",
sep="\t", header=T)
# Ensure your input file has the correct number of rows and columns.
dim(pca_input)
head(pca_input, 2)
# Perform PCA with the subset data, scaled.
scaled_pca <- prcomp(x= pca_input, scale= TRUE)
# Specify the directory (folder) to save the results.
res_dir_Nut = "males50s_Nut_PCA"
# Specify the prefix of filenames to be saved.
res_prefix_Nut = "males50s_Nut"
# Perform PCA with the subset data, scaled.
scaled_pca <- prcomp(x= pca_input, scale= TRUE)
# Specify the directory (folder) to save the results.
res_dir_Nut = "males50s_Nut_PCA"
# Specify the prefix of filenames to be saved.
res_prefix_Nut = "males50s_Nut"
# Save PCA output files in a specified folder (out.dir) and a prefix (out.prefix).
OutputPCA(pca.data= pca_input, pca.result= scaled_pca,
out.dir= res_dir_Nut, out.prefix= res_prefix_Nut)
# Combine the input (totals before processing) with all the variables and the PC results.
# Input is your items/totals input file before any prep for clustering, from which you derived the input for the PCA.
SaveInputAndPCs(input="QCtotal_d_glu_body_meta_demo_males50s.txt", pca.results = scaled_pca,
out.dir= res_dir_Nut, out.prefix= res_prefix_Nut)
# Load the input & PC info.
Nut_PCs <- read.table("males50s_Nut_PCA/males50s_Nut_PCs.txt", sep="\t", header=T)
# Change GLU_index to a factor so that factors will be displayed in order.
Nut_PCs$GLU_index <- factor(Nut_PCs$GLU_index, levels= c("Normal", "Prediabetic", "Diabetic"))
Nut_PCs$GLU_index
# Ellipses.
ell <- ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(color=GLU_index), size=3 ) +
theme_bw(base_size = 12) + no_grid + theme(aspect.ratio = 1) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink")) +
stat_ellipse(level=0.95)
ell
ggsave("males50s_Nut_PCA/males50s_Nut_PCA_by_GLU_index_PC12_ell.png", ell,
device="png", width=7, height=6.5)
# ---------------------------------------------------------------------------------------------------------------
# Load the glu_3_males50s data.
glu_3_males50s <- read.table("QCtotal_d_glu_body_meta_demo_males50s.txt",
sep="\t", header=T)
# Change GLU_index to a factor so that factors will be displayed in order.
glu_3_males50s$GLU_index <- factor(glu_3_males50s$GLU_index,
levels= c("Normal", "Prediabetic", "Diabetic"))
# Use the autoplot function.
food_Nut_PCA <- autoplot(scaled_pca, x=2, y=3,    # Specify which PC
loadings=T, loadings.label=T, loadings.colour = 'grey50',  # loadings.label=T if want to see it
data = glu_3_males50s,  size= 3 ) +   # data is the original input, not after selecting specific variables.
geom_point(size = 3, alpha = 1, na.rm = T, shape = 21,  aes(fill= GLU_index)) +
theme_bw(base_size = 12) + theme(aspect.ratio = 1) +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_fill_manual( values= c("steelblue3", "yellow", "hotpink"))
food_Nut_PCA
colnames(glu_3_males50s)
# Change GLU_index to a factor so that factors will be displayed in order.
glu_3_males50s$GLU_index <- factor(glu_3_males50s$GLU_index,
levels= c("Normal", "Prediabetic", "Diabetic"))
# Use the autoplot function.
food_Nut_PCA <- autoplot(scaled_pca, x=2, y=3,    # Specify which PC
loadings=T, loadings.label=T, loadings.colour = 'grey50',  # loadings.label=T if want to see it
data = glu_3_males50s,  size= 3 ) +   # data is the original input, not after selecting specific variables.
geom_point(size = 3, alpha = 1, na.rm = T, shape = 21,  aes(fill= GLU_index)) +
theme_bw(base_size = 12) + theme(aspect.ratio = 1) +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_fill_manual( values= c("steelblue3", "yellow", "hotpink"))
food_Nut_PCA
food_Nut_PCA
# Your input data should be a data frame with variables with non-zero variance.
pca_input <- read.table("males50s_QCtotal_d_glu_body_meta_demo_Cat_rv.txt",
sep="\t", header=T)
# Ensure your input file has the correct number of rows and columns.
dim(pca_input)
# Specify the directory (folder) to save the results.
res_dir_Cat = "males50s_Cat_PCA"
# Perform PCA with the subset data, scaled.
scaled_pca <- prcomp(x= pca_input, scale= TRUE)
# Specify the prefix of filenames to be saved.
res_prefix_Cat = "males50s_Cat"
# Set black and white theme in ggplot2.
theme_set(theme_bw(base_size = 14))
# Save PCA output files in a specified folder (out.dir) and a prefix (out.prefix).
OutputPCA(pca.data=pca_input, pca.result=scaled_pca,
out.dir= res_dir_Cat, out.prefix= res_prefix_Cat)
# Perform PCA with the subset data, scaled.
scaled_pca <- prcomp(x= pca_input, scale= TRUE)
# Specify the directory (folder) to save the results.
res_dir_Cat = "males50s_Cat_PCA"
# Specify the prefix of filenames to be saved.
res_prefix_Cat = "males50s_Cat"
# Save PCA output files in a specified folder (out.dir) and a prefix (out.prefix).
OutputPCA(pca.data=pca_input, pca.result=scaled_pca,
out.dir= res_dir_Cat, out.prefix= res_prefix_Cat)
# Combine the input (totals before processing) with all the variables and the PC results.
# Input is your items/totals input file before any prep for clustering, from which you derived the input for the PCA.
SaveInputAndPCs(input="QCtotal_d_glu_body_meta_demo_males50s.txt", pca.results = scaled_pca,
out.dir= res_dir_Cat, out.prefix= res_prefix_Cat)
# Load the input & PC info.
Cat_PCs <- read.table("males50s_Cat_PCA/males50s_Cat_PCs.txt", sep="\t", header=T)
# Change GLU_index to a factor so that the levels will be displayed in order.
Cat_PCs$GLU_index <- factor(Cat_PCs$GLU_index, levels= c("Normal", "Prediabetic", "Diabetic"))
head(Cat_PCs, 1)
dim(Cat_PCs)
# Ellipses. Specify which PCs to plot. Specify which PC in the x and y arguments.
ell <- ggplot(data= Cat_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(color=GLU_index), size=3 ) +
theme_bw(base_size = 12) + no_grid + space_axes + theme(aspect.ratio = 1) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink")) +
stat_ellipse(level=0.95)
ell
# Save as a .pdf.
ggsave("males50s_Cat_PCA/males50s_Cat_PCA_by_GLU_index_PC12_ell.pdf", ell,
device="pdf", width=7, height=6.5)
# ---------------------------------------------------------------------------------------------------------------
# Load the glu_3_males50s data.
glu_3_males50s <- read.table("QCtotal_d_glu_body_meta_demo_males50s.txt",
sep="\t", header=T)
# Change GLU_index to a factor so that factors will be displayed in order.
glu_3_males50s$GLU_index <- factor(glu_3_males50s$GLU_index,
levels= c("Normal", "Prediabetic", "Diabetic"))
# Use the autoplot function. Specify which PC in the x and y arguments.
food_Cat_PCA <- autoplot(scaled_pca, x=1, y=2,
loadings=T, loadings.label=T, loadings.colour = 'grey50',  # loadings.label=T if want to see it
data = glu_3_males50s,  size= 3 ) +            # The original data before filtering.
geom_point(size = 3, alpha = 1, na.rm = T, shape = 21,  aes(fill= GLU_index)) +
theme_bw(base_size = 12) + theme(aspect.ratio = 1) +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_fill_manual( values= c("steelblue3", "yellow", "hotpink"))
food_Cat_PCA
# Use the autoplot function. Specify which PC in the x and y arguments.
food_Cat_PCA <- autoplot(scaled_pca, x=1, y=2,
loadings=T, loadings.label=T, loadings.colour = 'grey50',  # loadings.label=T if want to see it
data = glu_3_males50s,  size= 3 ) +            # The original data before filtering.
geom_point(size = 3, alpha = 1, na.rm = T, shape = 21,  aes(fill= GLU_index)) +
theme_bw(base_size = 12) + theme(aspect.ratio = 1) +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_fill_manual( values= c("steelblue3", "yellow", "hotpink"))
food_Cat_PCA
ggsave("males50s_Cat_PCA/males50s_Cat_PCA_by_GLU_index_PC23.pdf", food_Cat_PCA,
device="pdf", width=7, height=6.5)
ggsave("males50s_Cat_PCA/males50s_Cat_PCA_by_GLU_index_PC12.pdf", food_Cat_PCA,
device="pdf", width=7, height=6.5)
# Use the autoplot function. Specify which PC in the x and y arguments.
food_Cat_PCA <- autoplot(scaled_pca, x=2, y=3,
loadings=T, loadings.label=T, loadings.colour = 'grey50',  # loadings.label=T if want to see it
data = glu_3_males50s,  size= 3 ) +            # The original data before filtering.
geom_point(size = 3, alpha = 1, na.rm = T, shape = 21,  aes(fill= GLU_index)) +
theme_bw(base_size = 12) + theme(aspect.ratio = 1) +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_fill_manual( values= c("steelblue3", "yellow", "hotpink"))
food_Cat_PCA
ggsave("males50s_Cat_PCA/males50s_Cat_PCA_by_GLU_index_PC23.pdf", food_Cat_PCA,
device="pdf", width=7, height=6.5)
# Specify where the data is.
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data")
# Your input data should be a data frame with variables with non-zero variance.
pca_input <- read.table("males50s_QCtotal_d_glu_body_meta_demo_Nut_rv.txt",
sep="\t", header=T)
# Ensure your input file has the correct number of rows and columns.
dim(pca_input)
head(pca_input, 2)
# Perform PCA with the subset data, scaled.
scaled_pca <- prcomp(x= pca_input, scale= TRUE)
# Specify the directory (folder) to save the results.
res_dir_Nut = "males50s_Nut_PCA"
# Specify the prefix of filenames to be saved.
res_prefix_Nut = "males50s_Nut"
# Save PCA output files in a specified folder (out.dir) and a prefix (out.prefix).
OutputPCA(pca.data= pca_input, pca.result= scaled_pca,
out.dir= res_dir_Nut, out.prefix= res_prefix_Nut)
# Combine the input (totals before processing) with all the variables and the PC results.
# Input is your items/totals input file before any prep for clustering, from which you derived the input for the PCA.
SaveInputAndPCs(input="QCtotal_d_glu_body_meta_demo_males50s.txt", pca.results = scaled_pca,
out.dir= res_dir_Nut, out.prefix= res_prefix_Nut)
# Load the input & PC info.
Nut_PCs <- read.table("males50s_Nut_PCA/males50s_Nut_PCs.txt", sep="\t", header=T)
# Change GLU_index to a factor so that factors will be displayed in order.
Nut_PCs$GLU_index <- factor(Nut_PCs$GLU_index, levels= c("Normal", "Prediabetic", "Diabetic"))
# Ellipses.
ell <- ggplot(data= Nut_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(color=GLU_index), size=3 ) +
theme_bw(base_size = 12) + no_grid + theme(aspect.ratio = 1) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink")) +
stat_ellipse(level=0.95)
ell
# Save as a .pdf.
ggsave("males50s_Nut_PCA/males50s_Nut_PCA_by_GLU_index_PC12_ell.pdf", ell,
device="pdf", width=7, height=6.5)
ell
# Save as a .pdf.
ggsave("males50s_Nut_PCA/males50s_Nut_PCA_by_GLU_index_PC12_ell.pdf", ell,
device="pdf", width=7, height=6.5)
# ---------------------------------------------------------------------------------------------------------------
# Load the glu_3_males50s data. (The original data before filtering variables)
glu_3_males50s <- read.table("QCtotal_d_glu_body_meta_demo_males50s.txt",
sep="\t", header=T)
colnames(glu_3_males50s)
# Change GLU_index to a factor so that factors will be displayed in order.
glu_3_males50s$GLU_index <- factor(glu_3_males50s$GLU_index,
levels= c("Normal", "Prediabetic", "Diabetic"))
# Use the autoplot function. Specify which PC in the x and y arguments.
food_Nut_PCA <- autoplot(scaled_pca, x=1, y=2,
loadings=T, loadings.label=T, loadings.colour = 'grey50',  # loadings.label=T if want to see it
data = glu_3_males50s,  size= 3 ) +   # data is the original input, not after selecting specific variables.
geom_point(size = 3, alpha = 1, na.rm = T, shape = 21,  aes(fill= GLU_index)) +
theme_bw(base_size = 12) + theme(aspect.ratio = 1) +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_fill_manual( values= c("steelblue3", "yellow", "hotpink"))
food_Nut_PCA
ggsave("males50s_Nut_PCA/males50s_Nut_PCA_by_GLU_index_PC12.pdf", food_Nut_PCA,
device="pdf", width=7, height=6.5)
ggsave("males50s_Nut_PCA/males50s_Nut_PCA_by_GLU_index_PC23.pdf", food_Nut_PCA,
device="pdf", width=7, height=6.5)
# Use the autoplot function. Specify which PC in the x and y arguments.
food_Nut_PCA <- autoplot(scaled_pca, x=2, y=3,
loadings=T, loadings.label=T, loadings.colour = 'grey50',  # loadings.label=T if want to see it
data = glu_3_males50s,  size= 3 ) +   # data is the original input, not after selecting specific variables.
geom_point(size = 3, alpha = 1, na.rm = T, shape = 21,  aes(fill= GLU_index)) +
theme_bw(base_size = 12) + theme(aspect.ratio = 1) +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_fill_manual( values= c("steelblue3", "yellow", "hotpink"))
food_Nut_PCA
ggsave("males50s_Nut_PCA/males50s_Nut_PCA_by_GLU_index_PC23.pdf", food_Nut_PCA,
device="pdf", width=7, height=6.5)
# Save as a .pdf.
ggsave("males50s_Nut_PCA/males50s_Nut_PCA_by_GLU_index_PC12_ell.pdf", ell,
device="pdf", width=7, height=6.5)
# Ellipses.
ell <- ggplot(data= Nut_PCs, aes(x=PC2, y=PC3, color= GLU_index)) +
geom_point(aes(color=GLU_index), size=3 ) +
theme_bw(base_size = 12) + no_grid + theme(aspect.ratio = 1) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink")) +
stat_ellipse(level=0.95)
ell
# Save as a .pdf.
ggsave("males50s_Nut_PCA/males50s_Nut_PCA_by_GLU_index_PC23_ell.pdf", ell,
device="pdf", width=7, height=6.5)
# Ellipses. Specify which PCs to plot. Specify which PC in the x and y arguments.
ell <- ggplot(data= Cat_PCs, aes(x=PC2, y=PC3, color= GLU_index)) +
geom_point(aes(color=GLU_index), size=3 ) +
theme_bw(base_size = 12) + no_grid + space_axes + theme(aspect.ratio = 1) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink")) +
stat_ellipse(level=0.95)
ell
# Save as a .pdf.
ggsave("males50s_Cat_PCA/males50s_Cat_PCA_by_GLU_index_PC12_ell.pdf", ell,
device="pdf", width=7, height=6.5)
# Save as a .pdf.
ggsave("males50s_Cat_PCA/males50s_Cat_PCA_by_GLU_index_PC23_ell.pdf", ell,
device="pdf", width=7, height=6.5)
# Ellipses. Specify which PCs to plot. Specify which PC in the x and y arguments.
ell <- ggplot(data= Cat_PCs, aes(x=PC1, y=PC2, color= GLU_index)) +
geom_point(aes(color=GLU_index), size=3 ) +
theme_bw(base_size = 12) + no_grid + space_axes + theme(aspect.ratio = 1) +
scale_color_manual( values= c("steelblue3", "gold3", "hotpink")) +
stat_ellipse(level=0.95)
ell
# Save as a .pdf.
ggsave("males50s_Cat_PCA/males50s_Cat_PCA_by_GLU_index_PC12_ell.pdf", ell,
device="pdf", width=7, height=6.5)
# Ensure your input file has the correct number of rows and columns.
dim(pca_input)
head(pca_input, 2)
# Set where the NHANES data and food code table are.
setwd("~/GitHub/dietary_patterns")
# Load necessary functions.
source("lib/load_clean_NHANES.R")
source("lib/prep_data_for_clustering.R")
source("lib/Food_tree_scripts/format.foods.r")
# Load SASeport, necessary to import NHANES data.
library(SASxport)
# Load the formatted foodcode table.
foodcodetable_f <- read.table("eg_data/NHANES/FoodCodes_DRXFCD_I_f.txt", sep="\t", header=T)
# Check the first 10 rows of the output.
foodcodetable_f[1:10, ]
# Check the first 10 rows of the output.
foodcodetable_f[1:10, ]
