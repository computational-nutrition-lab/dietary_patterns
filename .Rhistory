BCAROutliers(totals.data = totals_data, min = 15, max = 8200)
View(BCAR_outlier_rows)
# or show the outliers if too many.
bcaroutliers <- BCAR_outlier_rows[, c('User_Day', 'KCAL', 'BCAR')]
View(BCAR_outlier_rows)
# or show the outliers if too many.
bcaroutliers <- BCAR_outlier_rows[, c('User_Day', 'KCAL')]
# or show the outliers if too many.
bcaroutliers <- BCAR_outlier_rows[, c('UserName', 'KCAL', 'BCAR')]
bcaroutliers
View(BCAR_outlier_rows)
bcaroutliers[order(bcaroutliers$BCAR, decreasing = T), ]
# ---------------------------------------------------------------------------------------------------------------
dim(totals_data)
# or show the outliers if too many.
VC_outlier_rows[, c('User_Day', 'KCAL', 'VC', 'V_TOTAL', 'V_DRKGR', 'F_TOTAL')]  # F is fruits.
# Flag if VC (Vitamin C) is <5 or >400 --> ask remove or not --> if yes, remove those rows
VCOutliers(totals.data = totals_data, min = 5, max = 400)
# or show the outliers if too many.
VC_outlier_rows[, c('UserName', 'KCAL', 'VC', 'V_TOTAL', 'V_DRKGR', 'F_TOTAL')]  # F is fruits.
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers(totals.data = totals_data, min = 15, max = 8200)
# Flag if BCAR (beta carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers <- function(totals.data = New_Totals, min = 15, max = 8200){
BCAR_outlier_rows <<- subset(totals.data, BCAR < min | BCAR > max)
cat("There are", nrow(BCAR_outlier_rows), "observations with <", min, "BCAR/day or >", max, "BCAR/day. \n", sep = " ")
if(nrow(BCAR_outlier_rows) == 0){ cat("\n")}
else{
print(BCAR_outlier_rows)   # Show the outlier rows
answer <- askYesNo("Remove?")
if(answer==T){
totals.data <<- subset(totals.data, BCAR >= min & BCAR <= max)
}
}
}
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers(totals.data = totals_data, min = 15, max = 8200)
# ---------------------------------------------------------------------------------------------------------------
dim(totals_data)
# ---------------------------------------------------------------------------------------------------------------
head(totals_data)
# Flag if BCAR (beta carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers <- function(totals.data = New_Totals, min = 15, max = 8200){
BCAR_outlier_rows <<- subset(totals.data, BCAR < min | BCAR > max)
cat("There are", nrow(BCAR_outlier_rows), "observations with <", min, "BCAR/day or >", max, "BCAR/day. \n", sep = " ")
if(nrow(BCAR_outlier_rows) == 0){ cat("\n")}
else{
print(BCAR_outlier_rows)   # Show the outlier rows
answer <- askYesNo("Remove?")
if(answer==T){
totals.data1 <<- subset(totals.data, BCAR >= min & BCAR <= max)
}
}
}
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers(totals.data = totals_data, min = 15, max = 8200)
# ---------------------------------------------------------------------------------------------------------------
head(totals_data1)
# ---------------------------------------------------------------------------------------------------------------
head(totals.data1)
# Flag if BCAR (beta carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers <- function(totals.data = New_Totals, min = 15, max = 8200){
temp <- totals.data
BCAR_outlier_rows <<- subset(temp, BCAR < min | BCAR > max)
cat("There are", nrow(BCAR_outlier_rows), "observations with <", min, "BCAR/day or >", max, "BCAR/day. \n", sep = " ")
if(nrow(BCAR_outlier_rows) == 0){ cat("\n")}
else{
print(BCAR_outlier_rows)   # Show the outlier rows
answer <- askYesNo("Remove?")
if(answer==T){
totals.data <<- subset(temp, BCAR >= min & BCAR <= max)
}
}
}
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers(totals.data = totals_data, min = 15, max = 8200)
rm(totals)
rm(totals_data)
rm(totals.data)
rm(totals.data1)
rm(VC_outlier_rows)
rm(BCAR_outlier_rows)
dim(New_Totals)
dim(totals)
# Use VVKAJ data ---------------------------------------------------------------
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
# Load your totals data if ready to go.
totals <- read.csv("VVKAJ_2021-11-09_7963_Totals.csv", sep = ",", header=T)
# Come back to the main directory
setwd(main.wd)
# ========================================================================================
# <Optional> Use individuals_to_remove.txt to filter out users marked as Remove = yes.
# ========================================================================================
# Load your metadata that has information about which UserName(s) to remove.
ind_to_rm <- read.delim("eg_data/VVKAJ101-105/individuals_to_remove.txt", header=T)
# Show which has "yes" in the "Remove" column, and remove them.
subset(ind_to_rm, Remove == "yes")
# Data after QC is named as selected_data, and is saved as a text file with the specified name.
RemoveRows(data=totals, metadata.file=ind_to_rm, output.name="eg_data/VVKAJ101-105/selectedtotals.txt")
# Load these selected data for further QC.
totals <- read.table("eg_data/VVKAJ101-105/selectedtotals.txt", header=T, sep="\t")
dim(totals)
ind_metadata <- read.table("eg_data/VVKAJ101-105/ind_metadata.txt", sep="\t", header=T)
head(ind_metadata)
# Add this metadata of each participant in totals or items.
# 'NA' will be inserted to UserNames which are not in ind_metadata.
totals <- merge(x=totals, y=ind_metadata, by="UserName", all.x=T)
table(totals$UserName)
head(totals, 2)
head(totals[, c(1, 100, 112)], 20)
# Use VVKAJ data. --------------------------------------------------------
GenerateTotals(items.data=items, User.Name='UserName', Recall.No='RecallNo')
# The number of rows should be {No. of users x No. days}.
dim(New_Totals)
head(New_Totals, 2)
# Save as a txt file.
write.table(New_Totals, "eg_data/VVKAJ101-105/VVKAJ_New_Totals.txt", sep="\t", row.names=F)
# Define your totals dataset if necessary.
mytotals <- totals      # imported totals
dim(totals)
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers(totals.data = mytotals, min = 15, max = 8200)
dim(totals)
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers(totals.data = mytotals, min = 15, max = 8200)
# Flag if BCAR (beta carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers <- function(totals.data = New_Totals, min = 15, max = 8200){
temp <- totals.data
BCAR_outlier_rows <<- subset(temp, BCAR < min | BCAR > max)
cat("There are", nrow(BCAR_outlier_rows), "observations with <", min, "BCAR/day or >", max, "BCAR/day. \n", sep = " ")
if(nrow(BCAR_outlier_rows) == 0){ cat("\n")}
else{
print(BCAR_outlier_rows)   # Show the outlier rows
answer <- askYesNo("Remove?")
if(answer==T){
totals <<- subset(temp, BCAR >= min & BCAR <= max)
}
}
}
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers(totals.data = mytotals, min = 15, max = 8200)
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers(totals.data = mytotals, min = 15, max = 8200)
# Define your totals dataset if necessary.
QCtotals <- totals      # imported totals
# Flag if KCAL is <600 or >5700 --> ask remove or not --> if yes, remove those rows
KCALOutliers(totals.data = QCtotals, min = 600, max = 5700)
# Flag if PROT is <10 or >240 --> ask remove or not --> if yes, remove those rows
PROTOutliers(totals.data = QCtotals, min = 10, max = 240)
# Flag if TFAT is <15 or >230 --> ask remove or not --> if yes, remove those rows
TFATOutliers(totals.data = QCtotals, min = 15, max = 230)
# Flag if VC (Vitamin C) is <5 or >400 --> ask remove or not --> if yes, remove those rows
VCOutliers(totals.data = QCtotals, min = 5, max = 400)
# or show the outliers if too many.
VC_outlier_rows[, c('UserName', 'KCAL', 'VC', 'V_TOTAL', 'V_DRKGR', 'F_TOTAL')]  # F is fruits.
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers(totals.data = QCtotals, min = 15, max = 8200)
QCtotals <- New_Totals  # my newly generated totals
# or show the outliers if too many.
VC_outlier_rows[, c('UserName', 'KCAL', 'VC', 'V_TOTAL', 'V_DRKGR', 'F_TOTAL')]  # F is fruits.
# Flag if VC (Vitamin C) is <5 or >400 --> ask remove or not --> if yes, remove those rows
VCOutliers(totals.data = QCtotals, min = 5, max = 400)
# or show the outliers if too many.
VC_outlier_rows[, c('UserName', 'KCAL', 'VC', 'V_TOTAL', 'V_DRKGR', 'F_TOTAL')]  # F is fruits.
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers(totals.data = QCtotals, min = 15, max = 8200)
# KCAL
# Adult women (>= 12 yo) <600 or >4400
# Adult   men (>= 12 yo) <650 or >5700
# Flag if KCAL is <600 or >5700 --> ask remove or not --> if yes, remove those rows
KCALOutliers <- function(totals.data, min = 600, max = 5700){
temp <- totals.data
KCAL_outlier_rows <<- subset(temp, KCAL < min | KCAL > max)
cat("There are", nrow(KCAL_outlier_rows), "observations with <", min, "kcal/day or >", max, "kcal/day. \n", sep = " ")
if(nrow(KCAL_outlier_rows) == 0){ cat("\n")}
else{
print(KCAL_outlier_rows)   # Show the outlier rows # Some totals have 'RecallNo', others 'SutdyDayNo'...
answer <- askYesNo("Remove?")
if(answer==T){
QCtotals <<- subset(temp, KCAL >= min & KCAL <= max)
}
}
}
# ---------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------
# Protein
# Adult women (>= 12 yo) <10 or >180
# Adult   men (>= 12 yo) <25 or >240
# Flag if PROT is <10 or >240 --> ask remove or not --> if yes, remove those rows
PROTOutliers <- function(totals.data, min = 10, max = 240){
temp <- totals.data
PROT_outlier_rows <<- subset(temp, PROT < min | PROT > max)
cat("There are", nrow(PROT_outlier_rows), "observations with <", min, "PROT/day or >", max, "PROT/day. \n", sep = " ")
if(nrow(PROT_outlier_rows) == 0){ cat("\n")}
else{
print(PROT_outlier_rows)   # Show the outlier rows
answer <- askYesNo("Remove?")
if(answer==T){
QCtotals <<- subset(temp, PROT >= min & PROT <= max)
}
}
}
# ---------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------
# Fat
# Adult women (>= 12 yo) <15 or >185
# Adult   men (>= 12 yo) <25 or >230
# Flag if TFAT is <15 or >230 --> ask remove or not --> if yes, remove those rows
TFATOutliers <- function(totals.data, min = 15, max = 230){
temp <- totals.data
TFAT_outlier_rows <<- subset(temp, TFAT < min | TFAT > max)
cat("There are", nrow(TFAT_outlier_rows), "observations with <", min, "TFAT/day or >", max, "TFAT/day. \n", sep = " ")
if(nrow(TFAT_outlier_rows) == 0){ cat("\n")}
else{
print(TFAT_outlier_rows)   # Show the outlier rows
answer <- askYesNo("Remove?")
if(answer==T){
QCtotals <<- subset(temp, TFAT >= min & TFAT <= max)
}
}
}
# ---------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------
# Vitamin C
# Adult women (>= 12 yo) <5 or >350
# Adult   men (>= 12 yo) <5 or >400
# Flag if VC (Vitamin C) is <5 or >400 --> ask remove or not --> if yes, remove those rows
VCOutliers <- function(totals.data, min = 5, max = 400){
temp <- totals.data
VC_outlier_rows <<- subset(temp, VC < min | VC > max)
cat("There are", nrow(VC_outlier_rows), "observations with <", min, "VC/day or >", max, "VC/day. \n", sep = " ")
if(nrow(VC_outlier_rows) == 0){ cat("\n")}
else{
print(VC_outlier_rows)   # Show the outlier rows
answer <- askYesNo("Remove?")
if(answer==T){
QCtotals <<- subset(temp, VC >= min & VC <= max)
}
}
}
# ---------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------
# Beta-carotene
# Adult women (>= 12 yo) <15 or >7100
# Adult   men (>= 12 yo) <15 or >8200
# Flag if BCAR (beta carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers <- function(totals.data, min = 15, max = 8200){
temp <- totals.data
BCAR_outlier_rows <<- subset(temp, BCAR < min | BCAR > max)
cat("There are", nrow(BCAR_outlier_rows), "observations with <", min, "BCAR/day or >", max, "BCAR/day. \n", sep = " ")
if(nrow(BCAR_outlier_rows) == 0){ cat("\n")}
else{
print(BCAR_outlier_rows)   # Show the outlier rows
answer <- askYesNo("Remove?")
if(answer==T){
QCtotals <<- subset(temp, BCAR >= min & BCAR <= max)
}
}
}
# ---------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------
# Function to QC rows of 'totals' by Metadata
# Show which has "yes" in the "Remove" column, and remove them.
RemoveRows <- function(data, metadata.file, output.name){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "row(s) below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
selected_data <<- subset(merged, Remove!="yes")
# Save externally.
write.table(selected_data, output.name, sep="\t", row.names=F, quote=F)
}
# ---------------------------------------------------------------------------------------------------------------
QCtotals <- New_Totals  # my newly generated totals
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers(totals.data = QCtotals, min = 15, max = 8200)
# or show the outliers if too many.
bcaroutliers <- BCAR_outlier_rows[, c('UserName', 'KCAL', 'BCAR')]
bcaroutliers[order(bcaroutliers$BCAR, decreasing = T), ]
# Save as "Totals_QCed.txt"
write.table(QCtotals, "eg_data/VVKAJ101-105/VVKAJ_QC_totals.txt", sep="\t", row.names=F)
# create sample dataframe
sample_data <- data.frame( name= c("Geeks1", "Geeks2", "Geeks3",
"Geeks4", "Geeks5", "Geeks6"),
value= c( 11, 15, 10, 23, 32, 53 ) )
colnames(sample_data)
# write dataframe into a space separated text file
write.table( sample_data, file='sample.txt', sep="\t", quote=F, row.names = F)
# write dataframe into a space separated text file
write.table( sample_data, file='sample.txt', sep="\t", quote=T, row.names = T)
# Save as "Totals_QCed.txt"
write.table(QCtotals, "eg_data/VVKAJ101-105/VVKAJ_totals_QCed.txt", sep="\t", quote=F, row.names=F)
# Import source code to run the analyses to follow.
source("lib/specify_dir_and_check_col.R")
source("lib/load_clean_ASA24.R")
# Use VVKAJ data ---------------------------------------------------------------
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
# Name your main directory for future use.
main.wd <- file.path(getwd())
# Use VVKAJ data ---------------------------------------------------------------
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
# Load your raw items data.
items_raw <- read.csv("VVKAJ_2021-11-09_7963_Items.csv", sep = ",", header=T)
# Replace commas with space in Food_description column for further analysis.
items_raw$Food_Description <- gsub(pattern=', ', replacement='_', x=items_raw$Food_Description)
# Save the items with no commas to use in other analyses.
write.table(items_raw, "VVKAJ_2021-11-09_7963_items_no_commas.txt", sep="\t", row.names=F)
# Load the items file as items.
items <- read.table("VVKAJ_2021-11-09_7963_items_no_commas.txt", sep="\t", header=T)
# Load your totals data if ready to go.
totals <- read.csv("VVKAJ_2021-11-09_7963_Totals.csv", sep = ",", header=T)
# Come back to the main directory
setwd(main.wd)
# ========================================================================================
# <Optional> Use individuals_to_remove.txt to filter out users marked as Remove = yes.
# ========================================================================================
# Load your metadata that has information about which UserName(s) to remove.
ind_to_rm <- read.delim("eg_data/VVKAJ101-105/individuals_to_remove.txt", header=T)
ind_to_rm
# Show which has "yes" in the "Remove" column, and remove them.
subset(ind_to_rm, Remove == "yes")
# Data after QC is named as selected_data, and is saved as a text file with the specified name.
RemoveRows(data=totals, metadata.file=ind_to_rm, output.name="eg_data/VVKAJ101-105/selectedtotals.txt")
RemoveRows(data=items,  metadata.file=ind_to_rm, output.name="eg_data/VVKAJ101-105/selecteditems.txt")
# Load these selected data for further QC.
totals <- read.table("eg_data/VVKAJ101-105/selectedtotals.txt", header=T, sep="\t")
items <- read.delim("eg_data/VVKAJ101-105/selecteditems.txt", header=T, sep="\t")
ind_metadata <- read.table("eg_data/VVKAJ101-105/ind_metadata.txt", sep="\t", header=T)
head(ind_metadata)
# Add this metadata of each participant in totals or items.
# 'NA' will be inserted to UserNames which are not in ind_metadata.
totals <- merge(x=totals, y=ind_metadata, by="UserName", all.x=T)
items <- merge(x=items, y=ind_metadata, by="UserName", all.x=T)
# Use VVKAJ data. --------------------------------------------------------
GenerateTotals(items.data=items, User.Name='UserName', Recall.No='RecallNo')
View(New_Totals)
########## Need to make it into a function #############
GenerateTotals <- function(items.data=Items_raw, User.Name='UserName',
Recall.No='RecallNo'){
# Get the index number of "FoodAmt" in dataframe items.data.
FoodAmt_Index_No  <- grep("FoodAmt", colnames(items.data))
A_DRINKS_Index_No <- grep("A_DRINKS", colnames(items.data))
# Subset the necessary columns.
Items_raw3 <<- items.data[, c(User.Name,
Recall.No,
names(items.data)[FoodAmt_Index_No:A_DRINKS_Index_No])]
# Change column names to be recognized by the loop below.
colnames(Items_raw3)[1:2] <<- c('UserName', 'RecallNo')
# Define variables to calculate Totals for.
myvar <<- names(Items_raw3[, -c(1,2)])
myvar
# Create an empty list to store results.
results <- list()
# Calculate totals of each variable for each combination of User x Date x Occasion.
for(i in 1:length(myvar)){
if(i==1){
subsetted <- Items_raw3[, c('UserName','RecallNo', myvar[i])]
restable <- aggregate(subsetted[, 3] ~ subsetted[, 1] + subsetted[, 2],
data=subsetted, FUN = sum)
colnames(restable) <- c('UserName', 'RecallNo', paste(myvar[i]))
restable$User_Day <- paste(restable$UserName, restable$RecallNo, sep = "_")
results[[i]] <- restable
New_Totals <<- restable
}else if(i>1){
subsetted <- Items_raw3[, c('UserName','RecallNo', myvar[i])]
restable <- aggregate(subsetted[, 3] ~ subsetted[, 1] + subsetted[, 2],
data=subsetted, FUN = sum)
colnames(restable) <- c('UserName', 'RecallNo', paste(myvar[i]))
restable$User_Day <- paste(restable$UserName, restable$RecallNo, sep = "_")
restable_sub <- restable[, c(4, 3)]  # take only User_Day and means.
results[[i]] <- restable_sub
New_Totals <<- merge(New_Totals, results[[i]], by="User_Day", all=T)
# all=T takes care of missing data ... inserts NA for combinations not found
}
}
}
# Use VVKAJ data. --------------------------------------------------------
GenerateTotals(items.data=items, User.Name='UserName', Recall.No='RecallNo')
rm(results)
# Use VVKAJ data. --------------------------------------------------------
GenerateTotals(items.data=items, User.Name='UserName', Recall.No='RecallNo')
# The number of rows should be {No. of users x No. days}.
dim(New_Totals)
head(New_Totals, 2)
QCtotals <- New_Totals  # my newly generated totals
# Flag if KCAL is <600 or >5700 --> ask remove or not --> if yes, remove those rows
KCALOutliers(totals.data = QCtotals, min = 600, max = 5700)
# Flag if PROT is <10 or >240 --> ask remove or not --> if yes, remove those rows
PROTOutliers(totals.data = QCtotals, min = 10, max = 240)
# Flag if TFAT is <15 or >230 --> ask remove or not --> if yes, remove those rows
TFATOutliers(totals.data = QCtotals, min = 15, max = 230)
# Flag if VC (Vitamin C) is <5 or >400 --> ask remove or not --> if yes, remove those rows
VCOutliers(totals.data = QCtotals, min = 5, max = 400)
# or show the outliers if too many.
VC_outlier_rows[, c('UserName', 'KCAL', 'VC', 'V_TOTAL', 'V_DRKGR', 'F_TOTAL')]  # F is fruits.
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers(totals.data = QCtotals, min = 15, max = 8200)
# or show the outliers if too many.
bcaroutliers <- BCAR_outlier_rows[, c('UserName', 'KCAL', 'BCAR')]
bcaroutliers[order(bcaroutliers$BCAR, decreasing = T), ]
# Save as "Totals_QCed.txt"
write.table(QCtotals, "eg_data/VVKAJ101-105/VVKAJ_totals_QCed.txt", sep="\t", quote=F, row.names=F)
# ---------------------------------------------------------------------------------------------------------------
RemoveRows <- function(data, metadata.file){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "row(s) below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
selected_data <<- subset(merged, Remove!="yes")
data <<- selected_data
}
RemoveRows(data=totals, metadata.file=ind_to_rm )
# ---------------------------------------------------------------------------------------------------------------
RemoveRows <- function(data, metadata.file){
toberemoved <<- subset(metadata.file, remove.marked.as=="yes")
cat(nrow(toberemoved), "row(s) below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
selected_data <<- subset(merged, Remove != remove.marked.as)
data <<- selected_data
}
# ---------------------------------------------------------------------------------------------------------------
RemoveRows <- function(data, metadata.file){
toberemoved <<- subset(metadata.file, remove.marked.as=="yes")
cat(nrow(toberemoved), "row(s) below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
selected_data <<- subset(merged, Remove != remove.marked.as)
data <<- selected_data
}
# ---------------------------------------------------------------------------------------------------------------
RemoveRows <- function(data, metadata.file){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "row(s) below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
selected_data <<- subset(merged, Remove != "yes")
data <<- selected_data
}
ind_to_rm
# Use VVKAJ data ---------------------------------------------------------------
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
# Load your totals data if ready to go.
totals <- read.csv("VVKAJ_2021-11-09_7963_Totals.csv", sep = ",", header=T)
# Come back to the main directory
setwd(main.wd)
RemoveRows(data=totals, metadata.file=ind_to_rm)
# ---------------------------------------------------------------------------------------------------------------
# Function to QC rows of 'totals' by Metadata
# Show which has "yes" in the "Remove" column, and remove them.
RemoveRows <- function(data, metadata.file, output.name){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "row(s) below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
selected_data <<- subset(merged, Remove!="yes")
# Save externally.
write.table(selected_data, output.name, sep="\t", row.names=F, quote=F)
}
# Data after QC is named as selected_data, and is saved as a text file with the specified name.
RemoveRows(data=totals, metadata.file=ind_to_rm, output.name="eg_data/VVKAJ101-105/selectedtotals.txt")
RemoveRows(data=items,  metadata.file=ind_to_rm, output.name="eg_data/VVKAJ101-105/selecteditems.txt")
ind_to_rm
# ========================================================================================
# <Optional> Use individuals_to_remove.txt to filter out users marked as Remove = yes.
# ========================================================================================
# Load your metadata that has information about which UserName(s) to remove.
ind_to_rm <- read.delim("eg_data/VVKAJ101-105/individuals_to_remove.txt", header=T)
# Show which has "yes" in the "Remove" column, and remove them.
subset(ind_to_rm, Remove == "yes")
# Data after QC is named as selected_data, and is saved as a text file with the specified name.
RemoveRows(data=totals, metadata.file=ind_to_rm, output.name="eg_data/VVKAJ101-105/selectedtotals.txt")
RemoveRows(data=items,  metadata.file=ind_to_rm, output.name="eg_data/VVKAJ101-105/selecteditems.txt")
View(items)
# Use VVKAJ data ---------------------------------------------------------------
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
# Load your raw items data.
items_raw <- read.csv("VVKAJ_2021-11-09_7963_Items.csv", sep = ",", header=T)
# Replace commas with space in Food_description column for further analysis.
items_raw$Food_Description <- gsub(pattern=', ', replacement='_', x=items_raw$Food_Description)
# Save the items with no commas to use in other analyses.
write.table(items_raw, "VVKAJ_2021-11-09_7963_items_no_commas.txt", sep="\t", row.names=F)
# Load the items file as items.
items <- read.table("VVKAJ_2021-11-09_7963_items_no_commas.txt", sep="\t", header=T)
# Come back to the main directory
setwd(main.wd)
RemoveRows(data=items,  metadata.file=ind_to_rm, output.name="eg_data/VVKAJ101-105/selecteditems.txt")
items <- read.delim("eg_data/VVKAJ101-105/selecteditems.txt", header=T, sep="\t")
# Load these selected data for further QC.
totals <- read.table("eg_data/VVKAJ101-105/selectedtotals.txt", header=T, sep="\t")
head(items)
# Save as "Totals_QCed.txt"
write.table(QCtotals, "eg_data/VVKAJ101-105/2021-11-09_7963_Totals_QCed.txt", sep="\t", quote=F, row.names=F)
# Save as "Totals_QCed.txt"
write.table(QCtotals, "eg_data/VVKAJ101-105/VVKAJ_2021-11-09_7963_Totals_QCed.txt", sep="\t", quote=F, row.names=F)
