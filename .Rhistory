# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t") # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
as.data.frame(table(mydata$V1))
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t")
write.table(V1table, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
# mycol
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol)
nrow(mycol)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t") # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
mydata
V1table = as.data.frame(table(mydata$V1))
V1table
write.table(V1table, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t", row.names = F)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t") # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t", row.names = F)
V1table
tail(mydata)
library(dplyr)
mydata %>% group_by(V2) %>% summarise(mysum, FUN=sum)
tail(mydata)
mydata %>% group_by(V1) %>% summarise(V2, FUN=sum)
mydata %>% group_by(V1) %>% summarise(mySum = sum(V2))
rlang::last_error()
mydata %>% group_by(V1) %>% summarise(mySum = mean(V2))
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t", header = T) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
mydata %>% group_by(Eight_colors) %>% summarise(mySum = mean(Freq))
mydata %>% group_by(Eight_colors) %>% summarise(mySum = sum(Freq))
write.table(addsum, "clipboard", sep="\t", row.names = F)
addsum = mydata %>% group_by(Eight_colors) %>% summarise(mySum = sum(Freq))
write.table(addsum, "clipboard", sep="\t", row.names = F)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t", header = T) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
addsum = mydata %>% group_by(Eight_colors) %>% summarise(mySum = sum(Freq))
write.table(addsum, "clipboard", sep="\t", row.names = F)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t", header = T) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
V1table = as.data.frame(table(mydata$V1))
V1table
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol)
nrow(mycol)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
head(mycol)
nrow(mycol)
# NUMERIC ----
bbb = as.data.frame(table(mycol))
bbb
# use this working directory until this script is complete.
setwd("~/GitHub/dietary_patterns")
source("lib/Food_tree_scripts/newick.tree.r")
source("lib/Food_tree_scripts/check.db.r")
source("lib/Food_tree_scripts/format.foods.r")
source("lib/Food_tree_scripts/filter.db.by.diet.records.r")
source("lib/Food_tree_scripts/make.food.tree.r")
source("lib/Food_tree_scripts/make.food.otu.r")
source("lib/Food_tree_scripts/make.fiber.otu.r")
source("lib/Food_tree_scripts/make.dhydrt.otu.r")
library(SASxport)
# read in data for 2011-2012 dietary intake
# food1 <- read.xport("data/NHANES/DR1IFF_G.XPT")
food1 <- read.xport("E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/DR1IFF_I.XPT")
# food2 <- read.xport("data/NHANES/DR2IFF_G.XPT")
food2 <- read.xport("E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/DR2IFF_I.XPT")
# tots1 <- read.xport("data/NHANES/DR1TOT_G.XPT")
tots1 <- read.xport("E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/DR1TOT_I.XPT")
# tots2 <- read.xport("data/NHANES/DR2TOT_G.XPT")
tots2 <- read.xport("E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/DR2TOT_I.XPT")
# demo <- read.xport("data/NHANES/DEMO_G.XPT")
demo <- read.xport("eg_data/NHANES/DEMO_I.XPT")
adults <- demo[demo$ridageyr >= 18,]
# read in food description files
# foodcodes <- sasxport.get("data/NHANES/DRXFCD_G.XPT")
foodcodes <- read.xport("eg_data/NHANES/FoodCodes_DRXFCD_I.XPT")
# Quality filtering
# did the food recall meet the minimum criteria to be considered reliable?
food1 <- food1[food1$dr1drstz == 1,] # this drops people with unreliable records and breastfed children
food2 <- food2[food2$dr2drstz == 1,]
# fix nameing for downstream food tree use
# names(food1)[names(food1) == "dr1ifdcd"] <- "FoodCode"
names(food1)[names(food1) == "DR1IFDCD"] <- "FoodCode"
names(food2)[names(food2) == "DR2IFDCD"]
names(food2)[names(food2) == "DR2IFDCD"] <- "FoodCode"
names(food1)[names(food1) == "DR1MC"]
names(food1)[names(food1) == "DR1IGRMS"]
names(food1)[names(food1) == "DR1IGRMS"] <- "FoodAmt"
names(food2)[names(food2) == "DR2IGRMS"] <- "FoodAmt"
names(foodcodes)[names(foodcodes) == "DRXFDCD"]
names(foodcodes)[names(foodcodes) == "DRXFDCD"] <- "FoodCode"
names(foodcodes)[names(foodcodes) == "DRXFCLD"]
names(foodcodes)[names(foodcodes) == "DRXFCLD"] <- "Main.food.description"
names(modcodes)[names(modcodes) == "DRXMC"] <- "ModCode"
## add main food description/or mod code to the raw data
#food1
food1$FoodCode <- as.factor(food1$FoodCode)
food1$ModCode <- as.factor(food1$ModCode)
food1$ModCode
# food1$ModCode <- as.factor(food1$ModCode)
food1 <- left_join(food1, foodcodes, by = "FoodCode")
# food1$ModCode <- as.factor(food1$ModCode)
head(food1,1)
# read in data for 2011-2012 dietary intake
# food1 <- read.xport("data/NHANES/DR1IFF_G.XPT")
food1 <- read.xport("E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/DR1IFF_I.XPT")
# Quality filtering
# did the food recall meet the minimum criteria to be considered reliable?
food1 <- food1[food1$dr1drstz == 1,] # this drops people with unreliable records and breastfed children
# fix nameing for downstream food tree use
# names(food1)[names(food1) == "dr1ifdcd"] <- "FoodCode"
names(food1)[names(food1) == "DR1IFDCD"] <- "FoodCode"
# names(food1)[names(food1) == "DR1MC"] <- "ModCode"  # No such column.
# names(food2)[names(food2) == "DR2MC"] <- "ModCode"
names(food1)[names(food1) == "DR1IGRMS"] <- "FoodAmt"
food1$FoodCode
# fix naming for downstream food tree use
# names(food1)[names(food1) == "dr1ifdcd"] <- "FoodCode"
names(food1)[names(food1) == "DR1IFDCD"] <- "FoodCode"
names(food1)
names(food1) == "DR1IFDCD"
food1$FoodCode
head(food1,1)
# read in data for 2011-2012 dietary intake
# food1 <- read.xport("data/NHANES/DR1IFF_G.XPT")
food1 <- read.xport("E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/DR1IFF_I.XPT")
head(food1)
# Quality filtering
# did the food recall meet the minimum criteria to be considered reliable?
food1 <- food1[food1$DR1DRSTZ == 1,] # this drops people with unreliable records and breastfed children
# food2 <- read.xport("data/NHANES/DR2IFF_G.XPT")
food2 <- read.xport("E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/DR2IFF_I.XPT")
food2 <- food2[food2$DR2DRSTZ == 1,]
# fix naming for downstream food tree use
# names(food1)[names(food1) == "dr1ifdcd"] <- "FoodCode"
names(food1)[names(food1) == "DR1IFDCD"] <- "FoodCode"
names(food2)[names(food2) == "DR2IFDCD"] <- "FoodCode"
# names(food1)[names(food1) == "DR1MC"] <- "ModCode"  # No such column.
# names(food2)[names(food2) == "DR2MC"] <- "ModCode"
names(food1)[names(food1) == "DR1IGRMS"] <- "FoodAmt"
names(food2)[names(food2) == "DR2IGRMS"] <- "FoodAmt"
names(foodcodes)[names(foodcodes) == "DRXFDCD"] <- "FoodCode"
names(foodcodes)[names(foodcodes) == "DRXFCLD"] <- "Main.food.description"
## add main food description/or mod code to the raw data
#food1
food1$FoodCode <- as.factor(food1$FoodCode)
# food1$ModCode <- as.factor(food1$ModCode)
head(food1,1)
food1 <- left_join(food1, foodcodes, by = "FoodCode")
# food1$ModCode <- as.factor(food1$ModCode)
head(food1, 1)
names(foodcodes)
merged = merge(x=food1, y=foodcodes, by="FoodCode", all.x=T)
head(merged,2)
# food1 <- left_join(food1, foodcodes, by = "FoodCode")
food1 <- merge(x=food1, y=foodcodes, by="FoodCode", all.x=T)
# food1$ModCode <- as.factor(food1$ModCode)
head(food1, 1)
food1$DRXMCD
#food2
food2$FoodCode <- as.factor(food2$FoodCode)
head(food2)
#food2
food2$FoodCode <- as.factor(food2$FoodCode)
# food2$ModCode <- as.factor(food2$ModCode)
# food2 <- left_join(food2, foodcodes, by = "FoodCode")
food2 <- merge(x=food2, y=foodcodes, by="FoodCode", all.x=T)
head(food2)
# subset to just people in both food1 and food2
food1names <- unique(food1$SEQN)
food2names <- unique(food2$SEQN)
keepnames <- food1names[food1names %in% food2names]
keepnames_adults <- keepnames[keepnames %in% adults$SEQN]
# subset to just the variables we need for food tree
food1 <- food1 %>% select(SEQN, FoodCode, ModCode, FoodAmt, Main.food.description)
# subset to just the variables we need for food tree
food1 <- food1 %>% select(SEQN, FoodCode, FoodAmt, Main.food.description)
food2 <- food2 %>% select(SEQN, FoodCode, FoodAmt, Main.food.description)
# make a day varabile before we bind these together
food1$Day = 1
food2$Day = 2
food12 <- rbind(food1, food2)
# limit to just people who have records from day 1 and 2
food12 <- food12[food12$seqn %in% keepnames_adults,]
food12 <- rbind(food1, food2)
# limit to just people who have records from day 1 and 2
food12 <- food12[food12$SEQN %in% keepnames_adults,]
food12 <- rbind(food1, food2)
# limit to just people who have records from day 1 and 2
food12 <- food12[food12$SEQN %in% keepnames_adults,]
keepnames_adults <- keepnames[keepnames %in% adults$SEQN]
adults <- demo[demo$RIDAGEYR >= 18,]
adults <- demo[demo$RIDAGEYR >= 18,]
keepnames_adults <- keepnames[keepnames %in% adults$SEQN]
# subset to just the variables we need for food tree
food1 <- food1 %>% select(SEQN, FoodCode, FoodAmt, Main.food.description)
food1
food2 <- food2 %>% select(SEQN, FoodCode, FoodAmt, Main.food.description)
# make a day varabile before we bind these together
food1$Day = 1
food2$Day = 2
food12 <- rbind(food1, food2)
# limit to just people who have records from day 1 and 2
food12 <- food12[food12$SEQN %in% keepnames_adults,]
# look for people with no foods
sum(table(food12$SEQN, food12$Day)[,1] == 1) # 2 people with only one food reported
sum(table(food12$SEQN, food12$Day)[,2] == 1)  # 7 people with only one food reported
# dietary pattern/special diet map
# diet_type_map <- tots1 %>% select(SEQN, drqsdiet, drqsdt1, drqsdt2, drqsdt3, drqsdt4, drqsdt5, drqsdt6, drqsdt7, drqsdt8, drqsdt9, drqsdt10, drqsdt11, drqsdt12, drqsdt91)
diet_type_map <- tots1 %>% select(SEQN, DRQSDIET, DRQSDT1, DRQSDT2, DRQSDT3, DRQSDT4, DRQSDT5, DRQSDT6, DRQSDT7, DRQSDT8, DRQSDT9, DRQSDT10, DRQSDT11, DRQSDT12, DRQSDT91)
keepnames_adults
diet_type_map <- diet_type_map[diet_type_map$SEQN %in% keepnames_adults,]
# demographics map
demo <- demo[demo$SEQN %in% keepnames_adults, ]
head(demo, 1)
# write to text file (tab separated)
write.table(food1, file = "eg_data/NHANES1516/processed/foodday1.txt", sep = "\t", quote = F, row.names = F)
write.table(food2, file = "eg_data/NHANES1516/processed/foodday2.txt", sep = "\t", quote = F, row.names = F)
write.table(food12, file ="eg_data/NHANES1516/processed/foodday1and2.txt", sep = "\t", quote = F, row.names = F)
# database
write.table(foodcodes, file = "eg_data/NHANES1516/processed/foodcodes.txt", sep = "\t", quote = F, row.names = F)
# write maps
write.table(diet_type_map, file = "eg_data/NHANES1516/processed/diet_type_map.txt", sep = "\t", quote = F, row.names = F)
write.table(demo, file = "eg_data/NHANES1516/processed/demo_map.txt", sep = "\t", quote = F, row.names = F)
head(foodcodes)
head(food12)
# Use the food12 and take average of 2 days.
food12 <- read.table("eg_data/NHANES1516/processed/foodday1and2.txt", sep = "\t", header=T)
head(food12)
tail(food12)
# Format your items data. Output will be saved as dietrecords.txt.
FormatFoods(input_fn="eg_data/NHANES1516/processed/foodday1and2.txt", output_fn="eg_data/NHANES1516/processed/foodday1and2_f.txt", dedupe=F)
food12_f <- read.table("eg_data/NHANES1516/processed/foodday1and2_f.txt", sep = "\t", header=T)
head(food12_f)
tail(food12_f)
# clean up files so they work with the tree building downstream
FormatFoods(input_fn="eg_data/NHANES1516/processed/foodcodes.txt", output_fn="eg_data/NHANES1516/processed/NHANESDatabase.txt") # build database from main FoodCodes
# do this for the entire database of people
check.db(food_database_fn = "E:/MSU OneDrive 20210829/UMinn/Food_tree_unused/data/NHANES/NHANESDatabase.txt", food_records_fn="data/NHANES/dietrecords_all.txt", output_fn="data/NHANES/missing.txt")
qqq = read.table("E:/MSU OneDrive 20210829/UMinn/Food_tree_unused/data/NHANES/processed/individual.foods.from.NHANES_2007-2010.txt", sep="\t", header=T)
head(qqq,1)
table(qqq$seqn)
# ORIGINAL format.foods(input_fn="data/NHANES/processed/individual.foods.from.NHANES_2007-2010.txt", output_fn="data/NHANES/dietrecords_all.txt", dedupe=F)
format.foods(input_fn="E:/MSU OneDrive 20210829/UMinn/Food_tree_unused/data/NHANES/processed/individual.foods.from.NHANES_2007-2010.txt",
output_fn="E:/MSU OneDrive 20210829/UMinn/Food_tree_unused/data/NHANES/dietrecords_all_1.txt", dedupe=F)
# ORIGINAL format.foods(input_fn="data/NHANES/processed/individual.foods.from.NHANES_2007-2010.txt", output_fn="data/NHANES/dietrecords_all.txt", dedupe=F)
FormatFoods(input_fn="E:/MSU OneDrive 20210829/UMinn/Food_tree_unused/data/NHANES/processed/individual.foods.from.NHANES_2007-2010.txt",
output_fn="E:/MSU OneDrive 20210829/UMinn/Food_tree_unused/data/NHANES/dietrecords_all_1.txt", dedupe=F)
# do this for the entire database of people
check.db(food_database_fn = "E:/MSU OneDrive 20210829/UMinn/Food_tree_unused/data/NHANES/NHANESDatabase.txt",
food_records_fn="E:/MSU OneDrive 20210829/UMinn/Food_tree_unused/data/NHANES/dietrecords_all_1.txt",
output_fn="E:/MSU OneDrive 20210829/UMinn/Food_tree_unused/data/NHANES/missing_1.txt")
