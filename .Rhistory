table(metadata_a$n_diets)  # OK
table(metadata_a$count_na) # OK
# Find the diet they are on.
# Calc rowSums for the diet columns.
metadata_a$dietcode <- rowSums(metadata_a[, dietsvec], na.rm = T)
table(metadata_a$dietcode)
sum(dietfreq$Yes)
head(metadata_a[, c("SEQN", dietsvec, "dietcode")], 10)
table(metadata_a$dietcode)
as.data.frame(table(metadata_a$dietcode))
onedietfreq <- as.data.frame(table(metadata_a$dietcode))
colSums(onedietfreq$Freq)
sum(onedietfreq$Freq)
dim(metadata_a)
onedietfreq
metadata_a
head(metadata_a[, c("SEQN", dietsvec, "dietcode")], 3)
# Append the name of the diet.
# Load the dietcode and dietname table
diettable <- read.table("E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/NHANES_Totals_VarNames_Dietnames.txt", sep="\t", header=T)
# Create the number only dietcode...
diettable$dietcode_nonly <- c(1,2,3,4,5,6,7,8,9,10,11,12,91)
# Change the columnnames, to be able to do merge by dietcode.
colnames(diettable) <- c("dietcode_full", "dietname", "dietcode")
diettable
# Merge (append the dietname)
metadata_1diet <- merge(x=metadata_a, y=diettable, by="dietcode", all.x=T)
head(metadata_5)
head(metadata_1diet,1)
# So, 575 people are on 1 diet.
sum(  metadata$n_diets) # Should be the same as sum(dietfreq$Yes).
table(metadata$n_diets)
# freq table of diets followed by them.
onedietfreq <- as.data.frame(table(metadata_a$dietcode))
sum(onedietfreq$Freq) # Should total to the number of individuals following one diet.
# metadata_1diet has the metadata of the individuals who are in QCtotal and following one specific diet.
# Extract only necessary info.
metadata_b <- metadata_1diet[, c("SEQN", "dietcode")]
# metadata_1diet has the metadata of the individuals who are in QCtotal and following one specific diet.
# Extract only necessary info.
metadata_b <- metadata_1diet[, c("SEQN", "dietcode", "dietname")]
head(metadata_b'')
head(metadata_b)
onedietfreq
head(metadata_1diet,1)
# freq table of diets followed by them.
onedietfreq <- as.data.frame(table(metadata_a$dietcode))
onedietfreq
onedietfreq <- as.data.frame(table(metadata_1diet$dietcode))
onedietfreq
onedietfreq <- as.data.frame(table(metadata_1diet$dietname))
onedietfreq
colnames(onedietfreq)
# freq table of diets followed by them.
onedietfreq <- as.data.frame(table(metadata_a$dietcode))
onedietfreq
diettable
colnames(onedietfreq)[1] <- "dietcode"
onedietfreq
colnames(onedietfreq)
onedietfreq_name <- merge(x=onedietfreq, y=diettable, by="dietcode")
onedietfreq_name
onedietfreq_name <- merge(x=onedietfreq, y=diettable, by="dietcode", all.x=T)
onedietfreq_name
onedietfreq
diettable
# Merge (append the dietname)
metadata_1diet <- merge(x=metadata_a, y=diettable, by="dietcode", all.x=T)
metadata_1diet
onedietfreq_name <- merge(x=onedietfreq, y=diettable, by="dietcode", all.x=T)
onedietfreq
# Check
head(metadata_a[, c("SEQN", dietsvec, "dietcode")], 3)
# freq table of diets followed by them.
onedietfreq <- as.data.frame(table(metadata_a$dietcode))
colnames(onedietfreq)[1] <- "dietcode"
onedietfreq
sum(onedietfreq_name$Freq) # Should total to the number of individuals following one diet.
onedietfreq_name
# Merge (append the dietname to metadata.)
metadata_1diet <- merge(x=metadata_a, y=diettable, by="dietcode", all.x=T)
head(metadata_1diet,1)
# metadata_1diet has the metadata of the individuals who are in QCtotal and following one specific diet.
# Extract only necessary info.
metadata_b <- metadata_1diet[, c("SEQN", "dietcode", "dietname")]
head(metadata_b)
head(metadata_1diet,1)
onedietfreq_name
# Take the first 20 individuals from weight-loss (low calorie; n=300), diabetic (n=97),
# low-salt (n=51), low-fat (n=43), and low-carb (n=33)
weightloss <- metadata_1diet %>% filter(dietname == "Weight_loss")
# Take the first 20 individuals from weight-loss (low calorie; n=300), diabetic (n=97),
# low-salt (n=51), low-fat (n=43), and low-carb (n=33)
weightloss <- subset(metadata_1diet, dietname == "Weight_loss")
# Take the first 20 individuals from weight-loss (low calorie; n=300), diabetic (n=97),
# low-salt (n=51), low-fat (n=43), and low-carb (n=33)
weightloss <- subset(metadata_1diet, dietname == "Weight_loss")[1:20, ]
diabetic <- subset(metadata_1diet, dietname == "Diabetic")[1:20, ]
diabetic <- subset(metadata_1diet, dietname   == "Diabetic")[1:20, ]
lowsalt <- subset(metadata_1diet, dietname    == "Low_salt")[1:20, ]
lowfat <- subset(metadata_1diet, dietname     == "Low_fat")[1:20, ]
lowcarb <- subset(metadata_1diet, dietname    == "Low_carb")[1:20, ]
regulardiet <- subset(metadata, DRQSDIET == 2) # those are not following any specific diet.
# Extract only those following any specific diet.
# metadata_1 <- metadata %>% filter(DRQSDIET == 1)
metadata_1 <- metadata %>% filter(DRQSDIET == 2)  # for checking.
# How many are on each diet?
table(metadata$DRQSDT1)
table(metadata$DRQSDT2)
table(metadata$DRQSDT3)
# Extract only those following any specific diet.
# metadata_1 <- metadata %>% filter(DRQSDIET == 1)
metadata_1 <- metadata %>% filter(DRQSDIET == 2)  # for checking.
# How many are on each diet?
table(metadata_1$DRQSDT1)
table(metadata_1$DRQSDT2)
table(metadata_1$DRQSDT3)
table(metadata_1$DRQSDT4)
table(metadata_1$DRQSDT5)
table(metadata_1$DRQSDT6)
table(metadata_1$DRQSDT7)
table(metadata_1$DRQSDT8)
table(metadata_1$DRQSDT9)
table(metadata_1$DRQSDT10)
table(metadata_1$DRQSDT11)
table(metadata_1$DRQSDT12)
table(metadata_1$DRQSDT91)
regulardiet <- subset(metadata, DRQSDIET == 2)[1:20, ] # those are not following any specific diet.
# Combine those
diffdiet120 <- rbind(weightloss, diabetic, lowsalt, lowfat, lowcarb, regulardiet)
colnames(metadata_1diet)
colnames(metadata)
# Take the first 20 individuals from weight-loss (low calorie; n=300), diabetic (n=97),
# low-salt (n=51), low-fat (n=43), and low-carb (n=33)
weightloss <- subset(metadata_1diet, dietname == "Weight_loss")[1:20, "SEQN"]
# Combine those
diffdiet120 <- data.frame(Weight_loss=weightloss,
Diabetic=diabetic,
Low_salt=lowsalt,
Low_fat=lowfat,
Low_carb=lowcarb,
Regular=regulardiet)
diffdiet120
# Take the first 20 individuals from weight-loss (low calorie; n=300), diabetic (n=97),
# low-salt (n=51), low-fat (n=43), and low-carb (n=33)
weightloss <- subset(metadata_1diet, dietname == "Weight_loss")[1:20, "SEQN"]
diabetic <- subset(metadata_1diet, dietname   == "Diabetic")[1:20, "SEQN"]
lowsalt <- subset(metadata_1diet, dietname    == "Low_salt")[1:20, "SEQN"]
lowfat <- subset(metadata_1diet, dietname     == "Low_fat")[1:20, "SEQN"]
lowcarb <- subset(metadata_1diet, dietname    == "Low_carb")[1:20, "SEQN"]
regulardiet <- subset(metadata, DRQSDIET == 2)[1:20, "SEQN"] # those are not following any specific diet.
# Combine those
diffdiet120 <- data.frame(Weight_loss=weightloss,
Diabetic=diabetic,
Low_salt=lowsalt,
Low_fat=lowfat,
Low_carb=lowcarb,
Regular=regulardiet)
diffdiet120
# Combine those
diffdiet120_short <- data.frame(Weight_loss=weightloss,
Diabetic=diabetic,
Low_salt=lowsalt,
Low_fat=lowfat,
Low_carb=lowcarb,
Regular=regulardiet)
diffdiet120_short
diffdiet120 <- melt(diffdiet120_short)
# Create a long table out of this.
library(reshape2)
diffdiet120 <- melt(diffdiet120_short)
diffdiet120
colnames(diffdiet120)
colnames(diffdiet120) <- c("Diet", "SEQN")
# ---------------------------------------------------------------------------------------------------
# Pick up the individuals from totalQC.
names <- QCtotal$SEQN %in% diffdiet120$SEQN
names
QCtotal_1diet <- QCtotal[names, ]
head(QCtotal_1diet$SEQN)
head(diffdiet120)
# ---------------------------------------------------------------------------------------------------
# Add diet info while picking up the indivudlas from totalQC.
QCtotal_onediet <- merge(x=diffdiet120, y=QCtotal, by="SEQN", all.x=T)
head(QCtotal_onediet)
# ---------------------------------------------------------------------------------------------------
# Add diet info while picking up the indivudlas from totalQC.
QCtotal_1diet <- merge(x=diffdiet120, y=QCtotal, by="SEQN", all.x=T)
head(QCtotal_1diet)
head(QCtotal_1diet, 2)
# Import source code to run the analyses to follow.
# source("lib/specify_dir_and_check_col.R")
# source("lib/prep_data_for_clustering.R")
source("lib/PCA.R")
# Define ggplot themes to use in creating plots.
library(ggplot2)
ggplot2::theme_set(theme_bw(base_size = 14))
# ---------------------------------------------------------------------------------------------------
# Define the sample total data with which you are going to do clustering.
totals_QCed_sampled <- QCtotal_1diet
# Some checking... about MOIS and GRMS...
head(totals_QCed_sampled, 2)
hist(totals_QCed_sampled$MOIS)
plot(totals_QCed_sampled$MOIS, totals_QCed_sampled$GRMS)
totals_QCed_sampled$GRMSminusMOIS <- totals_QCed_sampled$GRMS - totals_QCed_sampled$MOIS
hist(totals_QCed_sampled$GRMSminusMOIS)
plot(totals_QCed_sampled$GRMS, totals_QCed_sampled$GRMSminusMOIS)
cor.test(totals_QCed_sampled$GRMS, totals_QCed_sampled$GRMSminusMOIS)
colnames(totals_QCed_sampled)
# Define which columns to drop.
drops <- c("KCAL","GRMS", "MOIS", "NoOfItems")
# Take only the columns whose names are NOT in the drop vector.
aaa <- totals_QCed_sampled[ , !(names(totals_QCed_sampled) %in% drops)]
# Save it as totals_QCed_sampled.
totals_QCed_sampled <- aaa
colnames(totals_QCed_sampled)
# Define the input data to be used.
input_data <- totals_QCed_sampled
# The columns specified as start.col, end.col, and all columns in between will be selected.
# Nutrients
SubsetColumns(data=input_data, start.col="PROT", end.col="P226")
# Pick up only the columns with non-zero variance, in order to run PCA, cluster analysis etc.
# The removed columns will be shown if any.
KeepNonZeroVarColumns(data = subsetted)
# Check the columns (variables) remained.
colnames(subsetted_non0var)
dim(subsetted_non0var)
# ---------------------------------------------------------------------------------------------------------------
# Collapse variables by correlation: take only one variables if they are highly correlated.
cbc_res <- CollapseByCorrelation(x = subsetted_non0var,
min.cor = 0.75,
select.rep.fcn = 'mean', verbose = T)
# Filter out highly correlated variables from the original dataset.
selected_variables <- subsetted_non0var[, cbc_res$reps]
# ---------------------------------------------------------------------------------------------------------------
# Save the variables after removing correlated variables
write.table(selected_variables,
"results/PCA_results/NHANES1516_totalsbyhand_nut_n120/NHANES1516_total_d12_nut_mean_QC_2_120diffdiet_rv.txt",
sep="\t", row.names=F, quote=F)
# ---------------------------------------------------------------------------------------------------------------
# Save the correlation matrix for record in the results folder.
# cc is the correlation matrix produced when variables are collapsed by correlation.
SaveCorrMatrix(x=cc,
out.fn = "results/PCA_results/NHANES1516_totalsbyhand_nut_n120/NHANES1516_total_d12_nut_mean_QC_2_120diffdiet_corr_mat.txt")
# ========================================================================================
# Perform Principal Component Analysis.
# ========================================================================================
#
# ---------------------------------------------------------------------------------------------------------------
# Name your input data.
# Your input data should be a data frame with variables with non-zero variance.
pca_input <- selected_variables
# Ensure your input file has the correct number of rows and columns.
dim(pca_input)
# Create a scree plot.
screep <- LineScreePlot(pca.data = pca_input, pca.result = scaled_pca)
screep
# Perform PCA with the subset data, scaled.
scaled_pca <- prcomp(x=pca_input, scale = TRUE)
# Create a scree plot.
screep <- LineScreePlot(pca.data = pca_input, pca.result = scaled_pca)
screep
# Save it as an input file.
write.table(QCtotal_1diet, "eg_data/NHANES/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet.txt",
sep="\t", quote=F)
# Create a scree plot.
screep <- LineScreePlot(pca.data = pca_input, pca.result = scaled_pca)
screep
ggsave("results/PCA_results/NHANES1516_totalsbyhand_nut_n120/NHANES1516_total_d12_nut_mean_QC_2_120diffdiet_scree.pdf", screep, device="pdf", width=5, height=5, units="in")
# Create a biplot.
# A biplot with the individuals as black dots and variables labelled.
biplotdots <- BiplotDots(pca.result = scaled_pca, pca.data = pca_input, alpha = 0.5)
biplotdots
ggsave("results/PCA_results/NHANES1516_totalsbyhand_nut_n120/NHANES1516_total_d12_nut_mean_QC_2_120diffdiet_biplotdots.pdf", biplotdots, device="pdf", width=5, height=5, units="in")
# A biplot with the individuals labeled.
biplotlabeled <- BiplotLabeled(pca.result=scaled_pca, pca.data=pca_input, individuals.label = T)
biplotlabeled
ggsave("results/PCA_results/NHANES1516_totalsbyhand_nut_n120/NHANES1516_total_d12_nut_mean_QC_2_120diffdiet_biplotlabeled.pdf", biplotlabeled, device="pdf", width=5, height=5, units="in")
# A biplot with the individuals labeled without the variables' arrows.
biplotlabeledwoarrows <- BiplotLabeledwoArrows(pca.result=scaled_pca, pca.data=pca_input,
individuals.label=T)
biplotlabeledwoarrows #+coord_cartesian(xlim=c(-0.1, 0.1), ylim=c(0.05, 0.1))
biplotlabeled
# A biplot with the individuals labeled without the variables' arrows.
biplotlabeledwoarrows <- BiplotLabeledwoArrows(pca.result=scaled_pca, pca.data=pca_input,
individuals.label=T)
biplotlabeledwoarrows #+coord_cartesian(xlim=c(-0.1, 0.1), ylim=c(0.05, 0.1))
# Plot the directions of the variables.
directions <- BiplotLabeled(pca.result=scaled_pca, pca.data=pca_input, individuals.label=F)
directions
ggsave("results/PCA_results/NHANES1516_totalsbyhand_nut_n120/NHANES1516_total_d12_nut_mean_QC_2_120diffdiet_directions.pdf", directions, device="pdf", width=5, height=5, units="in")
# Plot the contribution of the variables to a given PC: PC1 here.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC1",
positive.color="green2", negative.color="grey70", sort.variables = T)
loadings_plot
ggsave("results/PCA_results/NHANES1516_totalsbyhand_nut_n120/NHANES1516_total_d12_nut_mean_QC_2_120diffdiet_loadings_PC1.pdf", loadings_plot, device="pdf", width=8, height=4.8, units="in")
# Plot the contribution of the variables to a given PC: PC2 here.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC2",
positive.color="green2", negative.color="grey70", sort.variables = T)
loadings_plot
ggsave("results/PCA_results/NHANES1516_totalsbyhand_nut_n120/NHANES1516_total_d12_nut_mean_QC_2_120diffdiet_loadings_PC2.pdf", loadings_plot, device="pdf", width=8, height=4.8, units="in")
# ---------------------------------------------------------------------------------------------------------------
# Save the variance explained by each PC as a .txt file.
# Change the file name as necessary.
SaveVarExplained(pca.data = pca_input, pca.result = scaled_pca,
out.fn = "results/PCA_results/NHANES1516_totalsbyhand_nut_n120/NHANES1516_total_d12_nut_mean_QC_2_120diffdiet_PC_var_explained.txt")
# ---------------------------------------------------------------------------------------------------------------
# Calculate loadings of each PC to the variables and
# save it as a txt file in the results folder.
# Change the file name as necessary.
SaveLoadings(pca.result=scaled_pca,
out.fn="results/PCA_results/NHANES1516_totalsbyhand_nut_n120/NHANES1516_total_d12_nut_mean_QC_2_120diffdiet_PC_loadings.txt")
# ---------------------------------------------------------------------------------------------------------------
# Save the PC values with the input which has the metadata and food codes, food names.
# Input is your food input file before any prep for clustering, from which you derived the input for the PCA.
SaveInputAndPCs(input = "eg_data/NHANES/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet.txt",
pca.results = scaled_pca,
out.fn = "results/PCA_results/NHANES1516_totalsbyhand_nut_n120/NHANES1516_total_d12_nut_mean_QC_2_120diffdiet_input_PCs.txt")
biplotlabeled
biplotlabeledwoarrows #+coord_cartesian(xlim=c(-0.1, 0.1), ylim=c(0.05, 0.1))
ggsave("results/PCA_results/NHANES1516_totalsbyhand_nut_n120/NHANES1516_total_d12_nut_mean_QC_2_120diffdiet_biplotlabeledwoarrows.pdf", biplotlabeledwoarrows, device="pdf", width=5, height=5, units="in")
# OR food categories
SubsetColumns(data=input_data, start.col="F_CITMLB", end.col="A_DRINKS")
# The columns specified as start.col, end.col, and all columns in between will be selected.
# Nutrients
SubsetColumns(data=input_data, start.col="PROT", end.col="P226")
# OR food categories
SubsetColumns(data=input_data, start.col="F_CITMLB", end.col="A_DRINKS")
# Pick up only the columns with non-zero variance, in order to run PCA, cluster analysis etc.
# The removed columns will be shown if any.
KeepNonZeroVarColumns(data = subsetted)
# Check the columns (variables) remained.
colnames(subsetted_non0var)
dim(subsetted_non0var)
# ---------------------------------------------------------------------------------------------------------------
# Collapse variables by correlation: take only one variables if they are highly correlated.
cbc_res <- CollapseByCorrelation(x = subsetted_non0var,
min.cor = 0.75,
select.rep.fcn = 'mean', verbose = T)
# Filter out highly correlated variables from the original dataset.
selected_variables <- subsetted_non0var[, cbc_res$reps]
# Check to see the name of the original and filtered variables.
# Among the variables in the same group, the one with the highest variance is kept
#  (according to the explanation above.)
# filtered
head(selected_variables, 1)
dim(selected_variables)
# original
head(subsetted_non0var, 1)
dim(subsetted_non0var)
# ---------------------------------------------------------------------------------------------------------------
# Save the variables after removing correlated variables
write.table(selected_variables,
"results/PCA_results/NHANES1516_totalsbyhand_FC_n120/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet_rv.txt",
sep="\t", row.names=F, quote=F)
# ---------------------------------------------------------------------------------------------------------------
# Save the correlation matrix for record in the results folder.
# cc is the correlation matrix produced when variables are collapsed by correlation.
SaveCorrMatrix(x=cc,
out.fn = "results/PCA_results/NHANES1516_totalsbyhand_FC_n120/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet_corr_mat.txt")
# ========================================================================================
# Perform Principal Component Analysis.
# ========================================================================================
#
# ---------------------------------------------------------------------------------------------------------------
# Name your input data.
# Your input data should be a data frame with variables with non-zero variance.
pca_input <- selected_variables
# Ensure your input file has the correct number of rows and columns.
dim(pca_input)
# Perform PCA with the subset data, scaled.
scaled_pca <- prcomp(x=pca_input, scale = TRUE)
# Create a scree plot.
screep <- LineScreePlot(pca.data = pca_input, pca.result = scaled_pca)
screep
screep
ggsave("results/PCA_results/NHANES1516_totalsbyhand_FC_n120/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet_scree.pdf", screep, device="pdf", width=5, height=5, units="in")
# Create a biplot.
# A biplot with the individuals as black dots and variables labelled.
biplotdots <- BiplotDots(pca.result = scaled_pca, pca.data = pca_input, alpha = 0.5)
biplotdots
ggsave("results/PCA_results/NHANES1516_totalsbyhand_FC_n120/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet_biplotdots.pdf", biplotdots, device="pdf", width=5, height=5, units="in")
# A biplot with the individuals labeled.
biplotlabeled <- BiplotLabeled(pca.result=scaled_pca, pca.data=pca_input, individuals.label = T)
biplotlabeled
ggsave("results/PCA_results/NHANES1516_totalsbyhand_FC_n120/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet_biplotlabeled.pdf", biplotlabeled, device="pdf", width=5, height=5, units="in")
# A biplot with the individuals labeled without the variables' arrows.
biplotlabeledwoarrows <- BiplotLabeledwoArrows(pca.result=scaled_pca, pca.data=pca_input,
individuals.label=T)
biplotlabeledwoarrows #+coord_cartesian(xlim=c(-0.1, 0.1), ylim=c(0.05, 0.1))
ggsave("results/PCA_results/NHANES1516_totalsbyhand_FC_n120/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet_biplotlabeledwoarrows.pdf", biplotlabeledwoarrows, device="pdf", width=5, height=5, units="in")
biplotdots
# Plot the directions of the variables.
directions <- BiplotLabeled(pca.result=scaled_pca, pca.data=pca_input, individuals.label=F)
directions
ggsave("results/PCA_results/NHANES1516_totalsbyhand_FC_n120/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet_directions.pdf", directions, device="pdf", width=5, height=5, units="in")
directions
ggsave("results/PCA_results/NHANES1516_totalsbyhand_FC_n120/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet_directions.pdf", directions, device="pdf", width=5, height=5, units="in")
# Plot the contribution of the variables to a given PC: PC1 here.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC1",
positive.color="green2", negative.color="grey70", sort.variables = T)
loadings_plot
ggsave("results/PCA_results/NHANES1516_totalsbyhand_FC_n120/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet_loadings_PC1.pdf", loadings_plot, device="pdf", width=8, height=4.8, units="in")
# Plot the contribution of the variables to a given PC: PC2 here.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC2",
positive.color="green2", negative.color="grey70", sort.variables = T)
loadings_plot
ggsave("results/PCA_results/NHANES1516_totalsbyhand_FC_n120/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet_loadings_PC2.pdf", loadings_plot, device="pdf", width=8, height=4.8, units="in")
# ---------------------------------------------------------------------------------------------------------------
# Save the variance explained by each PC as a .txt file.
# Change the file name as necessary.
SaveVarExplained(pca.data = pca_input, pca.result = scaled_pca,
out.fn = "results/PCA_results/NHANES1516_totalsbyhand_FC_n120/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet_PC_var_explained.txt")
# ---------------------------------------------------------------------------------------------------------------
# Calculate loadings of each PC to the variables and
# save it as a txt file in the results folder.
# Change the file name as necessary.
SaveLoadings(pca.result=scaled_pca,
out.fn="results/PCA_results/NHANES1516_totalsbyhand_FC_n120/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet_PC_loadings.txt")
# ---------------------------------------------------------------------------------------------------------------
# Save the PC values with the input which has the metadata and food codes, food names.
# Input is your food input file before any prep for clustering, from which you derived the input for the PCA.
SaveInputAndPCs(input = "eg_data/NHANES/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet.txt",
pca.results = scaled_pca,
out.fn = "results/PCA_results/NHANES1516_totalsbyhand_FC_n120/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet_input_PCs.txt")
# Plot PC1 and PC2 and color-code individuals by their diet.
# Load the results
PCA_FC <- read.table("results/PCA_results/NHANES1516_totalsbyhand_FC_n120/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet_input_PCs.txt",
sep="\t", header=T)
head(PCA_FC)
ggplot(data=PCA_FC, aes(x=PC1, y=PC2, color=Diet, fill=Diet) ) +
geom_point()
fillcolor = c("darkred", "orange", "darkgreen", "darkblue", "darkviolet")
colcolor = c("darkred", "orange", "darkgreen", "darkblue", "darkviolet")
fillcolor = c("darkred", "orange", "darkgreen", "darkblue", "darkviolet")
colcolor = c("darkred", "orange", "darkgreen", "darkblue", "darkviolet")
ggplot(data=PCA_FC, aes(x=PC1, y=PC2, fill=Diet, color=Diet))+
geom_point() +
# geom_text(vjust= -0.5) +
scale_fill_manual(values=fillcolor) +
scale_color_manual(values=colcolor) +
theme(legend.position = "bottom")
fillcolor = c("darkred", "orange", "darkgreen", "darkblue", "darkviolet", "grey45")
colcolor = c("darkred", "orange", "darkgreen", "darkblue", "darkviolet", "grey45")
ggplot(data=PCA_FC, aes(x=PC1, y=PC2, fill=Diet, color=Diet))+
geom_point() +
# geom_text(vjust= -0.5) +
scale_fill_manual(values=fillcolor) +
scale_color_manual(values=colcolor) +
theme(legend.position = "bottom")
ggplot(data=PCA_FC, aes(x=PC1, y=PC2, fill=Diet, color=Diet))+
geom_point(size=3) +
# geom_text(vjust= -0.5) +
scale_fill_manual(values=fillcolor) +
scale_color_manual(values=colcolor) +
theme(legend.position = "bottom")
fillcolor = c("darkred", "orange", "darkgreen", "darkblue", "violet", "grey45")
colcolor = c("darkred", "orange", "darkgreen", "darkblue", "violet", "grey45")
ggplot(data=PCA_FC, aes(x=PC1, y=PC2, fill=Diet, color=Diet))+
geom_point(size=3) +
# geom_text(vjust= -0.5) +
scale_fill_manual(values=fillcolor) +
scale_color_manual(values=colcolor) +
theme(legend.position = "bottom")
ggplot(data=PCA_FC, aes(x=PC1, y=PC2, fill=Diet, color=Diet, shape=Diet))+
geom_point(size=3) +
# geom_text(vjust= -0.5) +
scale_fill_manual(values=fillcolor) +
scale_color_manual(values=colcolor) +
theme(legend.position = "bottom")
# Load the nutrient results
PCA_nut <- read.table("results/PCA_results/NHANES1516_totalsbyhand_nut_n120/NHANES1516_total_d12_nut_mean_QC_2_120diffdiet_input_PCs.txt",
sep="\t", header=T)
head(PCA_nut)
# Plot PC1 and PC2 of the PCA results of Foof Categories.
fillcolor = c("darkred", "orange", "darkgreen", "darkblue", "violet", "grey45")
colcolor = c("darkred", "orange", "darkgreen", "darkblue", "violet", "grey45")
ggplot(data=PCA_nut, aes(x=PC1, y=PC2, fill=Diet, color=Diet, shape=Diet))+
geom_point(size=3) +
scale_fill_manual(values=fillcolor) +
scale_color_manual(values=colcolor) +
theme(legend.position = "bottom")
bbb = read.table("eg_data/NHANES/NHANES1516_total_d12_FC_mean_QC_2_120diffdiet.txt", sep="\t", header=T)
head(bbb$SEQN)
head(bbb$SEQN, 10)
pca.results[["x"]]
scaled_pca[["x"]]
head(scaled_pca[["x"]])
colnames(QCtotal_1diet)
ggplot(QCtotal_1diet, aes(x=Diet, y=TFAT)+
ggplot(QCtotal_1diet, aes(x=Diet, y=TFAT))+
geom_bar()
ggplot(QCtotal_1diet, aes(x=Diet, y=TFAT)) +
geom_boxplot()
ggplot(QCtotal_1diet, aes(x=factor(Diet), y=TFAT)) +
geom_boxplot()
ggplot(QCtotal_1diet, aes(x=factor(Diet), y=KCAL)) + geom_boxplot()
ggplot(QCtotal_1diet, aes(x=factor(Diet), y=PROT)) + geom_boxplot()
ggplot(QCtotal_1diet, aes(x=factor(Diet), y=TFAT)) + geom_boxplot()
ggplot(QCtotal_1diet, aes(x=factor(Diet), y=PROT)) + geom_boxplot()
ggplot(QCtotal_1diet, aes(x=factor(Diet), y=CARB)) + geom_boxplot()
ggplot(QCtotal_1diet, aes(x=factor(Diet), y=FF)) + geom_boxplot()
ggplot(QCtotal_1diet, aes(x=factor(Diet), y=FIBR)) + geom_boxplot()
ggplot(QCtotal_1diet, aes(x=factor(Diet), y=FIBE)) + geom_boxplot()
ggplot(QCtotal_1diet, aes(x=as.factor(Diet), y=FIBE)) + geom_boxplot()
ggplot(QCtotal_1diet, aes(x=factor(Diet), y=PF_TOTAL)) + geom_boxplot()
ggplot(QCtotal_1diet, aes(x=factor(Diet), y=V_TOTAL)) + geom_boxplot()
ggplot(QCtotal_1diet, aes(x=factor(Diet), y=V_STARCHY_OTHER)) + geom_boxplot()
colnames(QCtotal_1diet)
ggplot(QCtotal_1diet, aes(x=factor(Diet), y=V_LEGUMES)) + geom_boxplot()
ggplot(QCtotal_1diet, aes(x=factor(Diet), y=D_TOTAL)) + geom_boxplot()
ggplot(QCtotal_1diet, aes(x=factor(Diet), y=KCAL)) + geom_boxplot()
