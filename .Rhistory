head(totals,1)
CalcKcal <- function(){
# Calculate percentage of calories from macronutrients per total calorie intake.
totals$PROT_pk <- totals$PROT * 4 / totals$KCAL * 100
totals$TFAT_pk <- totals$TFAT * 9 / totals$KCAL * 100
totals$CARB_pk <- totals$CARB * 4 / totals$KCAL * 100
}
# Load example totals data ===============================================================
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
# Load the totals.csv
totals <- read.table("Totals_to_use.txt",  sep = "\t", header = T)
# Come back to the main directory
setwd(main.wd)
# Calculate the mean kcal from carb/protein/fat per participant
CalcKcal()
head(totals,1)
CalcKcal <- function(){
# Calculate percentage of calories from macronutrients per total calorie intake.
totals$PROT_pk <<- totals$PROT * 4 / totals$KCAL * 100
totals$TFAT_pk <<- totals$TFAT * 9 / totals$KCAL * 100
totals$CARB_pk <- totals$CARB * 4 / totals$KCAL * 100
}
# Calculate the mean kcal from carb/protein/fat per participant
CalcKcal()
head(totals,1)
# Calculate the mean kcal from carb/protein/fat per participant
CalcKcal <- function(){
# Calculate percentage of calories from macronutrients per total calorie intake.
totals$PROT_pk <<- totals$PROT * 4 / totals$KCAL * 100
totals$TFAT_pk <<- totals$TFAT * 9 / totals$KCAL * 100
totals$CARB_pk <<- totals$CARB * 4 / totals$KCAL * 100
# Add a column of total calories. Should be close to 100.
totals$pktotal <<- totals$PROT_pk + totals$TFAT_pk + totals$CARB_pk
# Get means for each user ----------------------------------------------------------------
PROTmeans <<- aggregate(totals$PROT_pk, by = list(totals$UserName), FUN = mean)
TFATmeans <<- aggregate(totals$TFAT_pk, by = list(totals$UserName), FUN = mean)
CARBmeans <<- aggregate(totals$CARB_pk, by = list(totals$UserName), FUN = mean)
colnames(PROTmeans) <<- c("UserName", "PROT_mean")
colnames(TFATmeans) <<- c("UserName", "TFAT_mean")
colnames(CARBmeans) <<- c("UserName", "CARB_mean")
# Combine the three tables
temp1 <<- merge(PROTmeans, TFATmeans, all = T)
macronutr.mean <<- merge(temp1, CARBmeans, all = T)
# Modify the dataframe structure for plotting.
mean.p <<- macronutr.mean[, c("UserName",  "PROT_mean")]
mean.t <<- macronutr.mean[, c("UserName",  "TFAT_mean")]
mean.c <<- macronutr.mean[, c("UserName",  "CARB_mean")]
# Add a column of macronutrients
mean.p$macronutrient <<- colnames(mean.p)[2]
mean.t$macronutrient <<- colnames(mean.t)[2]
mean.c$macronutrient <<- colnames(mean.c)[2]
# Change XXXX_pk to "value"
colnames(mean.p)[2] <<- colnames(mean.t)[2] <<- colnames(mean.c)[2] <<- "value"
# Bind the 3 datasets
bound <<- rbind(mean.p, mean.t, mean.c)
macronutr.mean.l <<- bound[, c(1,3,2)] # sort columns
# Check the dimention of the macronutr.mean.l (for programmers)
# dim(macronutr.mean.l)  # l means a long table.
# Same for SD ---------------------------------------------------------------------
PROTsd <<- aggregate(totals$PROT_pk, by = list(totals$UserName), FUN = sd)
TFATsd <<- aggregate(totals$TFAT_pk, by = list(totals$UserName), FUN = sd)
CARBsd <<- aggregate(totals$CARB_pk, by = list(totals$UserName), FUN = sd)
colnames(PROTsd) <<- c("UserName", "PROT_sd")
colnames(TFATsd) <<- c("UserName", "TFAT_sd")
colnames(CARBsd) <<- c("UserName", "CARB_sd")
# Combine the three tables
temp2 <<- merge(PROTsd, TFATsd, all = T)
macronutr.sd <<- merge(temp2, CARBsd, all = T)
head(macronutr.sd)
# Modify the dataframe structure for plotting.
sd.p <<- macronutr.sd[, c("UserName",  "PROT_sd")]
sd.t <<- macronutr.sd[, c("UserName",  "TFAT_sd")]
sd.c <<- macronutr.sd[, c("UserName",  "CARB_sd")]
head(sd.t,3)
# Add a column of macronutrients
sd.p$macronutrient <<- colnames(sd.p)[2]
sd.t$macronutrient <<- colnames(sd.t)[2]
sd.c$macronutrient <<- colnames(sd.c)[2]
# Change sd_xx to "value"
colnames(sd.p)[2] <<- colnames(sd.t)[2] <<- colnames(sd.c)[2] <<- "value"
# Bind the 3 datasets
bound <<- rbind(sd.p, sd.t, sd.c)
macronutr.sd.l <<- bound[, c(1,3,2)] # sort columns
dim(macronutr.sd.l)
head(macronutr.mean.l) # l means a long table.
# Make macronutrient a factor for plotting.
macronutr.mean.l$macronutrient <<- factor(macronutr.mean.l$macronutrient)
# Confirm that 'macronutrient' is a factor now. (for programmers)
# str(macronutr.mean.l$macronutrient)
}
# Load example totals data ===============================================================
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
# Load the totals.csv
totals <- read.table("Totals_to_use.txt",  sep = "\t", header = T)
# Come back to the main directory
setwd(main.wd)
# Calculate the mean kcal from carb/protein/fat per participant
CalcKcal()
# Calculate the mean kcal from carb/protein/fat per participant
CalcKcal <- function(){
# Calculate percentage of calories from macronutrients per total calorie intake.
totals$PROT_pk <<- totals$PROT * 4 / totals$KCAL * 100
totals$TFAT_pk <<- totals$TFAT * 9 / totals$KCAL * 100
totals$CARB_pk <<- totals$CARB * 4 / totals$KCAL * 100
# Add a column of total calories. Should be close to 100.
totals$pktotal <<- totals$PROT_pk + totals$TFAT_pk + totals$CARB_pk
# Get means for each user ----------------------------------------------------------------
PROTmeans <<- aggregate(totals$PROT_pk, by = list(totals$UserName), FUN = mean)
TFATmeans <<- aggregate(totals$TFAT_pk, by = list(totals$UserName), FUN = mean)
CARBmeans <<- aggregate(totals$CARB_pk, by = list(totals$UserName), FUN = mean)
colnames(PROTmeans) <<- c("UserName", "PROT_mean")
colnames(TFATmeans) <<- c("UserName", "TFAT_mean")
colnames(CARBmeans) <<- c("UserName", "CARB_mean")
# Combine the three tables
temp1 <<- merge(PROTmeans, TFATmeans, all = T)
macronutr.mean <<- merge(temp1, CARBmeans, all = T)
# Modify the dataframe structure for plotting.
mean.p <<- macronutr.mean[, c("UserName",  "PROT_mean")]
mean.t <<- macronutr.mean[, c("UserName",  "TFAT_mean")]
mean.c <<- macronutr.mean[, c("UserName",  "CARB_mean")]
# Add a column of macronutrients
mean.p$macronutrient <<- colnames(mean.p)[2]
mean.t$macronutrient <<- colnames(mean.t)[2]
mean.c$macronutrient <<- colnames(mean.c)[2]
# Change XXXX_pk to "value"
colnames(mean.p)[2] <<- colnames(mean.t)[2] <<- colnames(mean.c)[2] <<- "value"
# Bind the 3 datasets
bound <<- rbind(mean.p, mean.t, mean.c)
macronutr.mean.l <<- bound[, c(1,3,2)] # sort columns
# Check the dimention of the macronutr.mean.l (for programmers)
# dim(macronutr.mean.l)  # l means a long table.
# Same for SD ---------------------------------------------------------------------
PROTsd <<- aggregate(totals$PROT_pk, by = list(totals$UserName), FUN = sd)
TFATsd <<- aggregate(totals$TFAT_pk, by = list(totals$UserName), FUN = sd)
CARBsd <<- aggregate(totals$CARB_pk, by = list(totals$UserName), FUN = sd)
colnames(PROTsd) <<- c("UserName", "PROT_sd")
colnames(TFATsd) <<- c("UserName", "TFAT_sd")
colnames(CARBsd) <<- c("UserName", "CARB_sd")
# Combine the three tables
temp2 <<- merge(PROTsd, TFATsd, all = T)
macronutr.sd <<- merge(temp2, CARBsd, all = T)
head(macronutr.sd)
# Modify the dataframe structure for plotting.
sd.p <<- macronutr.sd[, c("UserName",  "PROT_sd")]
sd.t <<- macronutr.sd[, c("UserName",  "TFAT_sd")]
sd.c <<- macronutr.sd[, c("UserName",  "CARB_sd")]
head(sd.t,3)
# Add a column of macronutrients
sd.p$macronutrient <<- colnames(sd.p)[2]
sd.t$macronutrient <<- colnames(sd.t)[2]
sd.c$macronutrient <<- colnames(sd.c)[2]
# Change sd_xx to "value"
colnames(sd.p)[2] <<- colnames(sd.t)[2] <<- colnames(sd.c)[2] <<- "value"
# Bind the 3 datasets
bound <<- rbind(sd.p, sd.t, sd.c)
macronutr.sd.l <<- bound[, c(1,3,2)] # sort columns
dim(macronutr.sd.l)
head(macronutr.mean.l) # l means a long table.
# Make macronutrient a factor for plotting.
macronutr.mean.l$macronutrient <<- factor(macronutr.mean.l$macronutrient)
# Confirm that 'macronutrient' is a factor now. (for programmers)
# str(macronutr.mean.l$macronutrient)
}
# Plot the mean kcal from carbs, protein, and fat by participant (normalized)-------------
NormalizedPercentKcal <- function(){
cat("Showing a normalized stacked barchart.", "\n")
library(ggplot2)
ggplot(macronutr.mean.l,
aes(x = UserName, y = value, fill = macronutrient)) +
geom_bar(position = "fill", stat = "identity", colour = "black", width = 0.7) +
theme_bw(base_size = 10) +
# scale_fill_manual(values = my15colors ) +
# labels=c("Protein", "Fat", "Carbohydrates")) +
labs(x = element_blank(), y = "Percentages of total kcal intake", fill = "Macronutrients") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 5, r = 0, b = 0, l = 0))) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 5, b = 0, l = 0))) +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1)) +
theme(aspect.ratio = 0.4)
}
# Plot the mean kcal from carbs, protein, and fat by participant (non-normalized)-------------
NonNormalizedPercentKcal <- function(show.sd = TRUE){
if(show.sd == TRUE){ # default
cat("Showing a non-normalized stacked barchart with SD as error bars.", "\n")
# Rearrange the macronutr.mean table
# Merge mean and SD for PROT
temp3 <<- merge(PROTmeans, PROTsd, all = T)
colnames(temp3) <<- c("UserName", "Means", "SD")
temp3$Macronutrient <<- "PROT"
dim(temp3)
# Merge mean and SD for CARB
temp4 <<- merge(CARBmeans, CARBsd, all = T)
colnames(temp4) <<- c("UserName", "Means", "SD")
temp4$Macronutrient <<- "CARB"
head(temp4)
# Merge mean and SD for TFAT
temp5 <<- merge(TFATmeans, TFATsd, all = T)
colnames(temp5) <<- c("UserName", "Means", "SD")
temp5$Macronutrient <<- "TFAT"
head(temp5)
# Bind temp3-5
pfc.mean.sd <<- rbind(temp3, temp4, temp5)
pfc.mean.sd <<- pfc.mean.sd[, c(1,4,2,3)] # Sort columns
head(pfc.mean.sd)
# Calculate the cumulative value for creating a stacked chart with error bars.
library(dplyr)
pfc.mean.sd2 <<- pfc.mean.sd %>%
arrange(desc(Macronutrient)) %>% group_by(UserName) %>% mutate(cumsum_Means=cumsum(Means))
# Stacked barchart with SD error bars.
library(ggplot2)
ggplot(pfc.mean.sd2, aes(x = UserName, y = Means, fill = Macronutrient)) +
geom_col(color = "black", width = 0.6, position = position_stack(vjust=1)) +
geom_errorbar(inherit.aes = FALSE,
aes(x = UserName, ymin = cumsum_Means, ymax = cumsum_Means + SD),
width = 0.2) +
theme_bw(base_size = 10) +
# scale_fill_manual(values = my15colors ) +
# scale_fill_manual(values=c("lightgoldenrod2", "steelblue", "palevioletred2"))+
#labels=c("Carbohydrates", "Protein", "Fat")) +
labs(x = element_blank(), y = "Percentages of total kcal intake", fill = "variable") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 5, r = 0, b = 0, l = 0))) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 5, b = 0, l = 0))) +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1)) +
theme(aspect.ratio = 0.4)
}
if(show.sd == FALSE){
cat("Showing a non-normalized stacked barchart without error bars.", "\n")
# Not normalized
ggplot(macronutr.mean.l,
aes(x = UserName, y = value, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
theme_bw(base_size = 10) +
# scale_fill_manual(values = my15colors, # ) +
# labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x = element_blank(), y = "Percentages of total kcal intake", fill = "Macronutrients") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 5, r = 0, b = 0, l = 0))) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 5, b = 0, l = 0))) +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1)) +
theme(aspect.ratio = 0.4)
}
}
# Calculate the mean kcal from carb/protein/fat per participant
CalcKcal()
# Show normalized stacked barchart per participant
NormalizedPercentKcal()
NonNormalizedPercentKcal(show.sd = TRUE)
NonNormalizedPercentKcal(show.sd = FALSE)
NonNormalizedPercentKcal(show.sd = TRUE)
ggplot(pfc.mean.sd2, aes(x = UserName, y = Means, fill = Macronutrient)) +
geom_col(color = "black", width = 0.6, position = position_stack(vjust=1)) +
geom_errorbar(inherit.aes = FALSE,
aes(x = UserName, ymin = cumsum_Means, ymax = cumsum_Means + SD),
width = 0.2) +
theme_bw(base_size = 10) +
# scale_fill_manual(values = my15colors ) +
# scale_fill_manual(values=c("lightgoldenrod2", "steelblue", "palevioletred2"))+
#labels=c("Carbohydrates", "Protein", "Fat")) +
labs(x = element_blank(), y = "Percentages of total kcal intake", fill = "variable") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 5, r = 0, b = 0, l = 0))) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 5, b = 0, l = 0))) +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1)) +
theme(aspect.ratio = 0.4)
# Name your main directory for future use.
main.wd <- file.path(getwd())
# Import source code to run the analyses to follow.
source("lib/load_and_check.R")
source("lib/percent_kcal.R")
# Load example totals data ===============================================================
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
# Load the totals.csv
totals <- read.table("Totals_to_use.txt",  sep = "\t", header = T)
# Come back to the main directory
setwd(main.wd)
# Load the totals.csv
totals <- read.table("Totals_to_use.txt",  sep = "\t", header = T)
# Come back to the main directory
setwd(main.wd)
# Calculate the mean kcal from carb/protein/fat per participant
CalcKcal()
# Import source code to run the analyses to follow.
source("lib/load_and_check.R")
source("lib/percent_kcal.R")
# Calculate the mean kcal from carb/protein/fat per participant
CalcKcal()
# Load example totals data ===============================================================
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
# Name your main directory for future use.
main.wd <- file.path(getwd())
# Load example totals data ===============================================================
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
# Load the totals.csv
totals <- read.table("Totals_to_use.txt",  sep = "\t", header = T)
# Come back to the main directory
setwd(main.wd)
# Calculate the mean kcal from carb/protein/fat per participant
CalcKcal()
NonNormalizedPercentKcal(show.sd = TRUE)
NonNormalizedPercentKcal(show.sd = FALSE)
NonNormalizedPercentKcal(show.sd = TRUE)
NonNormalizedPercentKcal(show.sd = TRUE)
# Plot the mean kcal from carbs, protein, and fat by participant (normalized)-------------
NormalizedPercentKcal <- function(){
cat("Showing a normalized stacked barchart.", "\n")
library(ggplot2)
bwoe <<- ggplot(macronutr.mean.l,
aes(x = UserName, y = value, fill = macronutrient)) +
geom_bar(position = "fill", stat = "identity", colour = "black", width = 0.7) +
theme_bw(base_size = 10) +
# scale_fill_manual(values = my15colors ) +
# labels=c("Protein", "Fat", "Carbohydrates")) +
labs(x = element_blank(), y = "Percentages of total kcal intake", fill = "Macronutrients") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 5, r = 0, b = 0, l = 0))) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 5, b = 0, l = 0))) +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1)) +
theme(aspect.ratio = 0.4)
bwoe
}
# Plot the mean kcal from carbs, protein, and fat by participant (normalized)-------------
NormalizedPercentKcal <- function(){
cat("Showing a normalized stacked barchart.", "\n")
library(ggplot2)
bwoe <<- ggplot(macronutr.mean.l,
aes(x = UserName, y = value, fill = macronutrient)) +
geom_bar(position = "fill", stat = "identity", colour = "black", width = 0.7) +
theme_bw(base_size = 10) +
# scale_fill_manual(values = my15colors ) +
# labels=c("Protein", "Fat", "Carbohydrates")) +
labs(x = element_blank(), y = "Percentages of total kcal intake", fill = "Macronutrients") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 5, r = 0, b = 0, l = 0))) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 5, b = 0, l = 0))) +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1)) +
theme(aspect.ratio = 0.4)
bwoe
}
# Plot the mean kcal from carbs, protein, and fat by participant (non-normalized)-------------
NonNormalizedPercentKcal <- function(show.sd = TRUE){
if(show.sd == TRUE){ # default
cat("Showing a non-normalized stacked barchart with SD as error bars.", "\n")
# Rearrange the macronutr.mean table
# Merge mean and SD for PROT
temp3 <<- merge(PROTmeans, PROTsd, all = T)
colnames(temp3) <<- c("UserName", "Means", "SD")
temp3$Macronutrient <<- "PROT"
# Merge mean and SD for CARB
temp4 <<- merge(CARBmeans, CARBsd, all = T)
colnames(temp4) <<- c("UserName", "Means", "SD")
temp4$Macronutrient <<- "CARB"
# Merge mean and SD for TFAT
temp5 <<- merge(TFATmeans, TFATsd, all = T)
colnames(temp5) <<- c("UserName", "Means", "SD")
temp5$Macronutrient <<- "TFAT"
# Bind temp3-5
pfc.mean.sd <<- rbind(temp3, temp4, temp5)
pfc.mean.sd <<- pfc.mean.sd[, c(1,4,2,3)] # Sort columns
# Calculate the cumulative value for creating a stacked chart with error bars.
library(dplyr)
pfc.mean.sd2 <<- pfc.mean.sd %>%
arrange(desc(Macronutrient)) %>% group_by(UserName) %>% mutate(cumsum_Means=cumsum(Means))
# Stacked barchart with SD error bars.
library(ggplot2)
bwe <<- ggplot(pfc.mean.sd2, aes(x = UserName, y = Means, fill = Macronutrient)) +
geom_col(color = "black", width = 0.6, position = position_stack(vjust=1)) +
geom_errorbar(inherit.aes = FALSE,
aes(x = UserName, ymin = cumsum_Means, ymax = cumsum_Means + SD),
width = 0.2) +
theme_bw(base_size = 10) +
# scale_fill_manual(values = my15colors ) +
# scale_fill_manual(values=c("lightgoldenrod2", "steelblue", "palevioletred2"))+
#labels=c("Carbohydrates", "Protein", "Fat")) +
labs(x = element_blank(), y = "Percentages of total kcal intake", fill = "variable") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 5, r = 0, b = 0, l = 0))) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 5, b = 0, l = 0))) +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1)) +
theme(aspect.ratio = 0.4)
bwe
}
if(show.sd == FALSE){
cat("Showing a non-normalized stacked barchart without error bars.", "\n")
# Not normalized
library(ggplot2)
nonnormal <<- ggplot(macronutr.mean.l,
aes(x = UserName, y = value, fill = macronutrient)) +
geom_bar(position = "stack", stat = "identity", colour = "black", width = 0.7) +
theme_bw(base_size = 10) +
# scale_fill_manual(values = my15colors, # ) +
# labels=c( "Carbohydrates", "Protein", "Total fat")) +
labs(x = element_blank(), y = "Percentages of total kcal intake", fill = "Macronutrients") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 5, r = 0, b = 0, l = 0))) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 5, b = 0, l = 0))) +
theme(axis.text.x = element_text(size=12, angle = 45, hjust = 1)) +
theme(aspect.ratio = 0.4)
nonnormal
}
}
# Calculate the mean kcal from carb/protein/fat per participant
CalcKcal <- function(){
# Calculate percentage of calories from macronutrients per total calorie intake.
totals$PROT_pk <<- totals$PROT * 4 / totals$KCAL * 100
totals$TFAT_pk <<- totals$TFAT * 9 / totals$KCAL * 100
totals$CARB_pk <<- totals$CARB * 4 / totals$KCAL * 100
# Add a column of total calories. Should be close to 100.
totals$pktotal <<- totals$PROT_pk + totals$TFAT_pk + totals$CARB_pk
# Get means for each user ----------------------------------------------------------------
PROTmeans <<- aggregate(totals$PROT_pk, by = list(totals$UserName), FUN = mean)
TFATmeans <<- aggregate(totals$TFAT_pk, by = list(totals$UserName), FUN = mean)
CARBmeans <<- aggregate(totals$CARB_pk, by = list(totals$UserName), FUN = mean)
colnames(PROTmeans) <<- c("UserName", "PROT_mean")
colnames(TFATmeans) <<- c("UserName", "TFAT_mean")
colnames(CARBmeans) <<- c("UserName", "CARB_mean")
# Combine the three tables
temp1 <<- merge(PROTmeans, TFATmeans, all = T)
macronutr.mean <<- merge(temp1, CARBmeans, all = T)
# Modify the dataframe structure for plotting.
mean.p <<- macronutr.mean[, c("UserName",  "PROT_mean")]
mean.t <<- macronutr.mean[, c("UserName",  "TFAT_mean")]
mean.c <<- macronutr.mean[, c("UserName",  "CARB_mean")]
# Add a column of macronutrients
mean.p$macronutrient <<- colnames(mean.p)[2]
mean.t$macronutrient <<- colnames(mean.t)[2]
mean.c$macronutrient <<- colnames(mean.c)[2]
# Change XXXX_pk to "value"
colnames(mean.p)[2] <<- colnames(mean.t)[2] <<- colnames(mean.c)[2] <<- "value"
# Bind the 3 datasets
bound <<- rbind(mean.p, mean.t, mean.c)
macronutr.mean.l <<- bound[, c(1,3,2)] # sort columns
# Check the dimention of the macronutr.mean.l (for programmers)
# dim(macronutr.mean.l)  # l means a long table.
# Same for SD ---------------------------------------------------------------------
PROTsd <<- aggregate(totals$PROT_pk, by = list(totals$UserName), FUN = sd)
TFATsd <<- aggregate(totals$TFAT_pk, by = list(totals$UserName), FUN = sd)
CARBsd <<- aggregate(totals$CARB_pk, by = list(totals$UserName), FUN = sd)
colnames(PROTsd) <<- c("UserName", "PROT_sd")
colnames(TFATsd) <<- c("UserName", "TFAT_sd")
colnames(CARBsd) <<- c("UserName", "CARB_sd")
# Combine the three tables
temp2 <<- merge(PROTsd, TFATsd, all = T)
macronutr.sd <<- merge(temp2, CARBsd, all = T)
head(macronutr.sd)
# Modify the dataframe structure for plotting.
sd.p <<- macronutr.sd[, c("UserName",  "PROT_sd")]
sd.t <<- macronutr.sd[, c("UserName",  "TFAT_sd")]
sd.c <<- macronutr.sd[, c("UserName",  "CARB_sd")]
head(sd.t,3)
# Add a column of macronutrients
sd.p$macronutrient <<- colnames(sd.p)[2]
sd.t$macronutrient <<- colnames(sd.t)[2]
sd.c$macronutrient <<- colnames(sd.c)[2]
# Change sd_xx to "value"
colnames(sd.p)[2] <<- colnames(sd.t)[2] <<- colnames(sd.c)[2] <<- "value"
# Bind the 3 datasets
bound <<- rbind(sd.p, sd.t, sd.c)
macronutr.sd.l <<- bound[, c(1,3,2)] # sort columns
dim(macronutr.sd.l)
head(macronutr.mean.l) # l means a long table.
# Make macronutrient a factor for plotting.
macronutr.mean.l$macronutrient <<- factor(macronutr.mean.l$macronutrient)
# Confirm that 'macronutrient' is a factor now. (for programmers)
# str(macronutr.mean.l$macronutrient)
}
# Name your main directory for future use.
main.wd <- file.path(getwd())
# Import source code to run the analyses to follow.
source("lib/load_and_check.R")
source("lib/percent_kcal.R")
# Load example totals data ===============================================================
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
# Load the totals.csv
totals <- read.table("Totals_to_use.txt",  sep = "\t", header = T)
# Come back to the main directory
setwd(main.wd)
# Calculate the mean kcal from carb/protein/fat per participant
CalcKcal()
# Name your main directory for future use.
main.wd <- file.path(getwd())
# Import source code to run the analyses to follow.
source("lib/load_and_check.R")
source("lib/percent_kcal.R")
# Load example totals data ===============================================================
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
# Load the totals.csv
totals <- read.table("Totals_to_use.txt",  sep = "\t", header = T)
# Come back to the main directory
setwd(main.wd)
# Calculate the mean kcal from carb/protein/fat per participant
CalcKcal()
# Show normalized stacked barchart per participant
NormalizedPercentKcal()
NonNormalizedPercentKcal(show.sd = TRUE)
NonNormalizedPercentKcal(show.sd = FALSE)
NonNormalizedPercentKcal(show.sd = TRUE)
# Show normalized stacked barchart per participant
NormalizedPercentKcal()
NonNormalizedPercentKcal(show.sd = TRUE)
View(nonnormal)
NonNormalizedPercentKcal(show.sd = TRUE)
NonNormalizedPercentKcal(show.sd = FALSE)
View(pfc.mean.sd2)
bwe
