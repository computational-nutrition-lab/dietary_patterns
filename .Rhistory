# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_w <- ordinated_w$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent_w,
output.fn="Food_D12_FC_cc_f_males50s_red_Lv5_ord_WEIGHTED_eigen.txt")
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata_NHANES(ord.object= ordinated_w, number.of.axes= 10, meta.data= demog,
output.fn= "Food_D12_FC_cc_f_males50s_red_Lv5_ord_WEIGHTED_meta_users.txt")
# Read in the metadata and users' Axis values.
meta_usersdf_loaded_w <- read.table("Food_D12_FC_cc_f_males50s_red_Lv5_ord_WEIGHTED_meta_users.txt",
header=T)
# This has users, their metadata, and axis values.
colnames(meta_usersdf_loaded_w)
# Load a dataset that has the "GLU_index" information.
glu <- read.delim( file="../QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
# Take out only SEQN and GLU_index.
SEQN_GLU <- glu[, c("SEQN", "GLU_index")]
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata_NHANES(ord.object= ordinated_w, number.of.axes= 10, meta.data= demog,
output.fn= "Food_D12_FC_cc_f_males50s_red_Lv5_ord_WEIGHTED_meta_users.txt")
# Read in the metadata and users' Axis values.
meta_usersdf_loaded_w <- read.table("Food_D12_FC_cc_f_males50s_red_Lv5_ord_WEIGHTED_meta_users.txt",
header=T)
# This has users, their metadata, and axis values.
colnames(meta_usersdf_loaded_w)
# Load a dataset that has the "GLU_index" information.
glu <- read.delim( file="../QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
# Change to the folder called "Ordination" in your "Ordination" folder.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/Laboratory_data/Ordination/")
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_w <- ordinated_w$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent_w,
output.fn="Food_D12_FC_cc_f_males50s_red_Lv5_ord_WEIGHTED_eigen.txt")
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata_NHANES(ord.object= ordinated_w, number.of.axes= 10, meta.data= demog,
output.fn= "Food_D12_FC_cc_f_males50s_red_Lv5_ord_WEIGHTED_meta_users.txt")
# Read in the metadata and users' Axis values.
meta_usersdf_loaded_w <- read.table("Food_D12_FC_cc_f_males50s_red_Lv5_ord_WEIGHTED_meta_users.txt",
header=T)
# This has users, their metadata, and axis values.
colnames(meta_usersdf_loaded_w)
# Load a dataset that has the "GLU_index" information.
glu <- read.delim( file="../QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
# Take out only SEQN and GLU_index.
SEQN_GLU <- glu[, c("SEQN", "GLU_index")]
# Put 'X' in front of the SEQN and define it as a Row.names.
SEQN_GLU$Row.names <- paste("X", SEQN_GLU$SEQN, sep="")
# Take out one column as a dataframe, not a vector.
SEQN_GLU_2 <- SEQN_GLU[, c("Row.names", "GLU_index")]
head(SEQN_GLU_2)
# Add GLU_index.
meta_usersdf_loaded_glu_w <- merge(x=meta_usersdf_loaded_w, y=SEQN_GLU_2, by="Row.names", all.x=T, sort=F)
# Now, it has GLU_index.
head(meta_usersdf_loaded_glu_w, 2)
# Save the resultant table.
write.table(meta_usersdf_loaded_glu_w,
"Food_D12_FC_cc_f_males50s_red_Lv5_ord_WEIGHTED_meta_users_glu.txt",
sep="\t", row.names=F, quote=F)
# ---------------------------------------------------------------------------------------------------------------
# Load the XXX_meta_users_glu.txt again for plotting.
loaded_glu_w <- read.table("Food_D12_FC_cc_f_males50s_red_Lv5_ord_WEIGHTED_meta_users_glu.txt",
sep="\t", header=T)
# Convert the GLU_index as a factor to plot it in order.
loaded_glu_w$GLU_index <- factor(loaded_glu_w$GLU_index, labels= c("Normal", "Prediabetic", "Diabetic"))
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 1 and Axis 2 to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata.
p1_w <- ggplot(loaded_glu_w, aes(x=Axis.1, y=Axis.2, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("turquoise2", "goldenrod3", "mediumvioletred")) +
xlab( paste("Axis.1 (", paste(round(eigen_percent_w[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent_w[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_w
# Save p1 as a PDF.
ggsave("Food_D12_FC_cc_f_males50s_red_Lv5_ord_WEIGHTED_Axis12_p1_2.png",
p1_w, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_w <- p1_w + stat_ellipse(level=0.95)
ellipses_w
# Save ellipses as a PDF.
ggsave("Food_D12_FC_cc_f_males50s_red_Lv5_ord_WEIGHTED_Axis12_ellipses.png",
ellipses_w, device="png", width=7, height=5.5, unit="in", dpi=300)
# Perform Principal Coordinate Analysis (PCoA) with UNweighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated_u <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=FALSE)
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_u <- ordinated_u$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent_u,
output.fn="Food_D12_FC_cc_f_males50s_red_Lv5_ord_UNweighted_eigen.txt")
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata_NHANES(ord.object= ordinated_u, number.of.axes= 10, meta.data= demog,
output.fn= "Food_D12_FC_cc_f_males50s_red_Lv5_ord_UNweighted_meta_users.txt")
# Read in the metadata and users' Axis values.
meta_usersdf_loaded_u <- read.table("Food_D12_FC_cc_f_males50s_red_Lv5_ord_UNweighted_meta_users.txt",
header=T, sep="\t")
# Load a dataset that has the "GLU_index" information.
glu <- read.delim(file= "../QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
# Take out only SEQN and GLU_index.
SEQN_GLU <- glu[, c("SEQN", "GLU_index")]
# Put 'X' in front of the SEQN and
SEQN_GLU$Row.names <- paste("X", SEQN_GLU$SEQN, sep="")
# Take out one column as a dataframe, not a vector.
SEQN_GLU_2 <- SEQN_GLU[, c("Row.names", "GLU_index")]
# Add GLU_index.
meta_usersdf_loaded_glu_u <- merge(x=meta_usersdf_loaded_u, y=SEQN_GLU_2, by="Row.names", all.x=T, sort=F)
# Save the resultant table.
write.table(meta_usersdf_loaded_glu_u,
"Food_D12_FC_cc_f_males50s_red_Lv5_ord_UNweighted_meta_users_glu.txt",
sep="\t", row.names=F, quote=F)
# ---------------------------------------------------------------------------------------------------------------
# Load the XXX_meta_users_glu.txt again for plotting.
loaded_glu_u <- read.table("Food_D12_FC_cc_f_males50s_red_Lv5_ord_UNweighted_meta_users_glu.txt",
sep="\t", header=T)
# Convert the GLU_index as a factor to plot it in order.
loaded_glu_u$GLU_index <- factor(loaded_glu_u$GLU_index, labels= c("Normal", "Prediabetic", "Diabetic"))
# Take a look at meta_usersdf_loaded.
head(loaded_glu_u, 2)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 1 and Axis 2 to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.1, y=Axis.2, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("turquoise2", "goldenrod3", "mediumvioletred") ) +
xlab( paste("Axis.1 (", paste(round(eigen_percent_u[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent_u[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# Set working dir
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data/")
# Food
# Load food OTU table - this is our food OTU data
food <- read.delim("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv1.dhydrt.otu.txt", row.names=1)
# Format the food file and create a otu_table called OTU.
PrepFood(data=food)
# Take a look at the food file.
# The column name of "food" is SEQN preceded with an 'X'.
food[1:10, 1:10]
# Taxonomy (tax)
# Load taxonomy file generated by the MakeFoodTree function.
tax <- read.delim("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv1.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Sample
# Load the demographics data.
demog <- read.xport("../Raw_data/DEMO_I.XPT")
# demog needs to have "XSEQN" as rownames in order to be used in PrepMeta function.
# Add 'X' at the beginning.
rownames(demog) <- paste("X", demog$SEQN, sep="")
# Now the rownames is "XSEQN".
head(rownames(demog))
# Prep metadata for generating a phyloseq object.
PrepMeta_NHANES(data= demog)
# Food tree
# Load foodtree file generated by the MakeFoodTree function.
foodtree <- read_tree("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv1.nwk")
# Format the food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree by using the phyloseq function.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns (variables) of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s <- tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Change to the folder called "Ordination" in your "Ordination" folder.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/Laboratory_data/Ordination/")
# Perform Principal Coordinate Analysis (PCoA) with WEIGHTED unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated_w <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=TRUE)
View(TREE)
# Set working dir
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data/")
food <- read.delim("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.dhydrt.otu.txt", row.names=1)
# Format the food file and create a otu_table called OTU.
PrepFood(data=food)
# Take a look at the food file.
# The column name of "food" is SEQN preceded with an 'X'.
food[1:10, 1:10]
# Taxonomy (tax)
# Load taxonomy file generated by the MakeFoodTree function.
tax <- read.delim("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Sample
# Load the demographics data.
demog <- read.xport("../Raw_data/DEMO_I.XPT")
# demog needs to have "XSEQN" as rownames in order to be used in PrepMeta function.
# Add 'X' at the beginning.
rownames(demog) <- paste("X", demog$SEQN, sep="")
# Now the rownames is "XSEQN".
head(rownames(demog))
# Prep metadata for generating a phyloseq object.
PrepMeta_NHANES(data= demog)
# Error in `[.data.frame`(data, , "SampleID") : undefined columns selected
# Need to create PrepMeta for NHANES. because the current PrepMeta function uses
# "SampleID", that is the combination of UserName and Day of ASA24, but
# NHANES data do not have such a naming scheme.
# Food tree
# Load foodtree file generated by the MakeFoodTree function.
foodtree <- read_tree("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.nwk")
# It is OK to see a message that says:
# "Found more than one class "phylo" in cache; using the first, from namespace 'phyloseq'
# Also defined by 'tidytree'"
# Format the food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# It is OK to see the same message as the previous line.
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree by using the phyloseq function.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# It is OK to see a message (or multiple of them) saying that
# Found more than one class "phylo" in cache; using the first, from namespace 'phyloseq'
# Also defined by 'tidytree'
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns (variables) of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s <- tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Change to the folder called "Ordination" in your "Ordination" folder.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/Laboratory_data/Ordination/")
# Perform Principal Coordinate Analysis (PCoA) with WEIGHTED unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated_w <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=TRUE)
View(TREE)
# Specify where the data is.
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data")
# Load the males50s people. Note this is a total data (1 row/person).
glu_3_males50s <- read.table("QCtotal_d_glu_body_meta_demo_males50s.txt",
sep="\t", header=T)
# Make the individuals as a vector.
selectedind <- glu_3_males50s$SEQN
# Load the input file (all food record data) to be filtered.
all.food.record <- read.table("../Food_D12_FC_cc_f.txt", sep="\t", header=T)
# Select only the individuals listed in 'selectedind'.
sel.food.record <- all.food.record[all.food.record$SEQN %in% selectedind, ]
# Confirm the two contains the same set of individuals.
identical(unique(sel.food.record$SEQN), selectedind)
# Save. This will be the input in the following procedures.
write.table(sel.food.record, "Food_D12_FC_cc_f_males50s.txt",
sep="\t", row.names=F, quote=F)
# ===============================================================================================================
# Limit to just the foods reported in your study (formatted dietrecords.txt as the input)
# ===============================================================================================================
# Keep only the foods reported in your study. This is already done, but need to run this
# so that the data will be formatted in a compatible way to create food tree.
FilterDbByDietRecords(food_database_fn = "../../NHANES1516/processed/NHANESDatabase.txt",
food_records_fn  = "Food_D12_FC_cc_f_males50s.txt",   # output of FormatFoods.
output_fn =        "Food_D12_FC_cc_f_males50s_red.txt")
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# ---------------------------------------------------------------------------------------------------------------
# Load source scripts
source("lib/specify_data_dir.R")
source("lib/Food_tree_scripts/newick.tree.r")
source("lib/Food_tree_scripts/check.db.r")
source("lib/Food_tree_scripts/format.foods.r")
source("lib/Food_tree_scripts/filter.db.by.diet.records.r")
source("lib/Food_tree_scripts/make.food.tree.r")
source("lib/Food_tree_scripts/make.food.otu.r")
source("lib/Food_tree_scripts/make.fiber.otu.r")
source("lib/Food_tree_scripts/make.dhydrt.otu.r")
# Specify where the data is.
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data")
# ===============================================================================================================
# Limit to just the foods reported in your study (formatted dietrecords.txt as the input)
# ===============================================================================================================
# Keep only the foods reported in your study. This is already done, but need to run this
# so that the data will be formatted in a compatible way to create food tree.
FilterDbByDietRecords(food_database_fn = "../../NHANES1516/processed/NHANESDatabase.txt",
food_records_fn  = "Food_D12_FC_cc_f_males50s.txt",   # output of FormatFoods.
output_fn =        "Food_D12_FC_cc_f_males50s_red.txt")
# Check if there is any food item reported by people but are missing in the database.
check.db(food_database_fn = "../../../lib/NHANESDatabase.txt",
food_records_fn =  "Food_D12_FC_cc_f_males50s_red.txt",
output_fn =        "Food_D12_FC_cc_f_males50s_red_missing.txt")
# Does the output contain anything?
mmm = read.table("Food_D12_FC_cc_f_males50s_red_missing.txt", sep="\t", header=T)
head(mmm)
# Create food tree with the reduced dataset (only reported foods) classified at
# a desired level of classification (Lv. 1-6).
# "NodeLabelsMCT.txt" has a list of food levels and names, which comes with this package.
MakeFoodTree(nodes_fn="../../../lib/NodeLabelsMCT.txt",
addl_foods_fn = NULL,
num.levels = 2,
food_database_fn =   "Food_D12_FC_cc_f_males50s_red.txt",
output_tree_fn =     "Foodtree/Food_D12_FC_cc_f_males50s_red_Lv2.nwk",
output_taxonomy_fn = "Foodtree/Food_D12_FC_cc_f_males50s_red_Lv2.taxonomy.txt"
)
# Make the standard food otu table with data in gram weights of food.
MakeFoodOtu(food_records_fn=  "Food_D12_FC_cc_f_males50s.txt", # need to supply data that have 'FoodAmt' before applying FilterDBByDietRecords.
food_record_id =  "SEQN",                          # The ID of your participants
food_taxonomy_fn= "Foodtree/Food_D12_FC_cc_f_males50s_red_Lv2.taxonomy.txt",  # Your taxonomy file produced by MakeFoodTree.
output_fn =       "Foodtree/Food_D12_FC_cc_f_males50s_red_Lv2.food.otu.txt")  # Output otu file to be saved.
# Make a food otu table with data in grams of fiber per food
MakeFiberOtu(food_records_fn=  "Food_D12_FC_cc_f_males50s.txt",
food_record_id=   "SEQN",
food_taxonomy_fn= "Foodtree/Food_D12_FC_cc_f_males50s_red_Lv2.taxonomy.txt",
output_fn=        "Foodtree/Food_D12_FC_cc_f_males50s_red_Lv2.fiber.otu.txt")
# Make a food otu table as dehydrated grams per kcal
MakeDhydrtOtu(food_records_fn=  "Food_D12_FC_cc_f_males50s.txt",
food_record_id =  "SEQN",
food_taxonomy_fn= "Foodtree/Food_D12_FC_cc_f_males50s_red_Lv2.taxonomy.txt",
output_fn =       "Foodtree/Food_D12_FC_cc_f_males50s_red_Lv2.dhydrt.otu.txt")
# Come back to the main directory
setwd(main_wd)
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# load the necessary packages.
library(phyloseq)
library(ggtree)
library(ggplot2)
library(SASxport)
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("~/GitHub/R_Toolbox/distinct100colors.rda")
# Load the necessary scripts.
source("lib/specify_data_dir.R")
source("lib/unifrac_ordination.R")
source("lib/ggplot2themes.R")
# Set working dir
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data/")
# Food
# Load food OTU table - this is our food OTU data
food <- read.delim("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv2.dhydrt.otu.txt", row.names=1)
# Format the food file and create a otu_table called OTU.
PrepFood(data=food)
# Take a look at the food file.
# The column name of "food" is SEQN preceded with an 'X'.
food[1:10, 1:10]
# Taxonomy (tax)
# Load taxonomy file generated by the MakeFoodTree function.
tax <- read.delim("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv2.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Sample
# Load the demographics data.
demog <- read.xport("../Raw_data/DEMO_I.XPT")
# demog needs to have "XSEQN" as rownames in order to be used in PrepMeta function.
# Add 'X' at the beginning.
rownames(demog) <- paste("X", demog$SEQN, sep="")
# Now the rownames is "XSEQN".
head(rownames(demog))
# Prep metadata for generating a phyloseq object.
PrepMeta_NHANES(data= demog)
# Food tree
# Load foodtree file generated by the MakeFoodTree function.
foodtree <- read_tree("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv2.nwk")
# Format the food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree by using the phyloseq function.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns (variables) of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s <- tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Change to the folder called "Ordination" in your "Ordination" folder.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/Laboratory_data/Ordination/")
# Perform Principal Coordinate Analysis (PCoA) with WEIGHTED unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated_w <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=TRUE)
View(TREE)
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_w <- ordinated_w$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent_w,
output.fn="Food_D12_FC_cc_f_males50s_red_Lv2_ord_WEIGHTED_eigen.txt")
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata_NHANES(ord.object= ordinated_w, number.of.axes= 10, meta.data= demog,
output.fn= "Food_D12_FC_cc_f_males50s_red_Lv2_ord_WEIGHTED_meta_users.txt")
# Read in the metadata and users' Axis values.
meta_usersdf_loaded_w <- read.table("Food_D12_FC_cc_f_males50s_red_Lv2_ord_WEIGHTED_meta_users.txt",
header=T)
# This has users, their metadata, and axis values.
colnames(meta_usersdf_loaded_w)
# Load a dataset that has the "GLU_index" information.
glu <- read.delim( file="../QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
# Take out only SEQN and GLU_index.
SEQN_GLU <- glu[, c("SEQN", "GLU_index")]
# Put 'X' in front of the SEQN and define it as a Row.names.
SEQN_GLU$Row.names <- paste("X", SEQN_GLU$SEQN, sep="")
# Take out one column as a dataframe, not a vector.
SEQN_GLU_2 <- SEQN_GLU[, c("Row.names", "GLU_index")]
head(SEQN_GLU_2)
# Add GLU_index.
meta_usersdf_loaded_glu_w <- merge(x=meta_usersdf_loaded_w, y=SEQN_GLU_2, by="Row.names", all.x=T, sort=F)
# Now, it has GLU_index.
head(meta_usersdf_loaded_glu_w, 2)
# Save the resultant table.
write.table(meta_usersdf_loaded_glu_w,
"Food_D12_FC_cc_f_males50s_red_Lv2_ord_WEIGHTED_meta_users_glu.txt",
sep="\t", row.names=F, quote=F)
# ---------------------------------------------------------------------------------------------------------------
# Load the XXX_meta_users_glu.txt again for plotting.
loaded_glu_w <- read.table("Food_D12_FC_cc_f_males50s_red_Lv2_ord_WEIGHTED_meta_users_glu.txt",
sep="\t", header=T)
# Convert the GLU_index as a factor to plot it in order.
loaded_glu_w$GLU_index <- factor(loaded_glu_w$GLU_index, labels= c("Normal", "Prediabetic", "Diabetic"))
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 1 and Axis 2 to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata.
p1_w <- ggplot(loaded_glu_w, aes(x=Axis.1, y=Axis.2, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("turquoise2", "goldenrod3", "mediumvioletred")) +
xlab( paste("Axis.1 (", paste(round(eigen_percent_w[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent_w[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_w
# Save p1 as a PDF.
ggsave("Food_D12_FC_cc_f_males50s_red_Lv2_ord_WEIGHTED_Axis12_p1.png",
p1_w, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_w <- p1_w + stat_ellipse(level=0.95)
ellipses_w
# Save ellipses as a PDF.
ggsave("Food_D12_FC_cc_f_males50s_red_Lv2_ord_WEIGHTED_Axis12_ellipses.png",
ellipses_w, device="png", width=7, height=5.5, unit="in", dpi=300)
# Perform Principal Coordinate Analysis (PCoA) with UNweighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated_u <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=FALSE)
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_u <- ordinated_u$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent_u,
output.fn="Food_D12_FC_cc_f_males50s_red_Lv2_ord_UNweighted_eigen.txt")
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata_NHANES(ord.object= ordinated_u, number.of.axes= 10, meta.data= demog,
output.fn= "Food_D12_FC_cc_f_males50s_red_Lv2_ord_UNweighted_meta_users.txt")
# Read in the metadata and users' Axis values.
meta_usersdf_loaded_u <- read.table("Food_D12_FC_cc_f_males50s_red_Lv2_ord_UNweighted_meta_users.txt",
header=T, sep="\t")
# Load a dataset that has the "GLU_index" information.
glu <- read.delim(file= "../QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
# Take out only SEQN and GLU_index.
SEQN_GLU <- glu[, c("SEQN", "GLU_index")]
# Put 'X' in front of the SEQN and
SEQN_GLU$Row.names <- paste("X", SEQN_GLU$SEQN, sep="")
# Take out one column as a dataframe, not a vector.
SEQN_GLU_2 <- SEQN_GLU[, c("Row.names", "GLU_index")]
# Add GLU_index.
meta_usersdf_loaded_glu_u <- merge(x=meta_usersdf_loaded_u, y=SEQN_GLU_2, by="Row.names", all.x=T, sort=F)
# Save the resultant table.
write.table(meta_usersdf_loaded_glu_u,
"Food_D12_FC_cc_f_males50s_red_Lv2_ord_UNweighted_meta_users_glu.txt",
sep="\t", row.names=F, quote=F)
# ---------------------------------------------------------------------------------------------------------------
# Load the XXX_meta_users_glu.txt again for plotting.
loaded_glu_u <- read.table("Food_D12_FC_cc_f_males50s_red_Lv2_ord_UNweighted_meta_users_glu.txt",
sep="\t", header=T)
# Convert the GLU_index as a factor to plot it in order.
loaded_glu_u$GLU_index <- factor(loaded_glu_u$GLU_index, labels= c("Normal", "Prediabetic", "Diabetic"))
# Take a look at meta_usersdf_loaded.
head(loaded_glu_u, 2)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 1 and Axis 2 to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.1, y=Axis.2, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("turquoise2", "goldenrod3", "mediumvioletred") ) +
xlab( paste("Axis.1 (", paste(round(eigen_percent_u[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent_u[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# Save p1 as a PDF.
ggsave("Food_D12_FC_cc_f_males50s_red_Lv2_ord_UNweighted_Axis12_p1.png",
p1_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
# Save ellipses as a PDF.
ggsave("Food_D12_FC_cc_f_males50s_red_Lv2_ord_UNweighted_Axis12_ellipses.png",
ellipses_u, device="png", width=7, height=5.5, unit="in", dpi=300)
# Generate and save an WEIGHTED unifrac distance matrix of "Samples".
WeightedUnifracDis(input.phyloseq.obj = phyfoods,
output.fn = "Food_D12_FC_cc_f_males50s_red_Lv2_ord_WEIGHTED_uni_dis.txt")
# ---------------------------------------------------------------------------------------------------------------
# Generate and save an UNweighted unifrac distance matrix of "Samples".
UnweightedUnifracDis(input.phyloseq.obj = phyfoods,
output.fn = "Food_D12_FC_cc_f_males50s_red_Lv2_ord_UNweighted_uni_dis.txt")
# ---------------------------------------------------------------------------------------------------------------
# Come back to the main directory
setwd(main_wd)
