setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Load ggplot formatting themes
source("~/GitHub/dietary_patterns/lib/ggplot2themes.R")
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("~/GitHub/R_Toolbox/distinct100colors.rda")
# Load the necessary scripts.
source("lib/unifrac_ordination.R")
food <- read.delim("eg_data/VVKAJ/Foodtree/VVKAJ_Items_f_s_m_ff_reduced_4Lv.food.otu.txt", row.names = 1)
# Format the food file and create a otu_table called OTU.
PrepFood(data=food)
# Taxonomy (tax)
# tax <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_4Lv.taxonomy.txt")
# tax <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.taxonomy.txt")
tax <- read.delim("eg_data/VVKAJ/Foodtree/VVKAJ_Items_f_s_m_ff_reduced_4Lv.tax.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data= tax)
# Sample
meta <- read.csv( "~/GitHub/dietary_patterns/eg_data/dietstudy/food_map_txt_Metadata_2.csv",
row.names = 1, check.names = F)
head(meta)
# Sample
# meta <- read.csv( "~/GitHub/dietary_patterns/eg_data/dietstudy/food_map_txt_Metadata_2.csv",
#                   row.names = 1, check.names = F)
meta <- read.table( "ind_metadata.txt", sep="\t", header=T)
# Sample
# meta <- read.csv( "~/GitHub/dietary_patterns/eg_data/dietstudy/food_map_txt_Metadata_2.csv",
#                   row.names = 1, check.names = F)
meta <- read.table( "eg_data/VVKAJ/ind_metadata.txt", sep="\t", header=T)
head(meta)
# Format the metafile and save it as 'SAMPLES'.
PrepMeta(data=meta)
# Food tree
# foodtree <- read_tree("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_4Lv.tree.nwk")
# foodtree <- read_tree("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.tree.nwk")
foodtree <- read_tree("eg_data/VVKAJ/Foodtree/VVKAJ_Items_f_s_m_ff_reduced_4Lv.tree.nwk")
# load the necessary packages.
library(phyloseq)
library(ggtree)
library(ggplot2)
# Load ggplot formatting themes
source("~/GitHub/dietary_patterns/lib/ggplot2themes.R")
# Food tree
# foodtree <- read_tree("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_4Lv.tree.nwk")
# foodtree <- read_tree("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.tree.nwk")
foodtree <- read_tree("eg_data/VVKAJ/Foodtree/VVKAJ_Items_f_s_m_ff_reduced_4Lv.tree.nwk")
# It is OK to see a message saying that
# "Found more than one class "phylo" in cache; using the first, from namespace 'phyloseq'
# Also defined by 'tidytree'"
# Format food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
sample_names()
View(no_grid)
View(no_grid)
View(SAMPLES)
View(PrepMeta)
View(PrepMeta)
colnames(food)
meta[colnames(food), ]
head(meta)
head(meta)
head(food)
rownames(meta)
rownames(meta) <- meta[, "UserName"]
meta
PrepMeta <- function(data=meta){
# make UserName as rownames of meta.
rownames(data) <- data[, "UserName"]
#subset metadata to the correct samples
meta2 <<- data[colnames(food), ]
# Transform meta2 to sample_data object.
SAMPLES <<- phyloseq::sample_data(meta2)
}
# Sample
# meta <- read.csv( "~/GitHub/dietary_patterns/eg_data/dietstudy/food_map_txt_Metadata_2.csv",
#                   row.names = 1, check.names = F)
meta <- read.table( "eg_data/VVKAJ/ind_metadata.txt", sep="\t", header=T)
head(meta)
# Format the metafile and save it as 'SAMPLES'.
PrepMeta(data= meta)
SAMPLES
View(meta)
# Food tree
# foodtree <- read_tree("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_4Lv.tree.nwk")
# foodtree <- read_tree("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.tree.nwk")
foodtree <- read_tree("eg_data/VVKAJ/Foodtree/VVKAJ_Items_f_s_m_ff_reduced_4Lv.tree.nwk")
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=15)
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=16)
# Check your metadata
# Show the sample names.
sample_names(phyfoods)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s = tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Perform Principal Coordinate Analysis (PCoA) with weighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=T)
View(ordinated)
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent <- ordinated$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent, output.fn="eg_data/VVKAJ/Unifrac/eigen_percent.txt")
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata(ord.object=ordinated, number.of.axes=10, meta.data= meta,
# output.fn= "results/ordinated_unweighted_meta_users.txt")
output.fn= "eg_data/VVKAJ/Unifrac/ordinated_Weighted_meta_users.txt")
# Plot Axis 1 and Axis 2 to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p1 <- ggplot(meta_usersdf, aes(x=Axis.1, y=Axis.2, color=UserName)) +
geom_point(aes(color=UserName)) +
scale_color_manual(values = distinct100colors) + # OR use viridis theme.
# scale_color_viridis_d() +
xlab( paste("Axis.1 (", paste(round(eigen_percent[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent[2]*100, 1)), "%)", sep="") ) +
theme1
# Plot Axis 1 and Axis 2 to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p1 <- ggplot(meta_usersdf, aes(x=Axis.1, y=Axis.2, color=UserName)) +
geom_point(aes(color=UserName)) +
scale_color_manual(values = distinct100colors) + # OR use viridis theme.
# scale_color_viridis_d() +
xlab( paste("Axis.1 (", paste(round(eigen_percent[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent[2]*100, 1)), "%)", sep="") )
# theme1
p1
eigen_percent
View(ordinated)
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata(ord.object=ordinated, number.of.axes=10, meta.data= meta,
# output.fn= "results/ordinated_unweighted_meta_users.txt")
output.fn= "eg_data/VVKAJ/Unifrac/ordinated_Weighted_meta_users.txt")
View(MergeAxesAndMetadata)
View(MergeAxesAndMetadata)
View(allvectors)
View(vectors)
meta
MergeAxesAndMetadata <- function(ord.object, number.of.axes, meta.data, output.fn){
# extract all the Axis vectors
allvectors <<- as.data.frame(ord.object["vectors"])
# Remove the suffix 'vectors.' in the column names of 'allvectors'
colnames(allvectors) <<- sub(pattern='vectors.', replacement='', x=colnames(allvectors))
# extract Axes 1 through the specified axis
vectors <<- allvectors[, 1:number.of.axes]
# merge by the rownames.
meta_usersdf <<- merge(x=meta.data, y=vectors, all.x=T, by="UserName", sort=FALSE)
# Save as a txt file.
write.table(x = meta_usersdf, file = output.fn, sep="\t", row.names = F)
}
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata(ord.object=ordinated, number.of.axes=10, meta.data= meta,
# output.fn= "results/ordinated_unweighted_meta_users.txt")
output.fn= "eg_data/VVKAJ/Unifrac/ordinated_Weighted_meta_users.txt")
View(vectors)
MergeAxesAndMetadata <- function(ord.object, number.of.axes, meta.data, output.fn){
# extract all the Axis vectors
allvectors <<- as.data.frame(ord.object["vectors"])
# Remove the suffix 'vectors.' in the column names of 'allvectors'
colnames(allvectors) <<- sub(pattern='vectors.', replacement='', x=colnames(allvectors))
# extract Axes 1 through the specified axis
vectors <<- allvectors[, 1:number.of.axes]
# make UserName as rownames of meta. (to use UserName in rownames for merging)
rownames(meta.data) <- meta.data[, "UserName"]
# merge by the rownames.
meta_usersdf <<- merge(x=meta.data, y=vectors, all.x=T, by="row.names", sort=FALSE)
# Save as a txt file.
write.table(x = meta_usersdf, file = output.fn, sep="\t", row.names = F)
}
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata(ord.object=ordinated, number.of.axes=10, meta.data= meta,
# output.fn= "results/ordinated_unweighted_meta_users.txt")
output.fn= "eg_data/VVKAJ/Unifrac/ordinated_Weighted_meta_users.txt")
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata(ord.object=ordinated, number.of.axes=10, meta.data= meta,
# output.fn= "results/ordinated_unweighted_meta_users.txt")
output.fn= "eg_data/VVKAJ/Unifrac/ordinated_Weighted_meta_users.txt")
# Plot Axis 1 and Axis 2 to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p1 <- ggplot(meta_usersdf, aes(x=Axis.1, y=Axis.2, color=UserName)) +
geom_point(aes(color=UserName)) +
scale_color_manual(values = distinct100colors) + # OR use viridis theme.
# scale_color_viridis_d() +
xlab( paste("Axis.1 (", paste(round(eigen_percent[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent[2]*100, 1)), "%)", sep="") )
View(meta_usersdf)
View(meta_usersdf)
# read.table
meta_usersdf_loaded <- read.table("eg_data/VVKAJ/Unifrac/ordinated_Weighted_meta_users.txt", header=T)
# Plot Axis 1 and Axis 2 to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p1 <- ggplot(meta_usersdf_loaded, aes(x=Axis.1, y=Axis.2, color=UserName)) +
geom_point(aes(color=UserName)) +
scale_color_manual(values = distinct100colors) + # OR use viridis theme.
# scale_color_viridis_d() +
xlab( paste("Axis.1 (", paste(round(eigen_percent[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent[2]*100, 1)), "%)", sep="") )
# theme1
p1
# Plot Axis 1 and Axis 2 to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p1 <- ggplot(meta_usersdf, aes(x=Axis.1, y=Axis.2, color=UserName)) +
geom_point(aes(color=UserName)) +
scale_color_manual(values = distinct100colors) + # OR use viridis theme.
# scale_color_viridis_d() +
xlab( paste("Axis.1 (", paste(round(eigen_percent[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent[2]*100, 1)), "%)", sep="") )
# theme1
p1
# Plot Axis 1 and Axis 2 to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p1 <- ggplot(meta_usersdf, aes(x=Axis.1, y=Axis.2, color=UserName)) +
geom_point(aes(color=UserName)) +
scale_color_manual(values = distinct100colors) + # OR use viridis theme.
# scale_color_viridis_d() +
xlab( paste("Axis.1 (", paste(round(eigen_percent[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes
p1
# Plot Axis 1 and Axis 2 to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p1 <- ggplot(meta_usersdf, aes(x=Axis.1, y=Axis.2, color=UserName)) +
geom_point(aes(color=UserName)) +
scale_color_manual(values = distinct100colors) + # OR use viridis theme.
# scale_color_viridis_d() +
xlab( paste("Axis.1 (", paste(round(eigen_percent[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1
# Add ellipses at a desired confidence level.
p1 + stat_ellipse(level=0.95)
# Plot Axis 1 and Axis 2 to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p1 <- ggplot(meta_usersdf, aes(x=Axis.1, y=Axis.2, color=Diet)) +
geom_point(aes(color=Diet)) +
scale_color_manual(values = distinct100colors) + # OR use viridis theme.
# scale_color_viridis_d() +
xlab( paste("Axis.1 (", paste(round(eigen_percent[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1
View(MergeAxesAndMetadata)
MergeAxesAndMetadata <- function(ord.object, number.of.axes, meta.data, output.fn){
# extract all the Axis vectors
allvectors <<- as.data.frame(ord.object["vectors"])
# Remove the suffix 'vectors.' in the column names of 'allvectors'
colnames(allvectors) <<- sub(pattern='vectors.', replacement='', x=colnames(allvectors))
# extract Axes 1 through the specified axis
vectors <<- allvectors[, 1:number.of.axes]
# make UserName as rownames of meta. (to use UserName in rownames for merging)
rownames(meta.data) <- meta.data[, "UserName"]
# merge by the rownames.
meta_usersdf <<- merge(x=meta.data, y=vectors, all.y=T, by="row.names", sort=FALSE)
# Save as a txt file.
write.table(x = meta_usersdf, file = output.fn, sep="\t", row.names = F)
}
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata(ord.object=ordinated, number.of.axes=10, meta.data= meta,
# output.fn= "results/ordinated_unweighted_meta_users.txt")
output.fn= "eg_data/VVKAJ/Unifrac/ordinated_Weighted_meta_users.txt")
# Read in the metadata and users' Axis values.
meta_usersdf_loaded <- read.table("eg_data/VVKAJ/Unifrac/ordinated_Weighted_meta_users.txt", header=T)
# Plot Axis 1 and Axis 2 to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p1 <- ggplot(meta_usersdf, aes(x=Axis.1, y=Axis.2, color=Diet)) +
geom_point(aes(color=Diet)) +
scale_color_manual(values = distinct100colors) + # OR use viridis theme.
# scale_color_viridis_d() +
xlab( paste("Axis.1 (", paste(round(eigen_percent[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Highlight one sample with others being grey.
select_point_1 <- subset(meta_usersdf, UserName=="VVKAJ101")
p1 + geom_point(size=2, color="grey") +
geom_point(data=select_point_1, aes(x=Axis.1, y=Axis.2), color="black", size=2)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Highlight multiple samples with others being grey.
select_points <- subset(meta_usersdf, UserName=="VVKAJ101" | UserName=="VVKAJ106" )
p1 + geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
scale_color_manual(values = c("VVKAJ101"="red", "VVKAJ102"="blue"))
p1 + geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
scale_color_manual(values = c("VVKAJ101"="red", "VVKAJ106"="blue"))
p1 + geom_point(size=2, color="grey") +
geom_point(data=select_point_1, aes(x=Axis.1, y=Axis.2), color="black", size=2)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Highlight multiple samples with others being grey.
select_points <- subset(meta_usersdf, UserName=="VVKAJ101" | UserName=="VVKAJ106" )
p1 + geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
scale_color_manual(values = c("VVKAJ101"="red", "VVKAJ106"="blue"))
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Highlight one sample; other points will retain their original colors.
select_point_1 <- subset(meta_usersdf, UserName=="VVKAJ101")
# Changing the shape sizes might help find the dots. Note that points may be overlapping
p1 + geom_point(data=select_point_1, aes(x=Axis.1, y=Axis.2), color="black", size=4)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Highlight multiple samples; other points will retain their original colors.
select_point_1 <- subset(meta_usersdf, UserName=="VVKAJ101")
select_point_2 <- subset(meta_usersdf, UserName=="VVKAJ106")
p1 + geom_point(data=select_point_1, aes(x=Axis.1, y=Axis.2), color="black", size=4) +
geom_point(data=select_point_2, aes(x=Axis.1, y=Axis.2), color="green", size=4)
# ---------------------------------------------------------------------------------------------------------------
# Generate and save an unweighted unifrac distance matrix for use outside R.  type="samples" only.
UnweightedUnifracDis(input.phyloseq.obj = phyfoods, output.fn = "eg_data/VVKAJ/Unifrac//unweighted_uni_dis.txt")
View(phyfoods)
p1
# Add ellipses at a desired confidence level.
p1 + stat_ellipse(level=0.95)
# Add lines to connect samples in order of the variable on the x axis.
p1 + geom_line(aes(color = UserName))
# Add lines to connect samples in order of the variable on the x axis.
p1 + geom_line(aes(color = Diet))
# Add lines to connect samples in the order in which they appear in the data.
p1 + geom_path(aes(color = UserName))
# load the necessary packages.
library(phyloseq)
library(ggtree)
library(ggplot2)
# Load ggplot formatting themes
source("~/GitHub/dietary_patterns/lib/ggplot2themes.R")
# Load the necessary scripts.
source("lib/unifrac_ordination.R")
# Food
# Load food OTU table - this is our food OTU data
# food <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_4Lv.dhydrt.otu.txt", row.names = 1)
# food <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.dhydrt.otu.txt", row.names = 1)
food <- read.delim("eg_data/VVKAJ/Foodtree/VVKAJ_Items_f_s_m_ff_reduced_4Lv.food.otu.txt", row.names = 1)
# Food
# Load food OTU table - this is our food OTU data
food <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_4Lv.dhydrt.otu.txt", row.names = 1)
# Food
# Load food OTU table - this is our food OTU data
food <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_ASA24/mct.reduced_4Lv.dhydrt.otu.txt", row.names = 1)
head(food)
# Format the food file and create a otu_table called OTU.
PrepFood(data= food)
# Taxonomy (tax)
tax <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_ASA24/mct.reduced_4Lv.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data= tax)
# Sample
meta <- read.csv( "~/GitHub/dietary_patterns/eg_data/dietstudy/food_map_txt_Metadata_2.csv",
row.names = 1, check.names = F)
head(meta)
# Format the metadata file and save it as 'SAMPLES'.
PrepMeta(data= meta)
MergeAxesAndMetadata <- function(ord.object, number.of.axes, meta.data, output.fn){
# extract all the Axis vectors
allvectors <<- as.data.frame(ord.object["vectors"])
# Remove the suffix 'vectors.' in the column names of 'allvectors'
colnames(allvectors) <<- sub(pattern='vectors.', replacement='', x=colnames(allvectors))
# extract Axes 1 through the specified axis
vectors <<- allvectors[, 1:number.of.axes]
# make UserName as rownames of meta. (to use UserName in rownames for merging)
# rownames(meta.data) <- meta.data[, "UserName"]
# merge by the rownames.
meta_usersdf <<- merge(x=meta.data, y=vectors, all.y=T, by="row.names", sort=FALSE)
# Save as a txt file.
write.table(x = meta_usersdf, file= output.fn, sep="\t", row.names= F)
}
# Sample
meta <- read.csv( "~/GitHub/dietary_patterns/eg_data/dietstudy/food_map_txt_Metadata_2.csv",
row.names = 1, check.names = F)
# Format the metadata file and save it as 'SAMPLES'.
PrepMeta(data= meta)
PrepMeta <- function(data=meta){
# make UserName as rownames of meta.
# rownames(data) <- data[, "UserName"]
#subset metadata to the correct samples
meta2 <<- data[colnames(food), ]
# Transform meta2 to sample_data object.
SAMPLES <<- phyloseq::sample_data(meta2)
}
# Format the metadata file and save it as 'SAMPLES'.
PrepMeta(data= meta)
SAMPLES
# Food tree
foodtree <- read_tree("~/GitHub/dietary_patterns/results/Food_tree_ASA24/mct.reduced_4Lv.tree.nwk")
# It is OK to see a message saying that
# "Found more than one class "phylo" in cache; using the first, from namespace 'phyloseq'
# Also defined by 'tidytree'"
# Format food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# Check your metadata
# Show the sample names.
sample_names(phyfoods)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s = tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Perform Principal Coordinate Analysis (PCoA) with weighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=T)
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent <- ordinated$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent, output.fn="results/eigen_percent_mct.txt")
eigen_percent
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata(ord.object=ordinated, number.of.axes=10, meta.data= meta,
output.fn= "results/ordinated_unweighted_meta_users_MCT.txt")
meta_usersdf_loaded <- read.table("results/ordinated_unweighted_meta_users_MCT.txt", header=T)
# Plot Axis 1 and Axis 2 to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p1 <- ggplot(meta_usersdf, aes(x=Axis.1, y=Axis.2, color=UserName)) +
geom_point(aes(color=UserName)) +
scale_color_manual(values = distinct100colors) + # OR use viridis theme.
# scale_color_viridis_d() +
xlab( paste("Axis.1 (", paste(round(eigen_percent[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1
