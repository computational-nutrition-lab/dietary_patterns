cat("The resulting file,", deparse(substitute(totals)), ", has",
nrow(output), "rows and",
ncol(output), "columns.")
}
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output=selectedtotals)
# ---------------------------------------------------------------------------------------------------------------
# Function to QC rows of 'totals' by Metadata
# Show which has "yes" in the "Remove" column, and remove them.
RemoveRows <- function(data=totals, metadata.file=metadata_1, output){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
output <<- subset(merged, Remove!="yes")
# Output results.
cat("The resulting file,", deparse(substitute(output)), ", has",
nrow(output), "rows and",
ncol(output), "columns.")
}
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output=selectedtotals)
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output="selectedtotals")
head(selectedtotals)
# ---------------------------------------------------------------------------------------------------------------
# Function to QC rows of 'totals' by Metadata
# Show which has "yes" in the "Remove" column, and remove them.
RemoveRows <- function(data=totals, metadata.file=metadata_1, output){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
paste0(output) <<- subset(merged, Remove!="yes")
# Output results.
#   cat("The resulting file,", deparse(substitute(output)), ", has",
#       nrow(output), "rows and",
#       ncol(output), "columns.")
}
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output=selectedtotals)
# ---------------------------------------------------------------------------------------------------------------
# Function to QC rows of 'totals' by Metadata
# Show which has "yes" in the "Remove" column, and remove them.
RemoveRows <- function(data=totals, metadata.file=metadata_1, output){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
paste0(output) <<- subset(merged, Remove!="yes")
# Output results.
#   cat("The resulting file,", deparse(substitute(output)), ", has",
#       nrow(output), "rows and",
#       ncol(output), "columns.")
}
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output=selectedtotals)
# ---------------------------------------------------------------------------------------------------------------
# Function to QC rows of 'totals' by Metadata
# Show which has "yes" in the "Remove" column, and remove them.
RemoveRows <- function(data=totals, metadata.file=metadata_1, output){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
paste0(output) <- subset(merged, Remove!="yes")
# Output results.
#   cat("The resulting file,", deparse(substitute(output)), ", has",
#       nrow(output), "rows and",
#       ncol(output), "columns.")
}
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output=selectedtotals)
# ---------------------------------------------------------------------------------------------------------------
# Function to QC rows of 'totals' by Metadata
# Show which has "yes" in the "Remove" column, and remove them.
RemoveRows <- function(data=totals, metadata.file=metadata_1, output.name){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
selected_totals <- subset(merged, Remove!="yes")
write.table(selected_totals, output.name, sep = "\t", quote = F, append=TRUE)
# Output results.
#   cat("The resulting file,", deparse(substitute(output)), ", has",
#       nrow(output), "rows and",
#       ncol(output), "columns.")
}
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output.name=selectedtotals)
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output.name="selectedtotals")
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selectedtotals.txt")
head(merged)
head(toberemoved)
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selectedtotals.txt")
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selectedtotals.txt")
# ---------------------------------------------------------------------------------------------------------------
# Function to QC rows of 'totals' by Metadata
# Show which has "yes" in the "Remove" column, and remove them.
RemoveRows <- function(data=totals, metadata.file=metadata_1, output.name){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
selected_totals <- subset(merged, Remove!="yes")
write.table(selected_totals, output.name, sep = "\t", quote = F, append=TRUE)
# Output results.
cat("The resulting file,", deparse(substitute(output.name)), ", has",
nrow(output), "rows and",
ncol(output), "columns.")
}
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selectedtotals.txt")
# ---------------------------------------------------------------------------------------------------------------
# Function to QC rows of 'totals' by Metadata
# Show which has "yes" in the "Remove" column, and remove them.
RemoveRows <- function(data=totals, metadata.file=metadata_1, output.name){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
selected_totals <- subset(merged, Remove!="yes")
write.table(selected_totals, output.name, sep = "\t", quote = F, append=TRUE)
# Output results.
cat("The resulting file,", deparse(substitute(output.name)), ", has",
nrow(output), "rows and",
ncol(output), "columns.\n")
}
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selectedtotals.txt")
RemoveRows(data=items, metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selecteditems.txt")
# ---------------------------------------------------------------------------------------------------------------
# Function to QC rows of 'totals' by Metadata
# Show which has "yes" in the "Remove" column, and remove them.
RemoveRows <- function(data, metadata.file, output.name){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
selected_totals <- subset(merged, Remove!="yes")
# Save externally.
write.table(selected_totals, output.name, sep = "\t", quote = F, append=TRUE)
# Output results.
cat("The resulting file,", deparse(substitute(output.name)), ", has",
nrow(output), "rows and",
ncol(output), "columns.\n")
}
RemoveRows(data=items, metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selecteditems.txt")
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selectedtotals.txt")
# ---------------------------------------------------------------------------------------------------------------
# Function to QC rows of 'totals' by Metadata
# Show which has "yes" in the "Remove" column, and remove them.
RemoveRows <- function(data, metadata.file, output.name){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
selected_data <- subset(merged, Remove!="yes")
# Save externally.
write.table(selected_data, output.name, sep = "\t", quote = F, append=TRUE)
# Output results.
cat("The resulting file,", deparse(substitute(output.name)), ", has",
nrow(selected_data), "rows and",
ncol(selected_data), "columns.\n")
}
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selectedtotals.txt")
RemoveRows(data=items, metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selecteditems.txt")
# ---------------------------------------------------------------------------------------------------------------
# Function to QC rows of 'totals' by Metadata
# Show which has "yes" in the "Remove" column, and remove them.
RemoveRows <- function(data, metadata.file, output.name){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
selected_data <<- subset(merged, Remove!="yes")
# Save externally.
write.table(selected_data, output.name, sep="\t", quote=F, append=TRUE)
# Output results.
cat("The result file,", deparse(substitute(output.name)), ", has",
nrow(selected_data), "rows and",
ncol(selected_data), "columns.\n")
}
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selectedtotals.txt")
RemoveRows(data=items, metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selecteditems.txt")
nrow(selected_data)
aaa <- read.table("eg_data/VVKAJ101-105/selecteditems.txt", sep = "\n", header=T)
aaa <- read.table("eg_data/VVKAJ101-105/selecteditems.txt", delim = "\t", header=T)
aaa <- read.delim("eg_data/VVKAJ101-105/selecteditems.txt", header=T)
aaa <- read.delim("eg_data/VVKAJ101-105/selecteditems.txt", row.names=1)
aaa <- read.delim("eg_data/VVKAJ101-105/selecteditems.txt")
aaa <- read.delim("eg_data/VVKAJ101-105/selectedtotals.txt")
aaa <- read.delim("eg_data/VVKAJ101-105/selectedtotals.txt", row.names = 1, header=NULL)
aaa <- read.delim("eg_data/VVKAJ101-105/selectedtotals.txt", row.names =NULL)
head(aaa)
selectedtotals <- read.delim("eg_data/VVKAJ101-105/selectedtotals.txt", row.names =NULL)
selecteditems <- read.delim("eg_data/VVKAJ101-105/selecteditems.txt", row.names =NULL)
dim(selecteditems)
dim(selectedtotals)
# ---------------------------------------------------------------------------------------------------------------
# Function to QC rows of 'totals' by Metadata
# Show which has "yes" in the "Remove" column, and remove them.
RemoveRows <- function(data, metadata.file, output.name){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
selected_data <<- subset(merged, Remove!="yes")
# Save externally.
write.table(selected_data, output.name, sep="\t", quote=F, append=TRUE)
# Output results.
cat("The result file,", deparse(substitute(output.name)), ", has",
nrow(selected_data), "rows and",
ncol(selected_data), "columns.\n")
}
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selectedtotals.txt")
selectedtotals <- read.delim("eg_data/VVKAJ101-105/selectedtotals.txt", row.names =NULL)
dim(selectedtotals)
# ---------------------------------------------------------------------------------------------------------------
# Function to QC rows of 'totals' by Metadata
# Show which has "yes" in the "Remove" column, and remove them.
RemoveRows <- function(data, metadata.file, output.name){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "rows below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
selected_data <<- subset(merged, Remove!="yes")
# Save externally.
write.table(selected_data, output.name, sep="\t", quote=F, append=TRUE)
}
# ---------------------------------------------------------------------------------------------------------------
RemoveRows(data=totals, metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selectedtotals.txt")
head(metadata_1)
# ========================================================================================
# Use metadata to filter out users marked as Remove = yes in metadata_1.
# ========================================================================================
# ---------------------------------------------------------------------------------------------------------------
# Load your metadata that has information about which UserName(s) to remove.
metadata_1 <- read.csv("Metadata_1.csv", header=T)
# ========================================================================================
# Use metadata to filter out users marked as Remove = yes in metadata_1.
# ========================================================================================
# ---------------------------------------------------------------------------------------------------------------
# Load your metadata that has information about which UserName(s) to remove.
metadata_1 <- read.csv("eg_data/VVKAJ101-105/Metadata_1.csv", header=T)
# ========================================================================================
# Use metadata to filter out users marked as Remove = yes in metadata_1.
# ========================================================================================
# ---------------------------------------------------------------------------------------------------------------
# Load your metadata that has information about which UserName(s) to remove.
metadata_1 <- read.delim("eg_data/VVKAJ101-105/VVKAJ_metadata_1.txt", row.names=1)
head(metadata_1)
# Use VVKAJ data ---------------------------------------------------------------
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
# Load your Items data.
Items_raw <- read.csv("VVKAJ_2021-11-09_7963_Items_NoCommas.csv", sep = ",", header=T)
# Load your totals data if ready to go.
totals <- read.csv("VVKAJ_2021-11-09_7963_Totals.csv", sep = ",", header=T)
# Come back to the main directory
setwd(main.wd)
RemoveRows(data=Items_raw,  metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selecteditems.txt")
toberemoved = subset(Items_raw, Remove=='yes')
# Merge the data and metadata.
merged <- merge(x=Items_raw, y=metadata_1, by="UserName", all.x=T)
head(Items_raw, 2)
colnames(Items_raw)
# Merge the data and metadata.
merged <- merge(x=Items_raw, y=metadata_1, by="UserName", all.x=T)
head(metadata_1, 2)
# ========================================================================================
# Use metadata to filter out users marked as Remove = yes in metadata_1.
# ========================================================================================
# ---------------------------------------------------------------------------------------------------------------
# Load your metadata that has information about which UserName(s) to remove.
metadata_1 <- read.delim("eg_data/VVKAJ101-105/VVKAJ_metadata_1.txt", header=T)
metadata_1
RemoveRows(data=Items_raw,  metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selecteditems.txt")
RemoveRows(data=Items_raw,  metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selecteditems.txt")
View(Items_raw)
RemoveRows(data=Items_raw,  metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selecteditems.txt")
# ---------------------------------------------------------------------------------------------------------------
# Function to QC rows of 'totals' by Metadata
# Show which has "yes" in the "Remove" column, and remove them.
RemoveRows <- function(data, metadata.file, output.name){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "row(s) below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
selected_data <<- subset(merged, Remove!="yes")
# Save externally.
write.table(selected_data, output.name, sep="\t", quote=F, append=TRUE)
}
# ========================================================================================
# Use metadata to filter out users marked as Remove = yes in metadata_1.
# ========================================================================================
# ---------------------------------------------------------------------------------------------------------------
# Load your metadata that has information about which UserName(s) to remove.
metadata_1 <- read.delim("eg_data/VVKAJ101-105/VVKAJ_metadata_1.txt", header=T)
metadata_1
# Name your main directory for future use.
main.wd <- file.path(getwd())
# Import source code to run the analyses to follow.
source("lib/specify_dir_and_check_col.R")
source("lib/load_clean_ASA24.R")
# Use VVKAJ data ---------------------------------------------------------------
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
# Load your Items data.
Items_raw <- read.csv("VVKAJ_2021-11-09_7963_Items_NoCommas.csv", sep = ",", header=T)
# Come back to the main directory
setwd(main.wd)
# ========================================================================================
# Use metadata to filter out users marked as Remove = yes in metadata_1.
# ========================================================================================
# ---------------------------------------------------------------------------------------------------------------
# Load your metadata that has information about which UserName(s) to remove.
metadata_1 <- read.delim("eg_data/VVKAJ101-105/VVKAJ_metadata_1.txt", header=T)
metadata_1
RemoveRows(data=Items_raw,  metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selecteditems.txt")
View(RemoveRows)
# Merge the data and metadata.
merged <- merge(x=Items_raw, y=metadata_1, by="UserName", all.x=T)
View(merged)
head(merged, 2)
tail(merged, 2)
selected_data <- subset(merged, Remove!="yes")
merged <- merge(x=Items_raw, y=metadata_1, by="UserName", all.x=T)
head(selected_data,1)
dim(selected_data)
write.table(selected_data, "selectedbyhand", sep="\t", quote=F, append=TRUE)
write.table(selected_data, "selectedbyhand.txt", sep="\t", quote=F, append=TRUE)
write.table(selected_data, "selectedbyhand.txt", sep="\t", quote=F, append=F)
write.table(selected_data, "selectedbyhand.txt", col.names=NA, sep="\t", quote=F, append=T)
write.table(selected_data, "selectedbyhand.txt", row.names=NA, sep="\t", quote=F, append=T)
write.table(selected_data, "selectedbyhand.txt", row.names=F, sep="\t", quote=F, append=T)
write.table(selected_data, "selectedbyhand.txt", col.names=F, sep="\t", quote=F, append=T)
# create sample dataframe
sample_data <- data.frame( name= c("Geeks1", "Geeks2", "Geeks3",
"Geeks4", "Geeks5", "Geeks6"),
value= c( 11, 15, 10, 23, 32, 53 ) )
# write dataframe into a space separated text file
write.table( sample_data, file='sample.txt', sep=",")
# write dataframe into a space separated text file
write.table( sample_data, file='sample.txt', sep="," quote=F)
# write dataframe into a space separated text file
write.table( sample_data, file='sample.txt', sep=",", quote=F)
# write dataframe into a space separated text file
write.table( sample_data, file='sample.txt', sep=",", quote=F, row.names = F)
read.table('sample.txt', sep=",")
read.table('sample.txt', sep=",", header=T)
colnames(sample_data)
# write dataframe into a space separated text file
write.table( sample_data, file='sample.txt', sep="\t", quote=F, row.names = F)
read.table('sample.txt', sep="\t", header=T)
# Merge the data and metadata.
merged <- merge(x=Items_raw, y=metadata_1, by="UserName", all.x=T)
tail(merged, 2)
selected_data <- subset(merged, Remove!="yes")
head(selected_data,1)
colnames(selected_data)
write.table(selected_data, "selectedbyhand.txt", row.names=F, sep="\t", quote=F, append=T)
aaa = read.table(selected_data, "selectedbyhand.txt", header=T, sep="\t")
aaa = read.table("selectedbyhand.txt", header=T, sep="\t")
# Use VVKAJ data ---------------------------------------------------------------
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
# Load your Items data.
Items_raw <- read.csv("VVKAJ_2021-11-09_7963_Items_NoCommas.csv", sep = ",", header=T)
# Come back to the main directory
setwd(main.wd)
metadata_1
# Merge the data and metadata.
merged <- merge(x=Items_raw, y=metadata_1, by="UserName", all.x=T)
tail(merged, 2)
selected_data <- subset(merged, Remove!="yes")
head(selected_data,1)
dim(selected_data)
write.table(selected_data, "selectedbyhand.txt", row.names=F, sep="\t", quote=F)
aaa = read.table("selectedbyhand.txt", header=T, sep="\t")
head(aaa, 2)
# ---------------------------------------------------------------------------------------------------------------
# Function to QC rows of 'totals' by Metadata
# Show which has "yes" in the "Remove" column, and remove them.
RemoveRows <- function(data, metadata.file, output.name){
toberemoved <<- subset(metadata.file, Remove=="yes")
cat(nrow(toberemoved), "row(s) below are to be removed:", "\n")
print(toberemoved)
# Merge the data and metadata.
merged <<- merge(x=data, y=metadata.file, by="UserName", all.x=T)
# Remove the rows that have "yes" in the "Remove" column.
selected_data <<- subset(merged, Remove!="yes")
# Save externally.
write.table(selected_data, output.name, sep="\t", row.names=F, quote=F)
}
# ========================================================================================
# Use metadata to filter out users marked as Remove = yes in metadata_1.
# ========================================================================================
# ---------------------------------------------------------------------------------------------------------------
# Load your metadata that has information about which UserName(s) to remove.
metadata_1 <- read.delim("eg_data/VVKAJ101-105/VVKAJ_metadata_1.txt", header=T)
RemoveRows(data=Items_raw,  metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selecteditems.txt")
# Load your totals data if ready to go.
totals <- read.csv("VVKAJ_2021-11-09_7963_Totals.csv", sep = ",", header=T)
# Use VVKAJ data ---------------------------------------------------------------
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ101-105/")
# Load your totals data if ready to go.
totals <- read.csv("VVKAJ_2021-11-09_7963_Totals.csv", sep = ",", header=T)
# Come back to the main directory
setwd(main.wd)
# Show which has "yes" in the "Remove" column, and remove them.
# Data after QC is named as selected_data, and is saved as a text file with the specified name.
RemoveRows(data=totals, metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selectedtotals.txt")
# Load these selected data for further QC.
selected_totals <- read.table("eg_data/VVKAJ101-105/selectedtotals.txt", header=T, sep="\t")
RemoveRows(data=Items_raw,  metadata.file=metadata_1, output.name="eg_data/VVKAJ101-105/selecteditems.txt")
selected_items <- read.delim("eg_data/VVKAJ101-105/selecteditems.txt", header=T, sep="\t")
# Make a plot to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p2 = plot_ordination(phyfoods, ordinated, type="samples", color="UserName") +
geom_point(size=2) + theme(aspect.ratio = 1) + ggtitle("Username")
# load the necessary packages.
library(phyloseq)
library(ggtree)
library(ggplot2)
# Define ggplot2 arguments and themes first.
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title   = element_text(size=fontsize+2))
# Load the necessary scripts.
source("lib/unifrac_ordination.R")
# Food
# Load food OTU table - this is our food OTU data
# food <- read.delim("E:/MSU OneDrive 20210829/UMinn/Food_Tree-master/R/output/mct.dhydrt.otu.txt", row.names = 1)
food <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.dhydrt.otu.txt", row.names = 1)
# Format the food file and create a otu_table called OTU.
PrepFood(data=food)
# Taxonomy (tax)
# Load taxonomy file - this is the taxonomy data from food tree code, but forced into a tabular format
tax <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_4Lv.taxonomy.txt")
tax <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Sample
# Load metadata file which has samples in rows and characteristics (BMI, Gender, treatment etc.) as columns
meta <- read.csv( "~/GitHub/dietary_patterns/eg_data/dietstudy/food_map_txt_Metadata_2.csv",
row.names = 1, check.names = F)
# Format the metafile and save it as 'SAMPLES'.
PrepMeta(data=meta)
# Food tree
# Load tree file - output from make.tree. Be sure the levels of taxonomy and tree are the same.
# foodtree <- read_tree("E:/MSU OneDrive 20210829/UMinn/Food_Tree-master/R/output/mct.reduced_4Lv.tree.nwk")
foodtree <- read_tree("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.tree.nwk")
# It is OK to see a message saying that
# "Found more than one class "phylo" in cache; using the first, from namespace 'phyloseq'
# Also defined by 'tidytree'"
# Format food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# ---------------------------------------------------------------------------------------------------------------
# Perform Principal Coordinate Analysis (PCoA) with weighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated = phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=TRUE)
# Make a plot to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p2 = plot_ordination(phyfoods, ordinated, type="samples", color="UserName") +
geom_point(size=2) + theme(aspect.ratio = 1) + ggtitle("Username")
p2
# Add ellipses at a desired confidence level.
p2 + stat_ellipse(level=0.95)
# Make a plot to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p2 = plot_ordination(phyfoods, ordinated, type="samples", color="UserName") +
geom_point(size=2) + theme(aspect.ratio = 1) + ggtitle("Username")
p2
