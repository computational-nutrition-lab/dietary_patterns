setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main.wd <- file.path(getwd())
# load the necessary packages.
library(phyloseq)
library(ggtree)
library(ggplot2)
# Define ggplot2 arguments and themes first.
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title   = element_text(size=fontsize+2))
# Load the necessary scripts.
source("lib/unifrac_ordination.R")
# Food
# Load food OTU table - this is our food OTU data
# food <- read.delim("E:/MSU OneDrive 20210829/UMinn/Food_Tree-master/R/output/mct.dhydrt.otu.txt", row.names = 1)
food <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.dhydrt.otu.txt", row.names = 1)
# Format the food file and create a otu_table called OTU.
PrepFood(data=food)
# Taxonomy (tax)
# Load taxonomy file - this is the taxonomy data from food tree code, but forced into a tabular format
# tax <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_4Lv.taxonomy.txt")
tax <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Sample
# Load metadata file which has samples in rows and characteristics (BMI, Gender, treatment etc.) as columns
meta <- read.csv( "~/GitHub/dietary_patterns/eg_data/dietstudy/food_map_txt_Metadata_2.csv",
row.names = 1, check.names = F)
# Format the metafile and save it as 'SAMPLES'.
PrepMeta(data=meta)
# Food tree
# Load tree file - output from make.tree. Be sure the levels of taxonomy and tree are the same.
# foodtree <- read_tree("E:/MSU OneDrive 20210829/UMinn/Food_Tree-master/R/output/mct.reduced_4Lv.tree.nwk")
foodtree <- read_tree("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.tree.nwk")
# It is OK to see a message saying that
# "Found more than one class "phylo" in cache; using the first, from namespace 'phyloseq'
# Also defined by 'tidytree'"
# Format food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s = tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# ---------------------------------------------------------------------------------------------------------------
# Perform Principal Coordinate Analysis (PCoA) with weighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=FALSE)
View(food)
is.rooted(phy_tree(set))
"""is.rooted(phy_tree(phyfoods))
""
# Gives a warning with Lv1 saying that
# In matrix(tree$edge[order(tree$edge[, 1]), ][, 2], byrow = TRUE,  :
#             data length [1461] is not a sub-multiple or multiple of the number of rows [731]
# GitHub discussion forum  is here:
new_tre <- ape::multi2di(foodtree)
PrepTree(data=new_tre)
View(new_tre)
ggtree(new_tre, layout = "circular")
ggtree(foodtree, layout = "circular")
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns of metadata.
sample_variables(phyfoods)
# ---------------------------------------------------------------------------------------------------------------
# Perform Principal Coordinate Analysis (PCoA) with weighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=FALSE)
View(food)
# Make a plot to show the separation of taxa (foods) by level 1 on a PCo1-PCo2 plane.
p1 <- plot_ordination(phyfoods, ordinated, color="L1", type="taxa") +
geom_point(size=2) + theme(aspect.ratio=1) + ggtitle("Foods at L1")
p1
# Make a plot to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p2 = plot_ordination(phyfoods, ordinated, type="samples", color="UserName") +
geom_point(size=2) + theme(aspect.ratio = 1) + ggtitle("Username")
p2
# Make a plot to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p2 = plot_ordination(phyfoods, ordinated, type="samples", color="UserName") +
geom_point(size=2) + theme(aspect.ratio = 1) + ggtitle("Users")
p2
# Add ellipses at a desired confidence level.
p2 + stat_ellipse(level=0.95)
# Add lines to connect samples in order of the variable on the x axis.
p2 + geom_line() + ggtitle("Users connected in the order of x axis") +
theme(plot.title=element_text(size=16)) # Specify the font size of the title
# Add lines to connect samples in the order in which they appear in the data.
p2 + geom_path() + ggtitle("Users connected in the order of data") +
theme(plot.title=element_text(size=16))
# make a polygon by UserName
p2 + geom_polygon(aes(fill=UserName)) + geom_point(size=3)
# Specify colors for specific user(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# First, save the basic plot as a dataframe.
p2df = plot_ordination(phyfoods, ordinated, type="samples", color="UserName", justDF=T)
# Filter for users
select_points <- subset(p2df, UserName=="MCTs11" | UserName=="MCTs12" )
head(select_points,2)
# Add a layer of specific datapoints in different aethetics
ggplot(p2df, aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=as.factor(UserName)), alpha=0.2)  +
geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
scale_color_manual(values = c("MCTs11"="red", "MCTs12"="blue"))
# Add a layer of specific datapoints in different aethetics
ggplot(p2df, aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=as.factor(UserName)), alpha=0.2)  +
geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
scale_color_manual(values = c("MCTs11"="red", "MCTs12"="blue")) +
theme(aspect.ratio = 1)
# Make a plot to show the separation of taxa (foods) by level 1 on a PCo1-PCo2 plane.
p1 <- plot_ordination(phyfoods, ordinated, color="L1", type="taxa") +
geom_point(size=2) + theme(aspect.ratio=1) + ggtitle("Foods at L1")
p1
# Make a plot to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p2 = plot_ordination(phyfoods, ordinated, type="samples", color="UserName") +
geom_point(size=2) + theme(aspect.ratio = 1) + ggtitle("Users")
p2
# Add ellipses at a desired confidence level.
p2 + stat_ellipse(level=0.95)
# Add lines to connect samples in order of the variable on the x axis.
p2 + geom_line() + ggtitle("Users connected in the order of x axis") +
theme(plot.title=element_text(size=16)) # Specify the font size of the title
# Add lines to connect samples in the order in which they appear in the data.
p2 + geom_path() + ggtitle("Users connected in the order of data") +
theme(plot.title=element_text(size=16))
# make a polygon by UserName
p2 + geom_polygon(aes(fill=UserName)) + geom_point(size=3)
# Specify colors for specific user(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# First, save the basic plot as a dataframe.
p2df = plot_ordination(phyfoods, ordinated, type="samples", color="UserName", justDF=T)
# Filter for users
select_points <- subset(p2df, UserName=="MCTs11" | UserName=="MCTs12" )
head(select_points,2)
# Add a layer of specific datapoints in different aethetics
ggplot(p2df, aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=as.factor(UserName)), alpha=0.2)  +
geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
title(xlab = "Axis.1 [6.7%]", ylab = "Axis.2 [3.1%]", main="MCTs11 & MCTs12") +
scale_color_manual(values = c("MCTs11"="red", "MCTs12"="blue")) +
theme(aspect.ratio = 1)
# Add a layer of specific datapoints in different aethetics
ggplot(p2df, aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=as.factor(UserName)), alpha=0.2)  +
geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
ggtitle(xlab = "Axis.1 [6.7%]", ylab = "Axis.2 [3.1%]", main="MCTs11 & MCTs12") +
scale_color_manual(values = c("MCTs11"="red", "MCTs12"="blue")) +
theme(aspect.ratio = 1)
# Add a layer of specific datapoints in different aethetics
ggplot(p2df, aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=as.factor(UserName)), alpha=0.2)  +
geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
# title(xlab = "Axis.1 [6.7%]", ylab = "Axis.2 [3.1%]", main="MCTs11 & MCTs12") +
scale_color_manual(values = c("MCTs11"="red", "MCTs12"="blue")) +
theme(aspect.ratio = 1)
# Add a layer of specific datapoints in different aethetics
ggplot(p2df, aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=as.factor(UserName)), alpha=0.2)  +
geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
labs(x = "Axis.1 [6.7%]", y = "Axis.2 [3.1%]") +
ggtitle("MCTs11 & MCTs12") +
scale_color_manual(values = c("MCTs11"="red", "MCTs12"="blue")) +
theme(aspect.ratio = 1)
# Add a layer of specific datapoints in different aethetics
ggplot(p2df, aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=as.factor(UserName)), alpha=0.2)  +
geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
labs(x = "Axis.1 [6.7%]", y = "Axis.2 [3.1%]") +
ggtitle("MCTs11 & MCTs12 (Shake drinkers)") +
scale_color_manual(values = c("MCTs11"="red", "MCTs12"="blue")) +
theme(aspect.ratio = 1)
# Add a layer of specific datapoints in different aethetics
ggplot(p2df, aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=as.factor(UserName)))  +
geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
labs(x = "Axis.1 [6.7%]", y = "Axis.2 [3.1%]") +
ggtitle("MCTs11 & MCTs12 (Shake drinkers)") +
scale_color_manual(values = c("MCTs11"="red", "MCTs12"="blue")) +
theme(aspect.ratio = 1)
# ---------------------------------------------------------------------------------------------------------------
# Perform Principal Coordinate Analysis (PCoA) with weighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=T)
# Make a plot to show the separation of taxa (foods) by level 1 on a PCo1-PCo2 plane.
p1 <- plot_ordination(phyfoods, ordinated, color="L1", type="taxa") +
geom_point(size=2) + theme(aspect.ratio=1) + ggtitle("Foods at L1")
p1
# Make a plot to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p2 = plot_ordination(phyfoods, ordinated, type="samples", color="UserName") +
geom_point(size=2) + theme(aspect.ratio = 1) + ggtitle("Users")
p2
# Add ellipses at a desired confidence level.
p2 + stat_ellipse(level=0.95)
# Add lines to connect samples in order of the variable on the x axis.
p2 + geom_line() + ggtitle("Users connected in the order of x axis") +
theme(plot.title=element_text(size=16)) # Specify the font size of the title
# Add lines to connect samples in the order in which they appear in the data.
p2 + geom_path() + ggtitle("Users connected in the order of data") +
theme(plot.title=element_text(size=16))
# make a polygon by UserName
p2 + geom_polygon(aes(fill=UserName)) + geom_point(size=3)
# Add ellipses at a desired confidence level.
p2 + stat_ellipse(level=0.95)
# Add ellipses at a desired confidence level.
p2 + stat_ellipse(level=0.95) + ggtitle("elipses confidence level=0.95")
# Add ellipses at a desired confidence level.
p2 + stat_ellipse(level=0.95) + ggtitle("elipses confidence level=0.95") +
theme(plot.title=element_text(size=16)) # Specify the font size of the title
# Specify colors for specific user(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# First, save the basic plot as a dataframe.
p2df = plot_ordination(phyfoods, ordinated, type="samples", color="UserName", justDF=T)
# Filter for users
select_points <- subset(p2df, UserName=="MCTs11" | UserName=="MCTs12" )
head(select_points,2)
# Add a layer of specific datapoints in different aethetics
ggplot(p2df, aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=as.factor(UserName)))  +
geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
labs(x = "Axis.1 [6.7%]", y = "Axis.2 [3.1%]") +
ggtitle("MCTs11 & MCTs12 (Shake drinkers)") +
scale_color_manual(values = c("MCTs11"="red", "MCTs12"="blue")) +
theme(aspect.ratio = 1)
# Add a layer of specific datapoints in different aethetics
ggplot(p2df, aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=as.factor(UserName)))  +
geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
labs(x = "Axis.1 [6.7%]", y = "Axis.2 [3.1%]") +
ggtitle("MCTs11 & MCTs12 (Shake drinkers)", fontsize=16) +
scale_color_manual(values = c("MCTs11"="red", "MCTs12"="blue")) +
theme(aspect.ratio = 1)
# Add a layer of specific datapoints in different aethetics
ggplot(p2df, aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=as.factor(UserName)))  +
geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
labs(x = "Axis.1 [6.7%]", y = "Axis.2 [3.1%]") +
ggtitle("MCTs11 & MCTs12 (Shake drinkers)") +
theme(plot.title = element_text(size = 16, face = "bold")) +
scale_color_manual(values = c("MCTs11"="red", "MCTs12"="blue")) +
theme(aspect.ratio = 1)
# Add a layer of specific datapoints in different aethetics
ggplot(p2df, aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=as.factor(UserName)))  +
geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
labs(x = "Axis.1 [6.7%]", y = "Axis.2 [3.1%]") +
ggtitle("MCTs11 & MCTs12 (Shake drinkers)") +
theme(plot.title = element_text(size = 16)) +
scale_color_manual(values = c("MCTs11"="red", "MCTs12"="blue")) +
theme(aspect.ratio = 1)
View(p2df)
# Add a layer of specific datapoints in different aethetics
ggplot(p2df, aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=as.factor(UserName)))  +
geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
labs(x = "Axis.1 [13.7%]", y = "Axis.2 [9.9%]") +
ggtitle("MCTs11 & MCTs12 (Shake drinkers)") +
theme(plot.title = element_text(size = 16)) +
scale_color_manual(values = c("MCTs11"="red", "MCTs12"="blue")) +
theme(aspect.ratio = 1)
View(ordinated)
ordinated$values$Relative_eig
head(ordinated$values$Relative_eig)
# Save the relative eigenvalues for plotting.
eigen_percent <- head(ordinated$values$Relative_eig, 3)
# Add a layer of specific datapoints in different aethetics
ggplot(p2df, aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=as.factor(UserName)))  +
geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
labs(x = paste0("Axis.1 [", round(eigen_percent[1]*100, digits=1), "%]"),
y = paste0("Axis.1 [", round(eigen_percent[2]*100, digits=1), "%]")) +
ggtitle("MCTs11 & MCTs12 (Shake drinkers)") +
theme(plot.title = element_text(size = 16)) +
scale_color_manual(values = c("MCTs11"="red", "MCTs12"="blue")) +
theme(aspect.ratio = 1)
# Specify colors for specific user(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# First, save the basic plot as a dataframe.
p2df = plot_ordination(phyfoods, ordinated, type="samples", color="UserName", justDF=T)
# Filter for users
select_points <- subset(p2df, UserName=="MCTs11" | UserName=="MCTs12" )
head(select_points,2)
# Add a layer of specific datapoints in different aethetics
ggplot(p2df, aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=as.factor(UserName)))  +
geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
labs(x = paste0("Axis.1 [", round(eigen_percent[1]*100, digits=1), "%]"),
y = paste0("Axis.1 [", round(eigen_percent[2]*100, digits=1), "%]")) +
ggtitle("MCTs11 & MCTs12 (Shake drinkers)") +
theme(plot.title = element_text(size = 16)) +
scale_color_manual(values = c("MCTs11"="red", "MCTs12"="blue")) +
theme(aspect.ratio = 1)
# Add ellipses at a desired confidence level.
p2 + stat_ellipse(level=0.95) + ggtitle("elipses confidence level=0.95") +
theme(plot.title=element_text(size=16)) # Specify the font size of the title
# Food tree
# Load tree file - output from make.tree. Be sure the levels of taxonomy and tree are the same.
# foodtree <- read_tree("E:/MSU OneDrive 20210829/UMinn/Food_Tree-master/R/output/mct.reduced_4Lv.tree.nwk")
foodtree <- read_tree("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.tree.nwk")
# It is OK to see a message saying that
# "Found more than one class "phylo" in cache; using the first, from namespace 'phyloseq'
# Also defined by 'tidytree'"
# Format food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# Check the level 1 foods in your food tree
L1s = tax_table(phyfoods)[, "L1"]
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# Check the level 1 foods in your food tree
L1s = tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns of metadata.
sample_variables(phyfoods)
# ---------------------------------------------------------------------------------------------------------------
# Perform Principal Coordinate Analysis (PCoA) with weighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=T)
# ---------------------------------------------------------------------------------------------------------------
# Perform Principal Coordinate Analysis (PCoA) with weighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=T)
# Save the percent variance explained for the fist 3 axes.
eigen_percent <- head(ordinated$values$Relative_eig, 3)
# If it gives a warning with Lv1 saying that:
# In matrix(tree$edge[order(tree$edge[, 1]), ][, 2], byrow = TRUE,  :
#             data length [1461] is not a sub-multiple or multiple of the number of rows [731]
# A solution shared in GitHub discussion forum is to transform all multichotomies into dichotomies with
# branches with length zero: need the age package.
new_tre <- ape::multi2di(foodtree)
# Make a plot to show the separation of taxa (foods) by level 1 on a PCo1-PCo2 plane.
p1 <- plot_ordination(phyfoods, ordinated, color="L1", type="taxa") +
geom_point(size=2) + theme(aspect.ratio=1) + ggtitle("Foods at L1")
p1
# Save the information necessary for ploting as a dataframe.
p1df <- plot_ordination(phyfoods, ordinated, color="L1", type="taxa", justDF = T)
# Make a plot to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p2 = plot_ordination(phyfoods, ordinated, type="samples", color="UserName") +
geom_point(size=2) + theme(aspect.ratio = 1) + ggtitle("Users")
p2
# Add ellipses at a desired confidence level.
p2 + stat_ellipse(level=0.95) + ggtitle("elipses confidence level=0.95") +
theme(plot.title=element_text(size=16)) # Specify the font size of the title
# Add lines to connect samples in order of the variable on the x axis.
p2 + geom_line() + ggtitle("Users connected in the order of x axis") +
theme(plot.title=element_text(size=16))
# Add lines to connect samples in the order in which they appear in the data.
p2 + geom_path() + ggtitle("Users connected in the order of data") +
theme(plot.title=element_text(size=16))
# make a polygon by UserName
p2 + geom_polygon(aes(fill=UserName)) + geom_point(size=3)
# Specify colors for specific user(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# First, save the basic plot as a dataframe.
p2df = plot_ordination(phyfoods, ordinated, type="samples", color="UserName", justDF=T)
# Filter for users
select_points <- subset(p2df, UserName=="MCTs11" | UserName=="MCTs12" )
head(select_points,2)
# Add a layer of specific datapoints in different aethetics
ggplot(p2df, aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=as.factor(UserName)))  +
geom_point(data=select_points, aes(x=Axis.1, y=Axis.2, color=as.factor(UserName))) +
labs(x = paste0("Axis.1 [", round(eigen_percent[1]*100, digits=1), "%]"),
y = paste0("Axis.1 [", round(eigen_percent[2]*100, digits=1), "%]")) +
ggtitle("MCTs11 & MCTs12 (Shake drinkers)") +
theme(plot.title = element_text(size = 16)) +
scale_color_manual(values = c("MCTs11"="red", "MCTs12"="blue")) +
theme(aspect.ratio = 1)
# If it gives a warning with Lv1 saying that:
# In matrix(tree$edge[order(tree$edge[, 1]), ][, 2], byrow = TRUE,  :
#             data length [1461] is not a sub-multiple or multiple of the number of rows [731]
# A solution shared in GitHub discussion forum is to transform all multichotomies into dichotomies with
# branches with length zero: need the age package.
new_tre <- ape::multi2di(foodtree)
# Prep it again for making a unifrac object.
PrepTree(data=new_tre)
# With the newly created TREE, create a phyloseq object once again.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# ---------------------------------------------------------------------------------------------------------------
# Perform Principal Coordinate Analysis (PCoA) with weighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=F)
# Make a plot to show the separation of taxa (foods) by level 1 on a PCo1-PCo2 plane.
p1 <- plot_ordination(phyfoods, ordinated, color="L1", type="taxa") +
geom_point(size=2) + theme(aspect.ratio=1) + ggtitle("Foods at L1")
p1
# Make a plot to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p2 = plot_ordination(phyfoods, ordinated, type="samples", color="UserName") +
geom_point(size=2) + theme(aspect.ratio = 1) + ggtitle("Users")
p2
# Add ellipses at a desired confidence level.
p2 + stat_ellipse(level=0.95) + ggtitle("elipses confidence level=0.95") +
theme(plot.title=element_text(size=16)) # Specify the font size of the title
food <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_4Lv.dhydrt.otu.txt", row.names = 1)
# Taxonomy (tax)
# Load taxonomy file - this is the taxonomy data from food tree code, but forced into a tabular format
tax <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_4Lv.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Sample
# Load metadata file which has samples in rows and characteristics (BMI, Gender, treatment etc.) as columns
meta <- read.csv( "~/GitHub/dietary_patterns/eg_data/dietstudy/food_map_txt_Metadata_2.csv",
row.names = 1, check.names = F)
# Format the food file and create a otu_table called OTU.
PrepFood(data=food)
# Sample
# Load metadata file which has samples in rows and characteristics (BMI, Gender, treatment etc.) as columns
meta <- read.csv( "~/GitHub/dietary_patterns/eg_data/dietstudy/food_map_txt_Metadata_2.csv",
row.names = 1, check.names = F)
# Format the metafile and save it as 'SAMPLES'.
PrepMeta(data=meta)
# Food tree
# Load tree file - output from make.tree. Be sure the levels of taxonomy and tree are the same.
foodtree <- read_tree("E:/MSU OneDrive 20210829/UMinn/Food_Tree-master/R/output/mct.reduced_4Lv.tree.nwk")
# Food tree
# Load tree file - output from make.tree. Be sure the levels of taxonomy and tree are the same.
foodtree <- read_tree("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_4Lv.tree.nwk")
# It is OK to see a message saying that
# "Found more than one class "phylo" in cache; using the first, from namespace 'phyloseq'
# Also defined by 'tidytree'"
# Format food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s = tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# ---------------------------------------------------------------------------------------------------------------
# Perform Principal Coordinate Analysis (PCoA) with weighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=T)
# Save the percent variance explained for the fist 3 axes.
eigen_percent <- head(ordinated$values$Relative_eig, 3)
# Make a plot to show the separation of taxa (foods) by level 1 on a PCo1-PCo2 plane.
p1 <- plot_ordination(phyfoods, ordinated, color="L1", type="taxa") +
geom_point(size=2) + theme(aspect.ratio=1) + ggtitle("Foods at L1")
p1
# Make a plot to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata
p2 = plot_ordination(phyfoods, ordinated, type="samples", color="UserName") +
geom_point(size=2) + theme(aspect.ratio = 1) + ggtitle("Users")
p2
# Add ellipses at a desired confidence level.
p2 + stat_ellipse(level=0.95) + ggtitle("elipses confidence level=0.95") +
theme(plot.title=element_text(size=16)) # Specify the font size of the title
