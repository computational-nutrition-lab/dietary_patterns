axis.text.x = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ),
axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
geom_text(aes(label=variables, y=n.PCx), position=position_dodge(width = 0.5), hjust=1.1, angle=90)+
scale_y_continuous(expand = expansion(mult=c(0.3, 0.1))) # give 0.3 space at the lower limit of Y (to fit text).
print(loadings_plot)
}
}
# Plot the contribution of the variables to a given PC.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC2",
positive.color="green2", negative.color="grey70", sort.variables = F)
# Plot the contribution of the variables to a given PC.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC2",
positive.color="green2", negative.color="grey70", sort.variables = F)
# Plot the contribution of the variables to a given PC.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC1",
positive.color="green2", negative.color="grey70", sort.variables = F)
# ---------------------------------------------------------------------------------------------------------------
# Plot the contribution of each variable to PC1.
LoadingsPlot <- function(pca.result,  whichPC, positive.color="green2", negative.color="grey70", sort.variables=c(TRUE, FALSE)){
# Save the rotation (contribution of the variables to each PC) as a dataframe.
Rota <- pca.result[["rotation"]]
Rotadf = as.data.frame(Rota)
# Make a column that contains the variable names (rownames).
Rotadf$variables <- rownames(Rotadf)
# IF keeping the original order of the variables --------------------------------------------
if(sort.variables==FALSE){
# Select the variables and only the specified PC to plot.
aaa <- data.frame(variables=Rotadf$variables, Ytoplot= Rotadf[, whichPC])
print(head(aaa, 3))
# Make variables as an ordered factor (the order of levels will be presereved).
aaa$variables <- factor(aaa$variables, levels=aaa$variables)
# Calculate the position at which labels are placed for each bar.
n.PCx <- ifelse(aaa[, "Ytoplot"] > 0, yes= -0.01, no= aaa[, "Ytoplot"]-0.01)
# Assign each value a positive color and negative color.
c.PCx <- ifelse(aaa[, "Ytoplot"] > 0, yes=positive.color, no=negative.color)
# Make a plot with the original order of variables.
loadings_plot <- ggplot(data= aaa, aes(x=variables, y=Ytoplot)) +
geom_bar(stat="identity", fill=c.PCx) +
theme_bw() +
labs(y=paste0(whichPC)) +
# theme(axis.text.x = element_text(angle = 45, hjust = 1) ) + # to check if the variable orders are correct.
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ),
axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
# geom_text(aes(label=variables), position=position_dodge(width = 0.5), hjust=1.1, angle=90)+
geom_text(aes(label=variables, y=n.PCx), position=position_dodge(width = 0.5), hjust=1.1, angle=90)+
scale_y_continuous(expand = expansion(mult=c(0.3, 0.1))) # give 0.3 space at the lower limit of Y (to fit text).
print(loadings_plot)
# IF sorting the variables by their contributions --------------------------------------------
}else if(sort.variables==TRUE){
# Select the variables and only the specified PC to plot.
bbb <- data.frame(variables=Rotadf$variables, Ytoplot= Rotadf[, whichPC])
# Sort the variables in the order of Y (the contribution to the specified PC.)
bbb_s <- bbb[ order(bbb$Ytoplot, decreasing=T),  ]
# Make variables as an ordered factor.
bbb_s$variables <- factor(bbb_s$variables, levels=bbb_s$variables)
print("bbb_s is below.")
print(head(bbb_s,4))
# Calculate the position at which labels are placed for each bar.
n.PCx <- ifelse(bbb_s[, "Ytoplot"] > 0, yes= -0.01, no= bbb_s[, "Ytoplot"]-0.01)
# Assign each value a positive color and negative color.
c.PCx <- ifelse(bbb_s[, "Ytoplot"] > 0, yes=positive.color, no=negative.color)
# Make a plot with the original order of the variables.
loadings_plot <- ggplot(data= bbb_s, aes(x=variables, y=Ytoplot)) +
geom_bar(stat='identity', fill=c.PCx) +
theme_bw() +
labs(y=paste0(whichPC)) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ),
axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
geom_text(aes(label=variables, y=n.PCx), position=position_dodge(width = 0.5), hjust=1.1, angle=90)+
scale_y_continuous(expand = expansion(mult=c(0.3, 0.1))) # give 0.3 space at the lower limit of Y (to fit text).
print(loadings_plot)
}
}
# Plot the contribution of the variables to a given PC.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC1",
positive.color="green2", negative.color="grey70", sort.variables = F)
# Plot the contribution of the variables to a given PC.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC2",
positive.color="green2", negative.color="grey70", sort.variables = F)
# Plot the contribution of the variables to a given PC.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC2",
positive.color="green2", negative.color="grey70", sort.variables = T)
# Plot the contribution of the variables to a given PC.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC1",
positive.color="green2", negative.color="grey70", sort.variables = T)
# Plot the contribution of the variables to a given PC.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC1",
positive.color="green2", negative.color="grey70", sort.variables = F)
# ---------------------------------------------------------------------------------------------------------------
# Plot the contribution of each variable to PC1.
LoadingsPlot <- function(pca.result,  whichPC, positive.color="green2", negative.color="grey70", sort.variables=c(TRUE, FALSE)){
# Save the rotation (contribution of the variables to each PC) as a dataframe.
Rota <- pca.result[["rotation"]]
Rotadf = as.data.frame(Rota)
# Make a column that contains the variable names (rownames).
Rotadf$variables <- rownames(Rotadf)
# IF keeping the original order of the variables --------------------------------------------
if(sort.variables==FALSE){
# Select the variables and only the specified PC to plot.
aaa <- data.frame(variables=Rotadf$variables, Ytoplot= Rotadf[, whichPC])
# Make variables as an ordered factor (the order of levels will be presereved).
aaa$variables <- factor(aaa$variables, levels=aaa$variables)
# Calculate the position at which labels are placed for each bar.
n.PCx <- ifelse(aaa[, "Ytoplot"] > 0, yes= -0.01, no= aaa[, "Ytoplot"]-0.01)
# Assign each value a positive color and negative color.
c.PCx <- ifelse(aaa[, "Ytoplot"] > 0, yes=positive.color, no=negative.color)
# Make a plot with the original order of variables.
loadings_plot <<- ggplot(data= aaa, aes(x=variables, y=Ytoplot)) +
geom_bar(stat="identity", fill=c.PCx) +
theme_bw() +
labs(y=paste0(whichPC)) +
# theme(axis.text.x = element_text(angle = 45, hjust = 1) ) + # to check if the variable orders are correct.
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ),
axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
# geom_text(aes(label=variables), position=position_dodge(width = 0.5), hjust=1.1, angle=90)+
geom_text(aes(label=variables, y=n.PCx), position=position_dodge(width = 0.5), hjust=1.1, angle=90)+
scale_y_continuous(expand = expansion(mult=c(0.3, 0.1))) # give 0.3 space at the lower limit of Y (to fit text).
print(loadings_plot)
# IF sorting the variables by their contributions --------------------------------------------
}else if(sort.variables==TRUE){
# Select the variables and only the specified PC to plot.
bbb <- data.frame(variables=Rotadf$variables, Ytoplot= Rotadf[, whichPC])
# Sort the variables in the order of Y (the contribution to the specified PC.)
bbb_s <- bbb[ order(bbb$Ytoplot, decreasing=T),  ]
# Make variables as an ordered factor.
bbb_s$variables <- factor(bbb_s$variables, levels=bbb_s$variables)
print("bbb_s is below.")
print(head(bbb_s,4))
# Calculate the position at which labels are placed for each bar.
n.PCx <- ifelse(bbb_s[, "Ytoplot"] > 0, yes= -0.01, no= bbb_s[, "Ytoplot"]-0.01)
# Assign each value a positive color and negative color.
c.PCx <- ifelse(bbb_s[, "Ytoplot"] > 0, yes=positive.color, no=negative.color)
# Make a plot with the original order of the variables.
loadings_plot <<- ggplot(data= bbb_s, aes(x=variables, y=Ytoplot)) +
geom_bar(stat='identity', fill=c.PCx) +
theme_bw() +
labs(y=paste0(whichPC)) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ),
axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
geom_text(aes(label=variables, y=n.PCx), position=position_dodge(width = 0.5), hjust=1.1, angle=90)+
scale_y_continuous(expand = expansion(mult=c(0.3, 0.1))) # give 0.3 space at the lower limit of Y (to fit text).
print(loadings_plot)
}
}
# Plot the contribution of the variables to a given PC.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC1",
positive.color="green2", negative.color="grey70", sort.variables = F)
loadings_plot
ggsave("results/PCA_results/2 days 50 ind/total_d12_mean_QC1000_loadings.png", directions, device="png", width=8, height=4.8, dpi=200)
ggsave("results/PCA_results/2 days 50 ind/total_d12_mean_QC1000_loadings.png", loadings_plot, device="png", width=8, height=4.8, dpi=200)
# ---------------------------------------------------------------------------------------------------------------
# Plot the contribution of each variable to PC1.
LoadingsPlot <- function(pca.result,  whichPC, positive.color="green2", negative.color="grey70", sort.variables=c(TRUE, FALSE)){
# Save the rotation (contribution of the Variables to each PC) as a dataframe.
Rota <- pca.result[["rotation"]]
Rotadf = as.data.frame(Rota)
# Make a column that contains the variable names (rownames).
Rotadf$Variables <- rownames(Rotadf)
# IF keeping the original order of the Variables --------------------------------------------
if(sort.variables==FALSE){
# Select the Variables and only the specified PC to plot.
aaa <- data.frame(Variables=Rotadf$Variables, Ytoplot= Rotadf[, whichPC])
# Make Variables as an ordered factor (the order of levels will be presereved).
aaa$Variables <- factor(aaa$Variables, levels=aaa$Variables)
# Calculate the position at which labels are placed for each bar.
n.PCx <- ifelse(aaa[, "Ytoplot"] > 0, yes= -0.01, no= aaa[, "Ytoplot"]-0.01)
# Assign each value a positive color and negative color.
c.PCx <- ifelse(aaa[, "Ytoplot"] > 0, yes=positive.color, no=negative.color)
# Make a plot with the original order of Variables.
loadings_plot <<- ggplot(data= aaa, aes(x=Variables, y=Ytoplot)) +
geom_bar(stat="identity", fill=c.PCx) +
theme_bw() +
labs(y=paste0(whichPC)) +
# theme(axis.text.x = element_text(angle = 45, hjust = 1) ) + # to check if the variable orders are correct.
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ),
axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
# geom_text(aes(label=Variables), position=position_dodge(width = 0.5), hjust=1.1, angle=90)+
geom_text(aes(label=Variables, y=n.PCx), position=position_dodge(width = 0.5), hjust=1.1, angle=90)+
scale_y_continuous(expand = expansion(mult=c(0.3, 0.1))) # give 0.3 space at the lower limit of Y (to fit text).
print(loadings_plot)
# IF sorting the Variables by their contributions --------------------------------------------
}else if(sort.variables==TRUE){
# Select the Variables and only the specified PC to plot.
bbb <- data.frame(Variables=Rotadf$Variables, Ytoplot= Rotadf[, whichPC])
# Sort the Variables in the order of Y (the contribution to the specified PC.)
bbb_s <- bbb[ order(bbb$Ytoplot, decreasing=T),  ]
# Make Variables as an ordered factor.
bbb_s$Variables <- factor(bbb_s$Variables, levels=bbb_s$Variables)
print("bbb_s is below.")
print(head(bbb_s,4))
# Calculate the position at which labels are placed for each bar.
n.PCx <- ifelse(bbb_s[, "Ytoplot"] > 0, yes= -0.01, no= bbb_s[, "Ytoplot"]-0.01)
# Assign each value a positive color and negative color.
c.PCx <- ifelse(bbb_s[, "Ytoplot"] > 0, yes=positive.color, no=negative.color)
# Make a plot with the original order of the Variables.
loadings_plot <<- ggplot(data= bbb_s, aes(x=Variables, y=Ytoplot)) +
geom_bar(stat='identity', fill=c.PCx) +
theme_bw() +
labs(y=paste0(whichPC)) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ),
axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
geom_text(aes(label=Variables, y=n.PCx), position=position_dodge(width = 0.5), hjust=1.1, angle=90)+
scale_y_continuous(expand = expansion(mult=c(0.3, 0.1))) # give 0.3 space at the lower limit of Y (to fit text).
print(loadings_plot)
}
}
# Plot the contribution of the variables to a given PC.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC1",
positive.color="green2", negative.color="grey70", sort.variables = F)
# Plot the contribution of the variables to a given PC.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC1",
positive.color="green2", negative.color="grey70", sort.variables = T)
# Plot the contribution of the variables to a given PC.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC2",
positive.color="green2", negative.color="grey70", sort.variables = F)
# Plot the contribution of the variables to a given PC.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC2",
positive.color="green2", negative.color="grey70", sort.variables = T)
loadings_plot
ggsave("results/PCA_results/2 days 50 ind/total_d12_mean_QC1000_loadings_PC2.png", loadings_plot, device="png", width=8, height=4.8, dpi=200)
# Plot the contribution of the variables to a given PC.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC1",
positive.color="green2", negative.color="grey70", sort.variables = T)
loadings_plot
ggsave("results/PCA_results/2 days 50 ind/total_d12_mean_QC1000_loadings_PC1.png", loadings_plot, device="png", width=8, height=4.8, dpi=200)
ggsave("results/PCA_results/2 days 50 ind/total_d12_mean_QC1000_screep.pdf", screep, device="pdf", width=5, height=5, dpi=200)
# Create a scree plot.
screep <- LineScreePlot(pca.data = pca_input, pca.result = scaled_pca)
screep
ggsave("results/PCA_results/2 days 50 ind/total_d12_mean_QC1000_screep.pdf", screep, device="pdf", width=5, height=5, dpi=200)
ggsave("results/PCA_results/temporary/total_d12_mean_QC1000_screep.pdf", screep, device="pdf", width=5, height=5)
ggsave("results/PCA_results/temporary/total_d12_mean_QC1000_screep.pdf", screep, device="pdf", width=5, height=5, units="inch")
ggsave("results/PCA_results/temporary/total_d12_mean_QC1000_screep.pdf", screep, device="pdf", width=5, height=5, units="in")
ggsave("results/PCA_results/temporary/total_d12_mean_QC1000_screep.pdf", screep, device="pdf", width=3, height=3, units="in")
ggplot2::theme_set(theme_bw(base_size = 12))
# Create a scree plot.
screep <- LineScreePlot(pca.data = pca_input, pca.result = scaled_pca)
screep
ggsave("results/PCA_results/temporary/total_d12_mean_QC1000_screep.pdf", screep, device="pdf", width=3, height=3, units="in")
# ---------------------------------------------------------------------------------------------------------------
# Function to create a scree plot.
# If there are 10 or less PCs in total, plot all, and else plot the first 10 PCs.
LineScreePlot <- function(pca.data = pca_input, pca.result = scaled_pca){
# Extract the importance of the PCs
pca_summary <- summary(pca.result)
# # Extract the Proportion of Variance
var_explained_values <- pca_summary[["importance"]][2, ]
# Create a dataframe that has the PCs and their importance (var explained by each PC)
var_explained_df <<- data.frame(PC = seq(1:length(var_explained_values)),
var_explained = var_explained_values)
# if there are only 9 or fewer variables, plot them all; otherwise plot the first 10 PCs.
if(length(colnames(pca.data))<10){
myPCs <<- var_explained_df
}else{
myPCs <<- var_explained_df[1:10, ]    # Subset the first 10 PCs
}
# Create a scree plot.
require(ggplot2)
ggplot(myPCs, aes(x = PC, y = var_explained*100)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = 1:nrow(myPCs)) +
labs(x = "Number of PCs",
y = "Variance explained by PCs (%)") +
theme_bw(base_size = 12) +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ) ) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
theme(aspect.ratio = 0.9)
}
# Create a scree plot.
screep <- LineScreePlot(pca.data = pca_input, pca.result = scaled_pca)
screep
ggsave("results/PCA_results/temporary/total_d12_mean_QC1000_screep.pdf", screep, device="pdf", width=3, height=3, units="in")
ggsave("results/PCA_results/temporary/total_d12_mean_QC1000_screep.pdf", screep, device="pdf", width=5, height=5, units="in")
# ---------------------------------------------------------------------------------------------------------------
# Function to create a scree plot.
# If there are 10 or less PCs in total, plot all, and else plot the first 10 PCs.
LineScreePlot <- function(pca.data = pca_input, pca.result = scaled_pca){
# Extract the importance of the PCs
pca_summary <- summary(pca.result)
# # Extract the Proportion of Variance
var_explained_values <- pca_summary[["importance"]][2, ]
# Create a dataframe that has the PCs and their importance (var explained by each PC)
var_explained_df <<- data.frame(PC = seq(1:length(var_explained_values)),
var_explained = var_explained_values)
# if there are only 9 or fewer variables, plot them all; otherwise plot the first 10 PCs.
if(length(colnames(pca.data))<10){
myPCs <<- var_explained_df
}else{
myPCs <<- var_explained_df[1:10, ]    # Subset the first 10 PCs
}
# Create a scree plot.
require(ggplot2)
ggplot(myPCs, aes(x = PC, y = var_explained*100)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = 1:nrow(myPCs)) +
labs(x = "Number of PCs",
y = "Variance explained by PCs (%)") +
theme_bw(base_size = 13) +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ) ) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
theme(aspect.ratio = 0.9)
}
# Import source code to run the analyses to follow.
# source("lib/specify_dir_and_check_col.R")
# source("lib/prep_data_for_clustering.R")
source("lib/PCA.R")
ggplot2::theme_set(theme_bw(base_size = 2))
# Create a scree plot.
screep <- LineScreePlot(pca.data = pca_input, pca.result = scaled_pca)
screep
# Create a biplot.
# A biplot with the individuals as black dots and variables labelled.
biplotdots <- BiplotDots(pca.result = scaled_pca, pca.data = pca_input, alpha = 0.5)
biplotdots
# ---------------------------------------------------------------------------------------------------------------
# Function to create a biplot with the individuals as black dots.
BiplotDots <- function(pca.result = scaled_pca, pca.data = pca_input, alpha=1){
require(ggfortify) # Need ggfortify packge to use 'autoplot'.
ggplot2::theme_set(theme_bw(base_size = 12))
autoplot(object = pca.result, data = pca.data,
loadings = T, loadings.label = T, loadings.colour = 'pink',
loadings.label.size=3, alpha=alpha) +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ) ) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
theme(aspect.ratio = 1)
}
# Create a biplot.
# A biplot with the individuals as black dots and variables labelled.
biplotdots <- BiplotDots(pca.result = scaled_pca, pca.data = pca_input, alpha = 0.5)
biplotdots
# ---------------------------------------------------------------------------------------------------------------
# Function to create a biplot with the individuals as black dots.
BiplotDots <- function(pca.result = scaled_pca, pca.data = pca_input, alpha=1){
require(ggfortify) # Need ggfortify packge to use 'autoplot'.
ggplot2::theme_set(theme_bw(base_size = 14))
autoplot(object = pca.result, data = pca.data,
loadings = T, loadings.label = T, loadings.colour = 'pink',
loadings.label.size=3, alpha=alpha) +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ) ) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
theme(aspect.ratio = 1)
}
# Create a biplot.
# A biplot with the individuals as black dots and variables labelled.
biplotdots <- BiplotDots(pca.result = scaled_pca, pca.data = pca_input, alpha = 0.5)
biplotdots
# A biplot with the individuals labeled.
biplotlabeled <- BiplotLabeled(pca.result=scaled_pca, pca.data=pca_input, individuals.label = T)
biplotlabeled
# A biplot with the individuals labeled without the variables' arrows.
biplotlabeledwoarrows <- BiplotLabeledwoArrows(pca.result=scaled_pca, pca.data=pca_input,
individuals.label=T)
biplotlabeledwoarrows
# Plot the directions of the variables.
directions <- BiplotLabeled(pca.result=scaled_pca, pca.data=pca_input, individuals.label=F)
directions
# Plot the contribution of the variables to a given PC.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC1",
positive.color="green2", negative.color="grey70", sort.variables = T)
loadings_plot
ggsave("results/PCA_results/temporary/total_d12_mean_QC1000_screep.pdf", screep, device="pdf", width=5, height=5, units="in")
# Create a biplot.
# A biplot with the individuals as black dots and variables labelled.
biplotdots <- BiplotDots(pca.result = scaled_pca, pca.data = pca_input, alpha = 0.5)
biplotdots
ggsave("results/PCA_results/temporary/total_d12_mean_QC1000_biplotdots.pdf", biplotdots, device="pdf", width=5, height=5, units="in")
# A biplot with the individuals labeled.
biplotlabeled <- BiplotLabeled(pca.result=scaled_pca, pca.data=pca_input, individuals.label = T)
biplotlabeled
ggsave("results/PCA_results/temporary/total_d12_mean_QC1000_biplotlabeled.pdf", biplotlabeled, device="pdf", width=5, height=5, units="in")
# ---------------------------------------------------------------------------------------------------------------
# Function to create a biplot with the individuals as black dots.
BiplotDots <- function(pca.result = scaled_pca, pca.data = pca_input, alpha=1){
require(ggfortify) # Need ggfortify packge to use 'autoplot'.
autoplot(object = pca.result, data = pca.data,
loadings = T, loadings.label = T, loadings.colour = 'pink',
loadings.label.size=3, alpha=alpha) +
scale_y_continuous(expand = expansion(mult=c(0.1, 0.1))) + # give some space on the lower and the upper limits of Y (to fit text).
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ) ) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
theme(aspect.ratio = 1)
}
# Create a biplot.
# A biplot with the individuals as black dots and variables labelled.
biplotdots <- BiplotDots(pca.result = scaled_pca, pca.data = pca_input, alpha = 0.5)
biplotdots
# ---------------------------------------------------------------------------------------------------------------
# Function to create a biplot with the individuals as black dots.
BiplotDots <- function(pca.result = scaled_pca, pca.data = pca_input, alpha=1){
require(ggfortify) # Need ggfortify packge to use 'autoplot'.
autoplot(object = pca.result, data = pca.data,
loadings = T, loadings.label = T, loadings.colour = 'pink',
loadings.label.size=3, alpha=alpha) +
scale_x_continuous(expand = expansion(mult=c(0.1, 0.1))) + # give some space on the lower and the upper limits of X (to fit text).
scale_y_continuous(expand = expansion(mult=c(0.1, 0.1))) + # give some space on the lower and the upper limits of Y (to fit text).
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ) ) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
theme(aspect.ratio = 1)
}
# Create a biplot.
# A biplot with the individuals as black dots and variables labelled.
biplotdots <- BiplotDots(pca.result = scaled_pca, pca.data = pca_input, alpha = 0.5)
biplotdots
ggsave("results/PCA_results/temporary/total_d12_mean_QC1000_biplotdots.pdf", biplotdots, device="pdf", width=5, height=5, units="in")
# ---------------------------------------------------------------------------------------------------------------
# Function to create a biplot with the individuals labeled and without the variables' arrows.
BiplotLabeledwoArrows <- function(pca.result = scaled_pca, pca.data = pca_input,
individuals.label = T){
require(ggfortify)
autoplot(object = pca.result, data = pca.data,
label = individuals.label, label.size = 3, shape =FALSE,
loadings = F, loadings.label = F, alpha=alpha) +
scale_x_continuous(expand = expansion(mult=c(0.1, 0.1))) + # give some space on the lower and the upper limits of X (to fit text).
scale_y_continuous(expand = expansion(mult=c(0.1, 0.1))) + # give some space on the lower and the upper limits of Y (to fit text).
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ) ) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
theme(aspect.ratio = 1)
}
# ---------------------------------------------------------------------------------------------------------------
# Function to create a biplot with the individuals labeled.
BiplotLabeled <- function(pca.result = scaled_pca, pca.data = pca_input, individuals.label = TRUE){
require(ggfortify)
autoplot(object = pca.result, data = pca.data,
label = individuals.label, label.size = 3, shape =FALSE,
loadings = T, loadings.label = T, loadings.colour = 'pink',
loadings.label.size=3) +
scale_x_continuous(expand = expansion(mult=c(0.1, 0.1))) + # give some space on the lower and the upper limits of X (to fit text).
scale_y_continuous(expand = expansion(mult=c(0.1, 0.1))) + # give some space on the lower and the upper limits of Y (to fit text).
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ) ) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
theme(aspect.ratio = 1)
}
# A biplot with the individuals labeled.
biplotlabeled <- BiplotLabeled(pca.result=scaled_pca, pca.data=pca_input, individuals.label = T)
biplotlabeled
ggsave("results/PCA_results/temporary/total_d12_mean_QC1000_biplotlabeled.pdf", biplotlabeled, device="pdf", width=5, height=5, units="in")
# A biplot with the individuals labeled.
biplotlabeled <- BiplotLabeled(pca.result=scaled_pca, pca.data=pca_input, individuals.label = T)
biplotlabeled
ggsave("results/PCA_results/temporary/total_d12_mean_QC1000_biplotlabeled.pdf", biplotlabeled, device="pdf", width=5, height=5, units="in")
# A biplot with the individuals labeled without the variables' arrows.
biplotlabeledwoarrows <- BiplotLabeledwoArrows(pca.result=scaled_pca, pca.data=pca_input,
individuals.label=T)
biplotlabeledwoarrows
ggsave("results/PCA_results/temporary/total_d12_mean_QC1000_biplotlabeledwoarrows.pdf", biplotlabeledwoarrows, device="pdf", width=5, height=5, units="in")
# Plot the directions of the variables.
directions <- BiplotLabeled(pca.result=scaled_pca, pca.data=pca_input, individuals.label=F)
directions
directions
ggsave("results/PCA_results/temporary/total_d12_mean_QC1000_directions.pdf", directions, device="pdf", width=5, height=5, units="in")
# Plot the contribution of the variables to a given PC.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC1",
positive.color="green2", negative.color="grey70", sort.variables = T)
loadings_plot
ggsave("results/PCA_results/temporary/total_d12_mean_QC1000_loadings_PC1.pdf", loadings_plot, device="pdf", width=8, height=4.8, units="in")
# Plot the contribution of the variables to a given PC.
LoadingsPlot(pca.result=scaled_pca,  whichPC="PC2",
positive.color="green2", negative.color="grey70", sort.variables = T)
loadings_plot
ggsave("results/PCA_results/temporary/total_d12_mean_QC1000_loadings_PC2.pdf", loadings_plot, device="pdf", width=8, height=4.8, units="in")
# ---------------------------------------------------------------------------------------------------------------
# Save the variance explained by each PC as a .txt file.
# Change the file name as necessary.
SaveVarExplained(pca.data = pca_input, pca.result = scaled_pca,
out.fn = "results/PCA_results/temporary/total_d12_mean_QC1000_PC_var_explained.txt")
# ---------------------------------------------------------------------------------------------------------------
# Calculate loadings of each PC to the variables and
# save it as a txt file in the results folder.
# Change the file name as necessary.
SaveLoadings(pca.result=scaled_pca,
out.fn = "results/PCA_results/temporary/total_d12_mean_QC1000_PC_loadings.txt")
SaveInputAndPCs(input = "eg_data/NHANES/NHANES1516_total_d12_mean_QC_1000sampled.txt",
pca.results = scaled_pca,
out.fn = "results/PCA_results/temporary/total_d12_mean_QC1000_input_PCs.txt")
