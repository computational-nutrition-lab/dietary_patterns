out
#stargraph
# Variation interquartil range: Q75 and Q25
plot(out,ã€€variation="IQR")
#endgraph
out<-LSD.test(model,"virus",p.adj="hommel",console=TRUE)
plot(out,variation="SD") # variation standard deviation
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t") # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
head(mydata)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t") # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
head(mydata)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t", header = T) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
head(mydata)
mydata
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t", header = T) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
head(mydata)
mydata
# Reorder factor if necessary
# mydata$V1 = factor(mydata$V1, levels = c("Current", "Previous", "Considered"))
mydata$V1 = factor(mydata$V1, levels = c("Current", "Previous", "Considered", "Never"))
mydata$V1 = factor(mydata$V1, levels = c("Current", "Previous", "Considered"))
# write.table(mycol, "clipboard", sep="\t")
head(mydata)
# Reorder factor if necessary
mydata$User_status = factor(mydata$V1, levels = c("Current", "Previous", "Considered"))
# Reorder factor if necessary
mydata$User_status = factor(mydata$User_status, levels = c("Current", "Previous", "Considered"))
twoway = table(mydata$`User_status`, mydata$Quality_vary)
twoway = table(mydata$`User_status`, mydata$Quality_vary)
twoway
table(mydata$Quality_vary)
# write.table(mycol, "clipboard", sep="\t")
head(mydata)
table(mydata$Vary_by_supplier)
table(mydata$Variation_difficult)
table(mydata$Universal_spec)
colnames(mydata)
table(mydata$Availability_changed)
table(mydata$Universal_spec)
table(mydata$Gluten)
table(mydata$Lectin)
table(mydata$Is_there_supplier)
table(mydata$Is_cost_critical)
table(mydata$Is_supply_enough)
# Reorder factor if necessary
mydata$User_status         = factor(mydata$User_status, levels = c("Current", "Previous", "Considered"))
mydata$Quality_vary        = factor(mydata$Quality_vary, levels = c("Yes", "Sometimes", "No", "Do not know" ))
mydata$Vary_by_supplier    = factor(mydata$Vary_by_supplier, levels = c("Yes", "Sometimes", "No", "Do not know", "We only purchase from one supplier"))
mydata$Variation_difficult = factor(mydata$Variation_difficult, levels = c("Yes", "Sometimes", "No", "Do not know" ))
mydata$Universal_spec      = factor(mydata$Universal_spec, levels = c("Yes", "Sometimes", "No", "Do not know" ))
mydata$Gluten              = factor(mydata$Gluten, levels = c("Yes", "Sometimes", "No", "Do not know" ))
mydata$Lectin              = factor(mydata$Lectin, levels = c("Yes", "Sometimes", "No", "Do not know" ))
mydata$Is_there_supplier = factor(mydata$Is_there_supplier, levels = c("Yes", "Sometimes", "No", "Do not know" ))
mydata$Is_cost_critical  = factor(mydata$Is_cost_critical, levels = c("Yes", "Sometimes", "No", "Do not know" ))
mydata$Is_supply_enough  = factor(mydata$Is_supply_enough, levels = c("Yes", "Sometimes", "No", "Do not know" ))
mydata$Availability_changed = factor(mydata$Availability_changed, levels = c("More available","Same as before", "Less available",  "Do not know" ))
table(mydata$Quality_vary)
twoway = table(mydata$`User_status`, mydata$Quality_vary)
twoway
ttwoway = t(twoway)
ttwoway
ttwoway$Curr_pct <- ttwoway$Current/8*100
is(ttwoway)
ttwoway = as.data.frame(t(twoway))
ttwoway$Curr_pct <- ttwoway$Current/8*100
ttwoway
twoway
ttwoway = t(twoway)
ttwoway
tttwoway = as.data.frame(ttwoway)
tttwoway
tttwoway = as.data.frame.matrix(ttwoway)
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway
mydata$Quality_vary        = factor(mydata$Quality_vary, levels = c("Yes", "Sometimes", "No", "Do not know", "No answer" ))
mydata$Vary_by_supplier    = factor(mydata$Vary_by_supplier, levels = c("Yes", "Sometimes", "No", "Do not know", "We only purchase from one supplier", "No answer"))
mydata$Variation_difficult = factor(mydata$Variation_difficult, levels = c("Yes", "Sometimes", "No", "Do not know" , "No answer"))
mydata$Universal_spec      = factor(mydata$Universal_spec, levels = c("Yes", "Sometimes", "No", "Do not know" , "No answer"))
mydata$Gluten              = factor(mydata$Gluten, levels = c("Yes", "Sometimes", "No", "Do not know" , "No answer"))
mydata$Lectin              = factor(mydata$Lectin, levels = c("Yes", "Sometimes", "No", "Do not know" , "No answer"))
mydata$Is_there_supplier = factor(mydata$Is_there_supplier, levels = c("Yes", "Sometimes", "No", "Do not know" , "No answer"))
mydata$Is_cost_critical  = factor(mydata$Is_cost_critical, levels = c("Yes", "Sometimes", "No", "Do not know" , "No answer"))
mydata$Is_supply_enough  = factor(mydata$Is_supply_enough, levels = c("Yes", "Sometimes", "No", "Do not know" , "No answer"))
mydata$Availability_changed = factor(mydata$Availability_changed, levels = c("More available","Same as before", "Less available",  "Do not know" , "No answer"
))
table(mydata$Quality_vary)
colnames(mydata)
twoway = table(mydata$`User_status`, mydata$Quality_vary)
twoway
ttwoway = t(twoway)
tttwoway = as.data.frame.matrix(ttwoway)
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway$Prev_pct <- tttwoway$Previous/4*100
tttwoway$Considered_pct <- tttwoway$Considered/9*100
colSums(tttwoway)
tttwoway
# Loop through several questions: summarize by user type. ========================================================
mydata = read.table(file="clipboard", sep="\t", header = T) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
head(mydata)
# Loop through several questions: summarize by user type. ========================================================
mydata = read.table(file="clipboard", sep="\t", header = T) # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
head(mydata)
nrow(mydata)
mydata$User_status         = factor(mydata$User_status, levels = c("Current", "Previous", "Considered"))
mydata$Quality_vary        = factor(mydata$Quality_vary, levels = c("Yes", "Sometimes", "No", "Do not know", "No answer" ))
mydata$Vary_by_supplier    = factor(mydata$Vary_by_supplier, levels = c("Yes", "Sometimes", "No", "Do not know", "We only purchase from one supplier", "No answer"))
mydata$Variation_difficult = factor(mydata$Variation_difficult, levels = c("Yes", "Sometimes", "No", "Do not know" , "No answer"))
mydata$Universal_spec      = factor(mydata$Universal_spec, levels = c("Yes", "Sometimes", "No", "Do not know" , "No answer"))
mydata$Gluten              = factor(mydata$Gluten, levels = c("Yes", "Sometimes", "No", "Do not know" , "No answer"))
mydata$Lectin              = factor(mydata$Lectin, levels = c("Yes", "Sometimes", "No", "Do not know" , "No answer"))
mydata$Is_there_supplier = factor(mydata$Is_there_supplier, levels = c("Yes", "Sometimes", "No", "Do not know" , "No answer"))
mydata$Is_cost_critical  = factor(mydata$Is_cost_critical, levels = c("Yes", "Sometimes", "No", "Do not know" , "No answer"))
mydata$Is_supply_enough  = factor(mydata$Is_supply_enough, levels = c("Yes", "Sometimes", "No", "Do not know" , "No answer"))
mydata$Availability_changed = factor(mydata$Availability_changed, levels = c("More available","Same as before", "Less available",  "Do not know" , "No answer"))
table(mydata$Quality_vary)
colnames(mydata)
twoway = table(mydata$`User_status`, mydata$Quality_vary)
twoway
ttwoway = t(twoway)
tttwoway = as.data.frame.matrix(ttwoway)
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway$Prev_pct <- tttwoway$Previous/4*100
tttwoway$Considered_pct <- tttwoway$Considered/9*100
tttwoway
tttwowaysum = rbind(tttwoway, colSums(tttwoway))
tttwowaysum
tttwowaysum[7,1]
tttwowaysum[6,1] <-
# Count satisfactory/challenges categories. ===========================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
tttwowaysum[6,1
]
tttwowaysum[6,1]
rownames(tttwowaysum)[length(rownames(tttwowaysum))] <- "Total"  # Change the last rowname
tttwowaysum
freqtable <- tttwowaysum[, c(1,4,2,6,3,7)] # change column orders.
freqtable <- tttwowaysum[, c(1,4,2,5,3,6)] # change column orders.
freqtable
write.table(freqtable,"clipboard", sep = "\t")
twoway = table(mydata$`User_status`, mydata[, 2])
twoway
twoway = table(mydata$`User_status`, mydata[, 3])
twoway
colnames(mydata)
twoway = table(mydata$`User_status`, mydata$Vary_by_supplier)
twoway
ttwoway = t(twoway)
tttwoway = as.data.frame.matrix(ttwoway)
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway$Prev_pct <- tttwoway$Previous/4*100
tttwoway$Considered_pct <- tttwoway$Considered/9*100
tttwoway
tttwowaysum = rbind(tttwoway, colSums(tttwoway))
tttwowaysum
rownames(tttwowaysum)[length(rownames(tttwowaysum))] <- "Total"  # Change the last rowname
freqtable <- tttwowaysum[, c(1,4,2,5,3,6)] # change column orders.
write.table(freqtable,"clipboard", sep = "\t")
twoway = table(mydata$`User_status`, mydata$Variation_difficult)
twoway
ttwoway = t(twoway)
tttwoway = as.data.frame.matrix(ttwoway)
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway$Prev_pct <- tttwoway$Previous/4*100
tttwoway$Considered_pct <- tttwoway$Considered/9*100
tttwoway
tttwowaysum = rbind(tttwoway, colSums(tttwoway))
tttwowaysum
rownames(tttwowaysum)[length(rownames(tttwowaysum))] <- "Total"  # Change the last rowname
freqtable <- tttwowaysum[, c(1,4,2,5,3,6)] # change column orders.
write.table(freqtable,"clipboard", sep = "\t")
twoway = table(mydata$`User_status`, mydata$Universal_spec)
twoway
# [1] "User_status"          "Quality_vary"         "Vary_by_supplier"     "Variation_difficult"
# [5] "Universal_spec"       "Gluten"               "Lectin"               "Is_there_supplier"
# [9] "Is_cost_critical"     "Is_supply_enough"     "Availability_changed"
table(Universal_spec)
# [1] "User_status"          "Quality_vary"         "Vary_by_supplier"     "Variation_difficult"
# [5] "Universal_spec"       "Gluten"               "Lectin"               "Is_there_supplier"
# [9] "Is_cost_critical"     "Is_supply_enough"     "Availability_changed"
table(mydata$Universal_spec)
twoway = table(mydata$`User_status`, mydata$Universal_spec)
twoway
ttwoway = t(twoway)
tttwoway = as.data.frame.matrix(ttwoway)
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway$Prev_pct <- tttwoway$Previous/4*100
tttwoway$Considered_pct <- tttwoway$Considered/9*100
tttwoway
tttwowaysum = rbind(tttwoway, colSums(tttwoway))
tttwowaysum
rownames(tttwowaysum)[length(rownames(tttwowaysum))] <- "Total"  # Change the last rowname
freqtable <- tttwowaysum[, c(1,4,2,5,3,6)] # change column orders.
write.table(freqtable,"clipboard", sep = "\t")
# [1] "User_status"          "Quality_vary"         "Vary_by_supplier"     "Variation_difficult"
# [5] "Universal_spec"       "Gluten"               "Lectin"               "Is_there_supplier"
# [9] "Is_cost_critical"     "Is_supply_enough"     "Availability_changed"
table(mydata$Gluten)
twoway = table(mydata$`User_status`, mydata$Gluten)
twoway
ttwoway = t(twoway)
tttwoway = as.data.frame.matrix(ttwoway)
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway$Prev_pct <- tttwoway$Previous/4*100
tttwoway$Considered_pct <- tttwoway$Considered/9*100
tttwoway
tttwowaysum = rbind(tttwoway, colSums(tttwoway))
tttwowaysum
rownames(tttwowaysum)[length(rownames(tttwowaysum))] <- "Total"  # Change the last rowname
freqtable <- tttwowaysum[, c(1,4,2,5,3,6)] # change column orders.
write.table(freqtable,"clipboard", sep = "\t")
# [1] "User_status"          "Quality_vary"         "Vary_by_supplier"     "Variation_difficult"
# [5] "Universal_spec"       "Gluten"               "Lectin"               "Is_there_supplier"
# [9] "Is_cost_critical"     "Is_supply_enough"     "Availability_changed"
table(mydata$Lectin)
twoway = table(mydata$`User_status`, mydata$Lectin)
twoway
ttwoway = t(twoway)
tttwoway = as.data.frame.matrix(ttwoway)
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway$Prev_pct <- tttwoway$Previous/4*100
tttwoway$Considered_pct <- tttwoway$Considered/9*100
tttwoway
tttwowaysum = rbind(tttwoway, colSums(tttwoway))
tttwowaysum
rownames(tttwowaysum)[length(rownames(tttwowaysum))] <- "Total"  # Change the last rowname
freqtable <- tttwowaysum[, c(1,4,2,5,3,6)] # change column orders.
write.table(freqtable,"clipboard", sep = "\t")
twoway = table(mydata$`User_status`, mydata$Is_there_supplier)
twoway
ttwoway = t(twoway)
tttwoway = as.data.frame.matrix(ttwoway)
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway$Prev_pct <- tttwoway$Previous/4*100
tttwoway$Considered_pct <- tttwoway$Considered/9*100
tttwoway
tttwowaysum = rbind(tttwoway, colSums(tttwoway))
tttwowaysum
rownames(tttwowaysum)[length(rownames(tttwowaysum))] <- "Total"  # Change the last rowname
freqtable <- tttwowaysum[, c(1,4,2,5,3,6)] # change column orders.
write.table(freqtable,"clipboard", sep = "\t")
twoway = table(mydata$`User_status`, mydata$Is_cost_critical)
twoway
ttwoway = t(twoway)
tttwoway = as.data.frame.matrix(ttwoway)
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway$Prev_pct <- tttwoway$Previous/4*100
tttwoway$Considered_pct <- tttwoway$Considered/9*100
tttwoway
tttwowaysum = rbind(tttwoway, colSums(tttwoway))
tttwowaysum
rownames(tttwowaysum)[length(rownames(tttwowaysum))] <- "Total"  # Change the last rowname
freqtable <- tttwowaysum[, c(1,4,2,5,3,6)] # change column orders.
write.table(freqtable,"clipboard", sep = "\t")
twoway = table(mydata$`User_status`, mydata$Is_supply_enough)
twoway
ttwoway = t(twoway)
tttwoway = as.data.frame.matrix(ttwoway)
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway$Prev_pct <- tttwoway$Previous/4*100
tttwoway$Considered_pct <- tttwoway$Considered/9*100
tttwoway
tttwowaysum = rbind(tttwoway, colSums(tttwoway))
tttwowaysum
rownames(tttwowaysum)[length(rownames(tttwowaysum))] <- "Total"  # Change the last rowname
freqtable <- tttwowaysum[, c(1,4,2,5,3,6)] # change column orders.
write.table(freqtable,"clipboard", sep = "\t")
twoway = table(mydata$`User_status`, mydata$Availability_changed)
twoway
ttwoway = t(twoway)
tttwoway = as.data.frame.matrix(ttwoway)
tttwoway
tttwoway$Curr_pct <- tttwoway$Current/8*100
tttwoway$Prev_pct <- tttwoway$Previous/4*100
tttwoway$Considered_pct <- tttwoway$Considered/9*100
tttwoway
tttwowaysum = rbind(tttwoway, colSums(tttwoway))
tttwowaysum
rownames(tttwowaysum)[length(rownames(tttwowaysum))] <- "Total"  # Change the last rowname
freqtable <- tttwowaysum[, c(1,4,2,5,3,6)] # change column orders.
write.table(freqtable,"clipboard", sep = "\t")
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
sortedbbb = bbb[ order(bbb$Freq, decreasing = T), ]
sortedbbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
sortedbbb = bbb[ order(bbb$Freq, decreasing = T), ]
sortedbbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t")
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t")
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main.wd <- file.path(getwd())
# Import source code to run the analyses to follow.
source("lib/load_and_check.R")
source("lib/PCA.R")
# Load example totals data ===============================================================
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
# Load the totals.csv
totals <- read.table("Totals_to_use.txt",  sep = "\t", header = T)
# Come back to the main directory
setwd(main.wd)
# ========================================================================================
#
# ========================================================================================
# Specify the plot theme and base font size to use.
library(ggplot2)
ggplot2::theme_set(theme_bw(base_size = 14))
# Subset nutrition data.
# The columns specified as start.col, end.col, and all columns in between will be selected.
# Nutrient analysis   --> start.col = "PROT",    end.col = "B12_ADD"
# Food items analysis --> start.col = "F_TOTAL", end.col = "A_DRINKS"
SubsetColumns(data = totals, start.col = "PROT", end.col = "B12_ADD")
# Pick up only the columns with non-zero variance, in order to do a PCA.
# The removed columns will be shown if any.
KeepNonZeroVarColumns(data = subsetted)
# Use dietary data.
# Calculate k-means, start with 4.
km.results <- kmeans(x = subsetted_non0var, centers = 4, nstart = 25)
# Calculate the means of each variable for each cluster.
aggregate(subsetted_non0var, by=list(cluster=km.results$cluster), mean)
# Add the cluster assignment to the original (subsetted) data.
dd <- cbind(subsetted_non0var, cluster = km.results$cluster)
# Take a look
dd$cluster
# Use factoextra package for now, but I could just use ggplot2.
factoextra::fviz_cluster(km.results,
data = subsetted_non0var,
ellipse = T, ellipse.alpha = 0.1,
ggtheme = theme_bw(base_size = 10),
repel = F, labelsize = 10)
# returns vector of cluster ids for clusters with internal
# complete-linkage correlation of min.cor
"cluster.by.correlation" <- function(x, min.cor=0.75){
#     library('fastcluster')
cc <- cor(x, use='pairwise.complete.obs', method='pear')
if(ncol(x) == 379) browser()
cc <- as.dist(1-cc)
hc <- hclust(cc)
res <- cutree(hc,h=1-min.cor)
names(res) <- colnames(x)
return(res)
}
# returns vector of cluster ids for clusters with internal
# complete-linkage correlation of min.cor
#
# by default, chooses cluster reps as highest-variance member
# if select.rep.fcn=mean
"collapse.by.correlation" <- function(x, min.cor=.5, select.rep.fcn=c('var','mean','lowest.mean',
'longest.name', 'shortest.name')[2],
verbose=FALSE){
if(verbose) cat('Clustering',ncol(x),'features...')
gr <- cluster.by.correlation(x, min.cor=min.cor)
if(verbose) cat('getting means...')
if(select.rep.fcn == 'mean'){
v <- apply(x,2,function(xx) mean(xx,na.rm=TRUE))
} else if(select.rep.fcn == 'lowest.mean'){
v <- apply(x,2,function(xx) -mean(xx,na.rm=TRUE))
} else if(select.rep.fcn == 'longest.name'){
v <- nchar(colnames(x))
} else if(select.rep.fcn == 'shortest.name'){
v <- -nchar(colnames(x))
} else {
v <- apply(x,2,function(xx) var(xx,use='complete.obs'))
}
if(verbose) cat('choosing reps...')
reps <- sapply(split(1:ncol(x),gr),function(xx) xx[which.max(v[xx])])
if(verbose)
cat(sprintf('collapsed from %d to %d.\n',ncol(x), length(reps)))
return(list(reps=reps, groups=gr))
}
data(iris)
data(ozone)
head(dd)
head(subsetted_non0var)
cluster.by.correlation(x=subsetted_non0var, min.cor = 0.75)
corr(subsetted_non0var$PROT, subsetted_non0var$PHOS)
cor(subsetted_non0var$PROT, subsetted_non0var$PHOS)
plot(subsetted_non0var$PROT, subsetted_non0var$PHOS)
plot(subsetted_non0var$PROT, subsetted_non0var$CALC)
plot(subsetted_non0var$IRON, subsetted_non0var$FOLA)
cor(subsetted_non0var$IRON, subsetted_non0var$FOLA)
collapse.by.correlation(x=subsetted_non0var,
min.cor=0.5,
select.rep.fcn = 'mean')
collapse.by.correlation(x=subsetted_non0var,
min.cor=0.5,
select.rep.fcn = 'var')
?cutree
res
collapse.by.correlation(x=subsetted_non0var,
min.cor=0.5,
select.rep.fcn = 'var')
collapse.by.correlation(x=subsetted_non0var,
min.cor=0.5,
select.rep.fcn = 'mean', verbose = T)
# returns vector of cluster ids for clusters with internal
# complete-linkage correlation of min.cor
"cluster.by.correlation" <- function(x, min.cor=0.75){
#     library('fastcluster')
cc <<- cor(x, use='pairwise.complete.obs', method='pear')
if(ncol(x) == 379) browser()
cc <<- as.dist(1-cc)
hc <<- hclust(cc)
res <<- cutree(hc,h=1-min.cor)
names(res) <<- colnames(x)
return(res)
}
cluster.by.correlation(x=subsetted_non0var,
min.cor = 0.75)
cc
is(cc)
head(cc)
length(cc)
hc
is(hc)
View(hc)
cor(subsetted_non0var, use = 'pairwise.complete.obs', method = 'pearson')
mycc <- cor(subsetted_non0var, use = 'pairwise.complete.obs', method = 'pearson')
myccasdist <- as.dist(1-mycc)
head(mycc)
head(mycc,1)
head(myccasdist,1)
myccasdist <- as.dist(1-mycc)
head(myccasdist,1)
head(myccasdist)
myhc <- hclust(mycc)
mycc <- cor(x = subsetted_non0var, use = 'pairwise.complete.obs', method = 'pearson')
head(mycc,1)
mycc <- as.dist(1-mycc)
head(mycc)
myhc <- hclust(mycc)
myhc
myhc <- hclust(mycc)
cutree(myhc, h=0.35)
cutree(myhc, h=0.5)
res05 <- cutree(myhc, h=0.5)
names(res05) <- colnames(res05)
res05
