Occ_Names <<- aggregate(subsetted2[, 4] ~ subsetted2[, 1] + subsetted2[, 2] +  subsetted2[, 3]
data=items.data,
FUN=mean)
}
subsetted2 <<- Items_raw[, c(User.Name, Recall.No, Occ.No, Occ.Name)]
AddOccNames <- function(items.data=Items_raw, User.Name='UserName',
Recall.No='RecallNo', Occ.No='Occ_No', Occ.Name='Occ_Name'  ){
# Occ_Name ~ User.Name + Recall.No + Occ.No,
subsetted2 <<- Items_raw[, c(User.Name, Recall.No, Occ.No, Occ.Name)]
Occ_Names <<- aggregate(subsetted2[, 4] ~ subsetted2[, 1] + subsetted2[, 2] +  subsetted2[, 3],
data=items.data,
FUN=mean)
}
AddOccNames()
head(Occ_Names, 10)
View(Occ_Names)
AddOccNames <- function(items.data=Items_raw, User.Name='UserName',
Recall.No='RecallNo', Occ.No='Occ_No', Occ.Name='Occ_Name'  ){
# Occ_Name ~ User.Name + Recall.No + Occ.No,
subsetted2 <<- Items_raw[, c(User.Name, Recall.No, Occ.No, Occ.Name)]
Occ_Names <<- aggregate(subsetted2[, 4] ~ subsetted2[, 1] + subsetted2[, 2] +  subsetted2[, 3],
data=items.data,
FUN=mean)
colnames(Occ_Names) <- c('UserName', 'RecallNo', 'Occ_No', 'Occ_Name')
}
AddOccNames()
head(Occ_Names, 10)
AddOccNames()
head(Occ_Names, 10)
AddOccNames <- function(items.data=Items_raw, User.Name='UserName',
Recall.No='RecallNo', Occ.No='Occ_No', Occ.Name='Occ_Name'  ){
# Occ_Name ~ User.Name + Recall.No + Occ.No,
subsetted2 <<- Items_raw[, c(User.Name, Recall.No, Occ.No, Occ.Name)]
Occ_Names <<- aggregate(subsetted2[, 4] ~ subsetted2[, 1] + subsetted2[, 2] +  subsetted2[, 3],
data=items.data,
FUN=mean)
colnames(Occ_Names) <<- c('UserName', 'RecallNo', 'Occ_No', 'Occ_Name')
}
AddOccNames()
head(Occ_Names, 10)
AddOccNames <- function(items.data=Items_raw, User.Name='UserName',
Recall.No='RecallNo', Occ.No='Occ_No', Occ.Name='Occ_Name'  ){
subsetted2 <<- Items_raw[, c(User.Name, Recall.No, Occ.No, Occ.Name)]
Occ_Names <<- aggregate(subsetted2[, 4] ~ subsetted2[, 1] + subsetted2[, 2] +  subsetted2[, 3],
data=items.data,
FUN=mean)
colnames(Occ_Names) <<- c('UserName', 'RecallNo', 'Occ_No', 'Occ_Name')
# Add a unique ID for each line for merging.
Occ_Names$User_Day_OccNo <<- paste0(Occ_Names$UserName, "_",
Occ_Names$RecallNo, "_",
Occ_Names$Occ_No)
}
AddOccNames()
head(Occ_Names, 10)
AddOccNames <- function(items.data=Items_raw, User.Name='UserName',
Recall.No='RecallNo', Occ.No='Occ_No', Occ.Name='Occ_Name'  ){
subsetted2 <<- Items_raw[, c(User.Name, Recall.No, Occ.No, Occ.Name)]
Occ_Names <<- aggregate(subsetted2[, 4] ~ subsetted2[, 1] + subsetted2[, 2] +  subsetted2[, 3],
data=items.data,
FUN=mean)
colnames(Occ_Names) <<- c('UserName', 'RecallNo', 'Occ_No', 'Occ_Name')
# Add a unique ID for each line for merging.
Occ_Names$User_Day_OccNo <<- paste0(Occ_Names$UserName, "_",
Occ_Names$RecallNo, "_",
Occ_Names$Occ_No)
# Take only User_Day_OccNo and Occ_Name.
Occ_Names_2 <<- Occ_Names[, c("User_Day_OccNo", "Occ_Name")]
# Make a reference table that has Occ_Name and corresponding types.
Occ_Names_ref <<- data.frame(Occ_Name=seq(1:8),
Occ_In_Words=c("Breakfast", "Brunch",
"Lunch",     "Dinner",
"Supper",    "Snack",
"Just a drink", "Just a supplement" ))
}
AddOccNames()
head(Occ_Names_ref, 10)
head(Occ_Names_2, 10)
View(Occ_Names_2)
AddOccNames <- function(items.data=Items_raw, User.Name='UserName',
Recall.No='RecallNo', Occ.No='Occ_No', Occ.Name='Occ_Name'  ){
subsetted2 <<- Items_raw[, c(User.Name, Recall.No, Occ.No, Occ.Name)]
Occ_Names <<- aggregate(subsetted2[, 4] ~ subsetted2[, 1] + subsetted2[, 2] +  subsetted2[, 3],
data=items.data,
FUN=mean)
colnames(Occ_Names) <<- c('UserName', 'RecallNo', 'Occ_No', 'Occ_Name')
# Add a unique ID for each line for merging.
Occ_Names$User_Day_OccNo <<- paste0(Occ_Names$UserName, "_",
Occ_Names$RecallNo, "_",
Occ_Names$Occ_No)
# Take only User_Day_OccNo and Occ_Name.
Occ_Names_2 <<- Occ_Names[, c("User_Day_OccNo", "Occ_Name")]
# Make a reference table that has Occ_Name and corresponding types.
Occ_Names_ref <<- data.frame(Occ_Name=seq(1:8),
Occ_In_Words=c("Breakfast", "Brunch",
"Lunch",     "Dinner",
"Supper",    "Snack",
"Just a drink", "Just a supplement" ))
# Combine!
# Match the Occ_Names with the Occ_Names_ref (~VLOOKUP)
Occ_Names_and_Words <<- merge(x=Occ_Names_2, y=Occ_Names_ref, by="Occ_Name", all.x=T)
# Combine the 2 tables so that the sums of each occasion, occ numbers, and occ names in word
#  will be in one table.
Sum_by_User_Day_Occ <<- merge(x=Items_by_User_Occ, y=Occ_Names_and_Words, by='User_Day_OccNo', all.x=T)
}
AddOccNames()
head(Sum_by_User_Day_Occ, 10)
data(mtcars)
mtcars
str(mtcars)
aggregate(mpg ~ cyl + vs)
aggregate(mpg ~ cyl + vs, data=mtcars, FUN=mean)
subsetted <- mtcars[, c('cyl','vs', 'mpg')]
aggregate(subsetted[, 3] ~ subsetted[, 1] + subsetted[, 2])
subsetted <- mtcars[, c('cyl','vs', 'mpg')]
aggregate(subsetted[, 3] ~ subsetted[, 1] + subsetted[, 2],
data=subsetted, FUN=mean)
# Colnames say subsetted[, 1] etc., so change them.
colnames(result) <- c('cyl','vs', 'Mean mpg')
result <-  aggregate(subsetted[, 3] ~ subsetted[, 1] + subsetted[, 2],
data=subsetted, FUN=mean)
# Colnames say subsetted[, 1] etc., so change them.
colnames(result) <- c('cyl','vs', 'Mean mpg')
result
########## Need to make it into a function #############
GenerateTotals <- function(items.data=Items_raw, User.Name='UserName',
Recall.No='RecallNo',   Occ.No='Occ_No'){
# Get the index number of "FoodAmt" in dataframe items.data.
FoodAmt_Index_No  <- grep("FoodAmt", colnames(items.data))
A_DRINKS_Index_No <- grep("A_DRINKS", colnames(items.data))
# Subset necessary columns.
Items_raw3 <<- items.data[, c(User.Name, Recall.No,
FoodAmt_Index_No:A_DRINKS_Index_No)]
# Define variables to calculate Totals for.
myvar <- names(Items_raw3[, -c(1,2)])
myvar
# Create an empty list to store results.
results <- list()
}
GenerateTotals()
########## Need to make it into a function #############
GenerateTotals <- function(items.data=Items_raw, User.Name='UserName',
Recall.No='RecallNo',   Occ.No='Occ_No'){
# Get the index number of "FoodAmt" in dataframe items.data.
FoodAmt_Index_No  <- grep("FoodAmt", colnames(items.data))
A_DRINKS_Index_No <- grep("A_DRINKS", colnames(items.data))
# Subset necessary columns.
Items_raw3 <<- items.data[, c(User.Name,
Recall.No,
names(items.data)[FoodAmt_Index_No:A_DRINKS_Index_No])]
# Define variables to calculate Totals for.
myvar <- names(Items_raw3[, -c(1,2)])
myvar
# Create an empty list to store results.
results <- list()
}
GenerateTotals()
View(Items_raw3)
########## Need to make it into a function #############
GenerateTotals <- function(items.data=Items_raw, User.Name='UserName',
Recall.No='RecallNo',   Occ.No='Occ_No'){
# Get the index number of "FoodAmt" in dataframe items.data.
FoodAmt_Index_No  <- grep("FoodAmt", colnames(items.data))
A_DRINKS_Index_No <- grep("A_DRINKS", colnames(items.data))
# Subset necessary columns.
Items_raw3 <<- items.data[, c(User.Name,
Recall.No,
names(items.data)[FoodAmt_Index_No:A_DRINKS_Index_No])]
# Define variables to calculate Totals for.
myvar <<- names(Items_raw3[, -c(1,2)])
myvar
# Create an empty list to store results.
results <<- list()
}
GenerateTotals()
########## Need to make it into a function #############
GenerateTotals <- function(items.data=Items_raw, User.Name='UserName',
Recall.No='RecallNo'){
# Get the index number of "FoodAmt" in dataframe items.data.
FoodAmt_Index_No  <- grep("FoodAmt", colnames(items.data))
A_DRINKS_Index_No <- grep("A_DRINKS", colnames(items.data))
# Subset necessary columns.
Items_raw3 <<- items.data[, c(User.Name,
Recall.No,
names(items.data)[FoodAmt_Index_No:A_DRINKS_Index_No])]
# Change column names to be recognized by the loop below.
colnames(Items_raw3)[1:2] <<- c('UserName', 'RecallNo')
# Define variables to calculate Totals for.
myvar <<- names(Items_raw3[, -c(1,2)])
myvar
# Create an empty list to store results.
results <<- list()
# Calculate totals of each variable for each combination of User x Date x Occasion.
for(i in 1:length(myvar)){
if(i==1){
subsetted <- Items_raw3[, c('UserName','RecallNo', myvar[i])]
restable <- aggregate(subsetted[, 3] ~ subsetted[, 1] + subsetted[, 2],
data=subsetted, FUN = sum)
colnames(restable) <- c('UserName', 'RecallNo', paste(myvar[i]))
restable$User_Day <- paste(restable$UserName, restable$RecallNo, sep = "_")
results[[i]] <- restable
New_Totals <<- restable
}else if(i>1){
subsetted <- Items_raw3[, c('UserName','RecallNo', myvar[i])]
restable <- aggregate(subsetted[, 3] ~ subsetted[, 1] + subsetted[, 2],
data=subsetted, FUN = sum)
colnames(restable) <- c('UserName', 'RecallNo', paste(myvar[i]))
restable$User_Day <- paste(restable$UserName, restable$RecallNo, sep = "_")
restable_sub <- restable[, c(4, 3)]  # take only User_Day and means.
results[[i]] <- restable_sub
New_Totals <<- merge(New_Totals, results[[i]], by="User_Day", all=T)
# all=T takes care of missing data ... inserts NA for combinations not found
}
}
}
GenerateTotals()
head(New_Totals)
# Save as a csv file.
write.csv(New_Totals, 'New_Totals.csv')
# Use dietstudy data -----------------------------------------------------------
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
# Load the items.csv
items <- read.table("Items_to_use.txt", quote = "", sep = "\t", header = T)
# Come back to the main directory
setwd(main.wd)
colnames(items)
head(items,1)
# Use diet_study data. -----------------------------------------------------
SumByOccasion(items.data=items, User.Name='UserName',
Recall.No='RecordDayNo',   Occ.No='Occ_No')
View(Items_raw2)
View(Items_raw2)
View(Items_by_User_Occ)
AddOccNames(items.data=Items_raw, User.Name='UserName',
Recall.No='RecordDayNo', Occ.No='Occ_No', Occ.Name='Occ_Name'  )
View(subsetted2)
AddOccNames <- function(items.data=Items_raw, User.Name='UserName',
Recall.No='RecallNo', Occ.No='Occ_No', Occ.Name='Occ_Name'  ){
subsetted2 <<- items.data[, c(User.Name, Recall.No, Occ.No, Occ.Name)]
Occ_Names <<- aggregate(subsetted2[, 4] ~ subsetted2[, 1] + subsetted2[, 2] +  subsetted2[, 3],
data=items.data,
FUN=mean)
colnames(Occ_Names) <<- c('UserName', 'RecallNo', 'Occ_No', 'Occ_Name')
# Add a unique ID for each line for merging.
Occ_Names$User_Day_OccNo <<- paste0(Occ_Names$UserName, "_",
Occ_Names$RecallNo, "_",
Occ_Names$Occ_No)
# Take only User_Day_OccNo and Occ_Name.
Occ_Names_2 <<- Occ_Names[, c("User_Day_OccNo", "Occ_Name")]
# Make a reference table that has Occ_Name and corresponding types.
Occ_Names_ref <<- data.frame(Occ_Name=seq(1:8),
Occ_In_Words=c("Breakfast", "Brunch",
"Lunch",     "Dinner",
"Supper",    "Snack",
"Just a drink", "Just a supplement" ))
# Combine!
# Match the Occ_Names with the Occ_Names_ref (~VLOOKUP)
Occ_Names_and_Words <<- merge(x=Occ_Names_2, y=Occ_Names_ref, by="Occ_Name", all.x=T)
# Combine the 2 tables so that the sums of each occasion, occ numbers, and occ names in word
#  will be in one table.
Sum_by_User_Day_Occ <<- merge(x=Items_by_User_Occ, y=Occ_Names_and_Words, by='User_Day_OccNo', all.x=T)
}
AddOccNames(items.data=Items_raw, User.Name='UserName',
Recall.No='RecordDayNo', Occ.No='Occ_No', Occ.Name='Occ_Name'  )
AddOccNames(items.data=items, User.Name='UserName',
Recall.No='RecordDayNo', Occ.No='Occ_No', Occ.Name='Occ_Name'  )
View(Occ_Names_2)
View(Sum_by_User_Day_Occ)
# Save as a csv file.
write.csv(Sum_by_User_Day_Occ, 'dietstudy_Sum_by_User_Day_Occ.csv')
# Use dietstudy data. ----------------------------------------------------
GenerateTotals(items.data=items, User.Name='UserName', Recall.No='RecordDayNo')
# The number of rows should be {No. of users x No. days}.
dim(New_Totals)
head(New_Totals, 2)
# Get the type of occasion (breakfast, just a drink etc.) by user & by occasion.
AddOccNames <- function(items.data, User.Name='UserName',
Recall.No='RecallNo', Occ.No='Occ_No', Occ.Name='Occ_Name'  ){
subsetted2 <<- items.data[, c(User.Name,  Recall.No,  Occ.No,  Occ.Name)]
# Get Occ_Name (which is numeric) for each occasion. Taking mean because Occ_Name is the same
# for the same occasion.
Occ_Names <<- aggregate(subsetted2[, 4] ~ subsetted2[, 1] + subsetted2[, 2] +  subsetted2[, 3],
data=items.data,
FUN=mean)
colnames(Occ_Names) <<- c('UserName', 'RecallNo', 'Occ_No', 'Occ_Name')
# Add a unique ID for each line for merging.
Occ_Names$User_Day_OccNo <<- paste0(Occ_Names$UserName, "_",
Occ_Names$RecallNo, "_",
Occ_Names$Occ_No)
# Take only User_Day_OccNo and Occ_Name.
Occ_Names_2 <<- Occ_Names[, c("User_Day_OccNo", "Occ_Name")]
# Make a reference table that has Occ_Name and corresponding types.
Occ_Names_ref <<- data.frame(Occ_Name=seq(1:8),
Occ_In_Words=c("Breakfast", "Brunch",
"Lunch",     "Dinner",
"Supper",    "Snack",
"Just a drink", "Just a supplement" ))
# Combine!
# Match the Occ_Names with the Occ_Names_ref (~VLOOKUP)
Occ_Names_and_Words <<- merge(x=Occ_Names_2, y=Occ_Names_ref, by="Occ_Name", all.x=T)
# Combine the 2 tables so that the sums of each occasion, occ numbers, and occ names in word
#  will be in one table.
Sum_by_User_Day_Occ <<- merge(x=Items_by_User_Occ, y=Occ_Names_and_Words, by='User_Day_OccNo', all.x=T)
}
# Flag if KCAL is <600 or >5700 --> ask remove or not --> if yes, remove those rows
KCALOutliers <- function(data = totals, min = 600, max = 5700){
KCAL_outlier_rows <- subset(data, KCAL < min | KCAL > max)
cat("There are", nrow(KCAL_outlier_rows), "observations with <", min, "kcal/day or >", max, "kcal/day. \n", sep = " ")
if(nrow(KCAL_outlier_rows) == 0){ cat("\n")}
else{
print(KCAL_outlier_rows)   # Show the outlier rows # Some totals have 'RecallNo', others 'SutdyDayNo'...
answer <- askYesNo("Remove?")
if(answer==T){
data <- subset(data, KCAL >= min & KCAL <= max)
}
}
}
# Flag if KCAL is <600 or >5700 --> ask remove or not --> if yes, remove those rows
KCALOutliers <- function(totals.data, min = 600, max = 5700){
KCAL_outlier_rows <- subset(data, KCAL < min | KCAL > max)
cat("There are", nrow(KCAL_outlier_rows), "observations with <", min, "kcal/day or >", max, "kcal/day. \n", sep = " ")
if(nrow(KCAL_outlier_rows) == 0){ cat("\n")}
else{
print(KCAL_outlier_rows)   # Show the outlier rows # Some totals have 'RecallNo', others 'SutdyDayNo'...
answer <- askYesNo("Remove?")
if(answer==T){
data <- subset(data, KCAL >= min & KCAL <= max)
}
}
}
# Flag if KCAL is <600 or >5700 --> ask remove or not --> if yes, remove those rows
KCALOutliers(totals.data = New_Totals, min = 600, max = 5700)
# Flag if KCAL is <600 or >5700 --> ask remove or not --> if yes, remove those rows
KCALOutliers <- function(totals.data, min = 600, max = 5700){
KCAL_outlier_rows <- subset(data, KCAL < min | KCAL > max)
cat("There are", nrow(KCAL_outlier_rows), "observations with <", min, "kcal/day or >", max, "kcal/day. \n", sep = " ")
if(nrow(KCAL_outlier_rows) == 0){ cat("\n")}
else{
print(KCAL_outlier_rows)   # Show the outlier rows # Some totals have 'RecallNo', others 'SutdyDayNo'...
answer <- askYesNo("Remove?")
if(answer==T){
data <- subset(data, KCAL >= min & KCAL <= max)
}
}
}
KCAL_outlier_rows <- subset(data, KCAL < min | KCAL > max)
# Flag if KCAL is <600 or >5700 --> ask remove or not --> if yes, remove those rows
KCALOutliers <- function(totals.data, min = 600, max = 5700){
KCAL_outlier_rows <- subset(totals.data, KCAL < min | KCAL > max)
cat("There are", nrow(KCAL_outlier_rows), "observations with <", min, "kcal/day or >", max, "kcal/day. \n", sep = " ")
if(nrow(KCAL_outlier_rows) == 0){ cat("\n")}
else{
print(KCAL_outlier_rows)   # Show the outlier rows # Some totals have 'RecallNo', others 'SutdyDayNo'...
answer <- askYesNo("Remove?")
if(answer==T){
data <- subset(data, KCAL >= min & KCAL <= max)
}
}
}
# Flag if KCAL is <600 or >5700 --> ask remove or not --> if yes, remove those rows
KCALOutliers <- function(totals.data, min = 600, max = 5700){
KCAL_outlier_rows <- subset(totals.data, KCAL < min | KCAL > max)
cat("There are", nrow(KCAL_outlier_rows), "observations with <", min, "kcal/day or >", max, "kcal/day. \n", sep = " ")
if(nrow(KCAL_outlier_rows) == 0){ cat("\n")}
else{
print(KCAL_outlier_rows)   # Show the outlier rows # Some totals have 'RecallNo', others 'SutdyDayNo'...
answer <- askYesNo("Remove?")
if(answer==T){
totals.data <- subset(totals.data, KCAL >= min & KCAL <= max)
}
}
}
# Flag if KCAL is <600 or >5700 --> ask remove or not --> if yes, remove those rows
KCALOutliers(totals.data = New_Totals, min = 600, max = 5700)
# Flag if PROT is <10 or >240 --> ask remove or not --> if yes, remove those rows
PROTOutliers <- function(totals.data = New_Totals, min = 10, max = 240){
PROT_outlier_rows <- subset(totals.data, PROT < min | PROT > max)
cat("There are", nrow(PROT_outlier_rows), "observations with <", min, "PROT/day or >", max, "PROT/day. \n", sep = " ")
if(nrow(PROT_outlier_rows) == 0){ cat("\n")}
else{
print(PROT_outlier_rows)   # Show the outlier rows
answer <- askYesNo("Remove?")
if(answer==T){
totals.data <- subset(totals.data, PROT >= min & PROT <= max)
}
}
}
# Flag if TFAT is <15 or >230 --> ask remove or not --> if yes, remove those rows
TFATOutliers <- function(totals.data = New_Totals, min = 15, max = 230){
TFAT_outlier_rows <- subset(totals.data, TFAT < min | TFAT > max)
cat("There are", nrow(TFAT_outlier_rows), "observations with <", min, "TFAT/day or >", max, "TFAT/day. \n", sep = " ")
if(nrow(TFAT_outlier_rows) == 0){ cat("\n")}
else{
print(TFAT_outlier_rows)   # Show the outlier rows
answer <- askYesNo("Remove?")
if(answer==T){
totals.data <- subset(totals.data, TFAT >= min & TFAT <= max)
}
}
}
# Flag if VC (Vitamin C) is <5 or >400 --> ask remove or not --> if yes, remove those rows
VCOutliers <- function(totals.data = New_Totals, min = 5, max = 400){
VC_outlier_rows <- subset(totals.data, VC < min | VC > max)
cat("There are", nrow(VC_outlier_rows), "observations with <", min, "VC/day or >", max, "VC/day. \n", sep = " ")
if(nrow(VC_outlier_rows) == 0){ cat("\n")}
else{
print(VC_outlier_rows)   # Show the outlier rows
answer <- askYesNo("Remove?")
if(answer==T){
totals.data <- subset(totals.data, VC >= min & VC <= max)
}
}
}
# Flag if BCAR (beta carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers <- function(totals.data = New_Totals, min = 15, max = 8200){
BCAR_outlier_rows <- subset(totals.data, BCAR < min | BCAR > max)
cat("There are", nrow(BCAR_outlier_rows), "observations with <", min, "BCAR/day or >", max, "BCAR/day. \n", sep = " ")
if(nrow(BCAR_outlier_rows) == 0){ cat("\n")}
else{
print(BCAR_outlier_rows)   # Show the outlier rows
answer <- askYesNo("Remove?")
if(answer==T){
totals.data <- subset(totals.data, BCAR >= min & BCAR <= max)
}
}
}
# Flag if PROT is <10 or >240 --> ask remove or not --> if yes, remove those rows
PROTOutliers(totals.data = New_Totals, min = 10, max = 240)
# Flag if TFAT is <15 or >230 --> ask remove or not --> if yes, remove those rows
TFATOutliers(totals.data = New_Totals, min = 15, max = 230)
# Flag if VC (Vitamin C) is <5 or >400 --> ask remove or not --> if yes, remove those rows
VCOutliers(totals.data = New_Totals, min = 5, max = 400)
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers(totals.data = New_Totals, min = 15, max = 8200)
# Flag if PROT is <10 or >240 --> ask remove or not --> if yes, remove those rows
PROTOutliers <- function(totals.data = New_Totals, min = 10, max = 240){
PROT_outlier_rows <<- subset(totals.data, PROT < min | PROT > max)
cat("There are", nrow(PROT_outlier_rows), "observations with <", min, "PROT/day or >", max, "PROT/day. \n", sep = " ")
if(nrow(PROT_outlier_rows) == 0){ cat("\n")}
else{
print(PROT_outlier_rows)   # Show the outlier rows
answer <- askYesNo("Remove?")
if(answer==T){
totals.data <- subset(totals.data, PROT >= min & PROT <= max)
}
}
}
# Flag if TFAT is <15 or >230 --> ask remove or not --> if yes, remove those rows
TFATOutliers <- function(totals.data = New_Totals, min = 15, max = 230){
TFAT_outlier_rows <<- subset(totals.data, TFAT < min | TFAT > max)
cat("There are", nrow(TFAT_outlier_rows), "observations with <", min, "TFAT/day or >", max, "TFAT/day. \n", sep = " ")
if(nrow(TFAT_outlier_rows) == 0){ cat("\n")}
else{
print(TFAT_outlier_rows)   # Show the outlier rows
answer <- askYesNo("Remove?")
if(answer==T){
totals.data <- subset(totals.data, TFAT >= min & TFAT <= max)
}
}
}
# Flag if VC (Vitamin C) is <5 or >400 --> ask remove or not --> if yes, remove those rows
VCOutliers <- function(totals.data = New_Totals, min = 5, max = 400){
VC_outlier_rows <<- subset(totals.data, VC < min | VC > max)
cat("There are", nrow(VC_outlier_rows), "observations with <", min, "VC/day or >", max, "VC/day. \n", sep = " ")
if(nrow(VC_outlier_rows) == 0){ cat("\n")}
else{
print(VC_outlier_rows)   # Show the outlier rows
answer <- askYesNo("Remove?")
if(answer==T){
totals.data <- subset(totals.data, VC >= min & VC <= max)
}
}
}
# Flag if BCAR (beta carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers <- function(totals.data = New_Totals, min = 15, max = 8200){
BCAR_outlier_rows <<- subset(totals.data, BCAR < min | BCAR > max)
cat("There are", nrow(BCAR_outlier_rows), "observations with <", min, "BCAR/day or >", max, "BCAR/day. \n", sep = " ")
if(nrow(BCAR_outlier_rows) == 0){ cat("\n")}
else{
print(BCAR_outlier_rows)   # Show the outlier rows
answer <- askYesNo("Remove?")
if(answer==T){
totals.data <- subset(totals.data, BCAR >= min & BCAR <= max)
}
}
}
colnames(BCAR_outlier_rows)
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers(totals.data = New_Totals, min = 15, max = 8200)
colnames(BCAR_outlier_rows)
# or show the outliers if too many.
BCAR_outlier_rows[, c('User_Day', 'KCAL', 'BCAR')]
# Flag if VC (Vitamin C) is <5 or >400 --> ask remove or not --> if yes, remove those rows
VCOutliers(totals.data = New_Totals, min = 5, max = 400)
# Flag if VC (Vitamin C) is <5 or >400 --> ask remove or not --> if yes, remove those rows
VCOutliers(totals.data = New_Totals, min = 5, max = 400)
# or show the outliers if too many.
VC_outlier_rows[, c('User_Day', 'KCAL', 'VC', 'V_TOTAL', 'V_DRKGR', 'F_TOTAL')]  # F is fruits.
# Flag if VC (Vitamin C) is <5 or >400 --> ask remove or not --> if yes, remove those rows
VCOutliers(totals.data = New_Totals, min = 5, max = 400)
# Flag if BCAR (beta-carotene) is <15 or >8200 --> ask remove or not --> if yes, remove those rows
BCAROutliers(totals.data = New_Totals, min = 15, max = 8200)
# or show the outliers if too many.
VC_outlier_rows[, c('User_Day', 'KCAL', 'VC', 'V_TOTAL', 'V_DRKGR', 'F_TOTAL')]  # F is fruits.
# or show the outliers if too many.
BCAR_outlier_rows[, c('User_Day', 'KCAL', 'BCAR')]
# or show the outliers if too many.
bcaroutliers <-  BCAR_outlier_rows[, c('User_Day', 'KCAL', 'BCAR')]
bcaroutliers[order(bcaroutliers$BCAR, decreasing = T), ]
library(dplyr)
bcaroutliers %>% filter(BCAR>8200) %>% nrow()
bcaroutliers %>% filter(BCAR<15) %>% nrow()
