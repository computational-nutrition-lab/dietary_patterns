fdata$Old.Main.food.description <- fdata$Main.food.description
# replace anything that isn't a number or character with an underscore (format for QIIME)
fdata$Main.food.description <- gsub("[^[:alnum:]]+", "_", fdata$Main.food.description)
}
# add a default ModCode column if it doesn't exist
if(sum(colnames(fdata) == "ModCode")==0)
fdata$ModCode <- rep("0", nrow(fdata))
# make a new food id that also uses the mod.code
fdata$FoodID <- paste(fdata$FoodCode, fdata$ModCode, sep=".")
# grab the first occurence of any food id and we'll use that to construct the tree
# note that SuperTracker has duplicate names for each Food ID (important for mapping, but not for the actual tree)
if(dedupe) fdata <- fdata[!duplicated(fdata$FoodID),]
# write everything out so that we have it for reference
write.table(fdata, output_fn, sep = "\t", quote = FALSE, row.names = FALSE)
}
# Current ASA24 database doesn't have modcodes, so
# deduplicates database file, replaces special chars with _ and creates a new FoodID out of
# foodcode and modcode. It leaves all other columns intact.
FormatFoods(input_fn="../raw_data/all.food.desc.txt", output_fn="data/MCT/ASA24Database.txt")
# format.foods(input_fn="data/MCT/MCTs_study_missing_variables.txt", output_fn="data/MCT/MCTs_study_missing_variables_formatted.txt")
format.foods(input_fn="data/MCT/Soylent_codes.txt",   output_fn="data/MCT/Soylent_codes_formatted.txt")
format.foods(input_fn="../raw_data/Items_to_use.txt", output_fn="data/MCT/dietrecords.txt", dedupe=F)
#check.db(food_database_fn = "data/MCT/ASA24Database.txt", food_records_fn="data/MCT/dietrecords.txt", output_fn="data/MCT/missing.txt")
write.table(fdata, output_fn, sep = "\t", quote = FALSE, row.names = FALSE)
format.foods(input_fn="../raw_data/Items_to_use.txt", output_fn="data/MCT/dietrecords.txt", dedupe=F)
# ---------------------------------------------------------------------------------------------------------------
# Limit to just the foods reported in your study (formatted dietrecords.txt as the input)
filter.db.by.diet.records(food_database_fn = "data/MCT/ASA24Database.txt",
food_records_fn  = "data/MCT/dietrecords.txt",
output_fn = "data/MCT/MCTdatabase.txt")
source("lib/make.food.tree.r")
source("lib/make.food.otu.r")
source("lib/make.dhydrt.otu.r")
source("lib/filter.db.by.diet.records.r")
# ---------------------------------------------------------------------------------------------------------------
# Limit to just the foods reported in your study (formatted dietrecords.txt as the input)
filter.db.by.diet.records(food_database_fn = "data/MCT/ASA24Database.txt",
food_records_fn  = "data/MCT/dietrecords.txt",
output_fn = "data/MCT/MCTdatabase.txt")
# food_records_fn = formatted file of all diet records, must contain FoodID and grams columns
# food_record_id = column name of identifier separating your diet records (e.g. subjectid, sampleid, etc.)
# food_taxonomy_fn = taxonomy file generated by make.food.tree
# output_fn = output file name of your food otu table
MakeFoodOtu <- function(food_records_fn, food_record_id, food_taxonomy_fn, output_fn)
{
# read everything in as a character to preserve numeric food codes and IDs
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)
diet$FoodAmt <- as.numeric(diet$FoodAmt)
# sum total grams of each food eaten within a record
cdiet <- aggregate(diet$FoodAmt, by=list(diet[,food_record_id], diet$FoodID), FUN=sum)
colnames(cdiet) <- c(food_record_id, "FoodID", "total.grams")
cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = food_record_id, direction = "wide")
cdiet.w[is.na(cdiet.w)] <- 0
rownames(cdiet.w) <- cdiet.w[,1] # make record_ids the rownames
cdiet.w <- cdiet.w[,-1]
colnames(cdiet.w) <- gsub("total.grams.", "", colnames(cdiet.w)) #rename column names to FoodIDs only
t.cdiet.w <- t(cdiet.w)
food.taxonomy <- read.table(food_taxonomy_fn, sep="\t", colClasses="character", quote="", header=T, row=1)
food.otu <- merge(t.cdiet.w, food.taxonomy, by=0)
# let's get rid of the FoodIDs and replace it with the food tree leaf names
rownames(food.otu) <- food.otu[,"Main.food.description"]
remove.col.ix <- which(colnames(food.otu) %in% c("Main.food.description", "Row.names"))
food.otu <- food.otu[,-remove.col.ix]
cat("#FOODID\t", file=output_fn)
write.table(food.otu, output_fn, sep = "\t", quote = F, append=TRUE)
invisible(food.otu)
}
?invisible
# food_records_fn = formatted file of all diet records, must contain FoodID and grams columns
# food_record_id = column name of identifier separating your diet records (e.g. subjectid, sampleid, etc.)
# food_taxonomy_fn = taxonomy file generated by make.food.tree
# output_fn = output file name of your food otu table
MakeFiberOtu <- function(food_records_fn, food_record_id, food_taxonomy_fn, output_fn)
{
# read everything in as a character to preserve numeric food codes and IDs
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)
diet$FIBE <- as.numeric(diet$FIBE)
# sum total grams of each food eaten within a record
cdiet <- aggregate(diet$FIBE, by=list(diet[,food_record_id], diet$FoodID), FUN=sum)
colnames(cdiet) <- c(food_record_id, "FoodID", "fiber.grams")
cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = food_record_id, direction = "wide")
cdiet.w[is.na(cdiet.w)] <- 0
rownames(cdiet.w) <- cdiet.w[,1] # make record_ids the rownames
cdiet.w <- cdiet.w[,-1]
colnames(cdiet.w) <- gsub("fiber.grams.", "", colnames(cdiet.w)) # rename column names to FoodIDs only
t.cdiet.w <- t(cdiet.w)
food.taxonomy <- read.table(food_taxonomy_fn, sep="\t", colClasses="character", quote="", header=T, row=1)
fiber.otu <- merge(t.cdiet.w, food.taxonomy, by=0)
# get rid of the FoodIDs and replace it with the food tree leaf names
rownames(fiber.otu) <- fiber.otu[,"Main.food.description"]
remove.col.ix <- which(colnames(fiber.otu) %in% c("Main.food.description", "Row.names"))
fiber.otu <- fiber.otu[,-remove.col.ix]
cat("#FOODID\t", file=output_fn)
write.table(fiber.otu, output_fn, sep = "\t", quote = F, append=TRUE)
invisible(fiber.otu)
}
# food_records_fn = formatted file of all diet records, must contain FoodID and grams columns
# food_record_id = column name of identifier separating your diet records (e.g. subjectid, sampleid, etc.)
# food_taxonomy_fn = taxonomy file generated by make.food.tree
# output_fn = output file name of your food otu table
MakeDhydrtOtu <- function(food_records_fn, food_record_id, food_taxonomy_fn, output_fn)
{
# read everything in as a character to preserve numeric food codes and IDs
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)
diet$FoodAmt <- as.numeric(diet$FoodAmt)
diet$KCAL <- as.numeric(diet$KCAL)
diet$MOIS <- as.numeric(diet$MOIS)
# make new variable dhydrated grams per kcal
diet$dhydrt <- (diet$FoodAmt - diet$MOIS)
# sum total grams of each food eaten within a record
cdiet <- aggregate(diet$dhydrt, by=list(diet[,food_record_id], diet$FoodID), FUN=sum)
colnames(cdiet) <- c(food_record_id, "FoodID", "dhydrt")
cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = food_record_id, direction = "wide")
cdiet.w[is.na(cdiet.w)] <- 0
rownames(cdiet.w) <- cdiet.w[,1] # make record_ids the rownames
cdiet.w <- cdiet.w[,-1]
colnames(cdiet.w) <- gsub("dhydrt.", "", colnames(cdiet.w)) #rename column names to FoodIDs only
t.cdiet.w <- t(cdiet.w)
food.taxonomy <- read.table(food_taxonomy_fn, sep="\t", colClasses="character", quote="", header=T, row=1)
dhydrt.otu <- merge(t.cdiet.w, food.taxonomy, by=0)
# let's get rid of the FoodIDs and replace it with the food tree leaf names
rownames(dhydrt.otu) <- dhydrt.otu[,"Main.food.description"]
remove.col.ix <- which(colnames(dhydrt.otu) %in% c("Main.food.description", "Row.names"))
dhydrt.otu <- dhydrt.otu[,-remove.col.ix]
#drop rows with infinate values
inf.vals <- which(rowSums(dhydrt.otu[,-ncol(dhydrt.otu)]) == Inf)
dhydrt.otu <- dhydrt.otu[!(rownames(dhydrt.otu) %in% names(inf.vals)),]
cat("#FOODID\t", file=output_fn)
write.table(dhydrt.otu, output_fn, sep = "\t", quote = F, append=TRUE)
invisible(dhydrt.otu)
}
MakeFoodTree <- function(nodes_fn, food_database_fn, addl_foods_fn=NULL, output_tree_fn, output_taxonomy_fn, num.levels=5)
{
fdata <- read.table(food_database_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)
nodes <- read.table(nodes_fn, header = TRUE, sep="\t", colClasses="character")
main <- fdata[,c("FoodID", "Main.food.description")]
# add additional food codes
if(!is.null(addl_foods_fn))
for(i in 1:length(addl_foods_fn)){
new.foods <- read.table(addl_foods_fn[i], header=T, sep="\t", colClasses="character")
main <- rbind(main, new.foods[,c("FoodID", "Main.food.description")])
}
# if there happen to be duplicate FoodIDs in main, remove them
main <- main[!duplicated(main$FoodID),]
flevels <- NULL
for(i in 1:num.levels)
flevels <- cbind(flevels, I(substr(main$FoodID, 1, i)))
colnames(flevels) <- paste0("L",1:num.levels)
main <- data.frame(main, flevels, stringsAsFactors=F)
# melt the data, merge to get the node names, then cast back
main.melt <- melt(main, id.vars = "FoodID", variable.name = "Level", value.name = "Level.code")
main.merge <- merge(main.melt, nodes, by = "Level.code")
main.cast <- dcast(main.merge, FoodID ~ Level, value.var = "Main.food.description")
# prepend level to all level descriptions
main.cast[is.na(main.cast)] <- ""
main.cast[,colnames(main.cast)[-1]] <- sapply(colnames(main.cast)[-1], function(colname) paste(colname, main.cast[,colname], sep="_"))
# merge back with original table to grab Food Description
main.join <- merge(main.cast, main[,c("FoodID","Main.food.description")], by="FoodID")
# create a proper newick string for the tree
newickstring <- paste("foodtreeroot", apply(main.join, 1, function(xx) paste(xx[-1], collapse="/")), sep="/")
# create a proper taxonomy string for QIIME
taxonomy <- apply(main.join, 1, function(xx) paste(xx[-1], collapse=";"))
final.table <<- data.frame(main.join, newickstring, taxonomy, stringsAsFactors=F)
#### Make and export the tree ####
foodTree <- as.Node(final.table, pathName = "newickstring")
tree <- recursiveNewickWrite(foodTree)
cat(tree, ";", sep = "", file = output_tree_fn)  # Added a semicolon so that the output_tree_fn will be loaded correctly.
#### Make and export the taxonomy file ####
export <- final.table %>% select(FoodID, taxonomy, Main.food.description)
export$Main.food.description <- gsub("_", " ", export$Main.food.description)
write.table(export, output_taxonomy_fn, sep = "\t", quote = FALSE, row.names = FALSE)
}
# ---------------------------------------------------------------------------------------------------------------
# Generate a tree with the whole ASA24 food database.
# if there are missing foods, then create new files to add them in below under addl_foods
MakeFoodTree(nodes_fn=        "data/NodeLabelsMCT.txt",
food_database_fn="data/MCT/ASA24Database.txt",
addl_foods_fn= c("data/MCT/Soylent_codes_formatted.txt"),
num.levels = 2,  # How many levels foods to be classified
output_taxonomy_fn = "output/mct_Lv2.taxonomy.txt",  # Name your output taxonomy file
output_tree_fn=      "output/mct_Lv2.tree"           # Name your output tree
)
library(ggtree)
tree <- read.tree("output/mct_Lv2.tree")
# Use ggtree
ggtree(tree, ladderize = F, layout = 'radial') + # disable ladderizing (sorting by ggtree, CRITICAL!!!)
geom_tiplab()
# ---------------------------------------------------------------------------------------------------------------
# Do some preparation to highlight and annotate.
# Save the tip labels as a vector for processing.
tiplabels <- tree[["tip.label"]]
length(tiplabels)  # 134 food items = tips for VVKAJ.
# Make the nodes (root, L1s and L2s and so on) into a dataframe.
nodelabels <- tree[["node.label"]]
length(nodelabels) # 42 = 1 root + 41 L1s&L2s.
nodelabelsdf <- data.frame(nodelabels= nodelabels,
level= substr(nodelabels, 1,2), # Take the 1st and 2nd characters from nodelabels.
seqnum= seq(1:length(nodelabels)),
nodenum= seq(1:length(nodelabels))+length(tiplabels)  # This corresponds to the node numbers in the plot.
)
head(nodelabelsdf,20)
# Replace 'fo' to 'root'
nodelabelsdf[1, 2] <- 'root'
# Ensure everything's good.
head(nodelabelsdf, 20)
tail(nodelabelsdf, 20)
# Take only the rows that are L1 and find their nodenumbers in order to annotate nodes.
L1s <- subset(nodelabelsdf, level=='L1')
# Make a reference table of the full node names and shorter node names.
L1sref <- data.frame(nodelabels = L1s$nodelabels,
# fullnodelabels=c("Milk_and_Milk_Products", "Meat_Poultry_Fish_and_Mixtures",
#                                     "Eggs",                   "Dry_Beans_Peas_Other_Legumes_Nuts_and_Seeds",
#                                     "Grain_Product",          "Fruits",
#                                     "Vegetables",             "Fats_Oils_and_Salad_Dressings",
#                                     "Sugars_Sweets_and_Beverages"),
shortnodelabels=c("Milks",                  "Meats",
"Eggs",                   "Legumes",
"Grains",                 "Fruits",
"Vegetables",             "Fats",
"Sweets&\nBeverages"),
hilightcolors=  c('lightblue',              'firebrick1',        # Add 9 colors for highlighting each L1.
'orange',                 'royalblue',
'gold',                   'darkorchid',
'seagreen',               'lightgreen',
'rosybrown1'),
L1labelcolors=  c('lightblue4',             'firebrick',         # Add 9 colors for annotating each L1.
'darkorange',            'darkblue',
'gold4',                 'darkorchid',
'seagreen',               'limegreen',
'mediumvioletred'))
L1sref
# Merge the shortnodelabels to L1s
merged1 <- merge(x=L1s, y=L1sref, all.x=T, by='nodelabels') # all.x=T ignores items in y that is missing in x.
# merge() sorts rows automatically, so need to re-sort it to the original order - by seqnum.
# and sort the columns also so that nodelabels (column 1) and shortnodelabels (column 5) will be next to each other.
L1s <- merged1[order(merged1$seqnum), c(1,5,2:4,6:7)]
# Ensure the nodelabels and shortnodelabels are matching.
L1s
# Make vectors for plotting.
L1nodenum       <- L1s$nodenum
L1nodelabels    <- L1s$shortnodelabels
L1hilightcolors <- L1s$hilightcolors
L1labelcolors   <- L1s$L1labelcolors
# highlight and annotate L1s using the nodenumbers.
tree_an_hi <- ggtree(tree, ladderize = F, layout = 'radial') +
# geom_text(aes(label=node), hjust= -0.3) +
geom_hilight(   node=L1nodenum[1],  fill=L1hilightcolors[1]) +  # Milk products
geom_cladelabel(node=L1nodenum[1], color=  L1labelcolors[1], label=L1nodelabels[1], offset=0.5, geom="label", fill='white', hjust=0.5) +
geom_hilight(   node=L1nodenum[2],  fill=L1hilightcolors[2]) +  # Meat & fish
geom_cladelabel(node=L1nodenum[2], color=  L1labelcolors[2], label=L1nodelabels[2], offset=0.5, geom="label", fill='white', hjust=0.5) +
geom_hilight(   node=L1nodenum[3],  fill=L1hilightcolors[3]) +  # Eggs
geom_cladelabel(node=L1nodenum[3], color=  L1labelcolors[3], label=L1nodelabels[3], offset=0.5, geom="label", fill='white', hjust=0.5) +
geom_hilight(   node=L1nodenum[4],  fill=L1hilightcolors[4]) +  # Legumes, nuts & seeds
geom_cladelabel(node=L1nodenum[4], color=  L1labelcolors[4], label=L1nodelabels[4], offset=0.5, geom="label", fill='white', hjust=0.5) +
geom_hilight(   node=L1nodenum[5],  fill=L1hilightcolors[5]) +  # Grain products
geom_cladelabel(node=L1nodenum[5], color=  L1labelcolors[5], label=L1nodelabels[5], offset=0.5, geom="label", fill='white', hjust=0.5) +
geom_hilight(   node=L1nodenum[6],  fill=L1hilightcolors[6]) +  # Fruits
geom_cladelabel(node=L1nodenum[6], color=  L1labelcolors[6], label=L1nodelabels[6], offset=0.5, geom="label", fill='white', hjust=0.5) +
geom_hilight(   node=L1nodenum[7],  fill=L1hilightcolors[7]) +  # Vegetables
geom_cladelabel(node=L1nodenum[7], color=  L1labelcolors[7], label=L1nodelabels[7], offset=0.5, geom="label", fill='white', hjust=0.5) +
geom_hilight(   node=L1nodenum[8],  fill=L1hilightcolors[8]) +  # Fats & oils
geom_cladelabel(node=L1nodenum[8], color=  L1labelcolors[8], label=L1nodelabels[8], offset=0.5, geom="label", fill='white', hjust=0.5) +
geom_hilight(   node=L1nodenum[9],  fill=L1hilightcolors[9]) +  # Sweets & beverages
geom_cladelabel(node=L1nodenum[9], color=  L1labelcolors[9], label=L1nodelabels[9], offset=0.5, geom="label", fill='white', hjust=0.5)
tree_an_hi
# Widen the opening of the tree
tree_an_hi_o <- open_tree(tree_an_hi, 10)
# Rotate the tree so that the root (break) will come to the bottom
tree_an_hi_o_rt275 <- rotate_tree(tree_an_hi_o, 275) # 270 + 10*0.5
tree_an_hi_o_rt275
tree_an_hi_o
# Rotate the tree so that the root (break) will come to the bottom
tree_an_hi_o_rt275 <- rotate_tree(tree_an_hi_o, 275) # 270 + 10*0.5
tree_an_hi_o_rt275
# highlight and annotate L1s using the nodenumbers.
tree_an_hi <- ggtree(tree, ladderize = F, layout = 'radial') +
# geom_text(aes(label=node), hjust= -0.3) +
geom_hilight(   node=L1nodenum[1],  fill=L1hilightcolors[1]) +  # Milk products
geom_cladelabel(node=L1nodenum[1], color=  L1labelcolors[1], label=L1nodelabels[1], offset=0.5, geom="label", fill='white', hjust=0.5) +
geom_hilight(   node=L1nodenum[2],  fill=L1hilightcolors[2]) +  # Meat & fish
geom_cladelabel(node=L1nodenum[2], color=  L1labelcolors[2], label=L1nodelabels[2], offset=0.5, geom="label", fill='white', hjust=0.5) +
geom_hilight(   node=L1nodenum[3],  fill=L1hilightcolors[3]) +  # Eggs
geom_cladelabel(node=L1nodenum[3], color=  L1labelcolors[3], label=L1nodelabels[3], offset=0.5, geom="label", fill='white', hjust=0.5) +
geom_hilight(   node=L1nodenum[4],  fill=L1hilightcolors[4]) +  # Legumes, nuts & seeds
geom_cladelabel(node=L1nodenum[4], color=  L1labelcolors[4], label=L1nodelabels[4], offset=0.5, geom="label", fill='white', hjust=0.5) +
geom_hilight(   node=L1nodenum[5],  fill=L1hilightcolors[5]) +  # Grain products
geom_cladelabel(node=L1nodenum[5], color=  L1labelcolors[5], label=L1nodelabels[5], offset=0.5, geom="label", fill='white', hjust=0.5) +
geom_hilight(   node=L1nodenum[6],  fill=L1hilightcolors[6]) +  # Fruits
geom_cladelabel(node=L1nodenum[6], color=  L1labelcolors[6], label=L1nodelabels[6], offset=0.5, geom="label", fill='white', hjust=0.5) +
geom_hilight(   node=L1nodenum[7],  fill=L1hilightcolors[7]) +  # Vegetables
geom_cladelabel(node=L1nodenum[7], color=  L1labelcolors[7], label=L1nodelabels[7], offset=0.5, geom="label", fill='white', hjust=0.5) +
geom_hilight(   node=L1nodenum[8],  fill=L1hilightcolors[8]) +  # Fats & oils
geom_cladelabel(node=L1nodenum[8], color=  L1labelcolors[8], label=L1nodelabels[8], offset=0.5, geom="label", fill='white', hjust=0.5) +
geom_hilight(   node=L1nodenum[9],  fill=L1hilightcolors[9]) +  # Sweets & beverages
geom_cladelabel(node=L1nodenum[9], color=  L1labelcolors[9], label=L1nodelabels[9], offset=0.5, geom="label", fill='white', hjust=0.5) +
ggtitle("Food tree with all food items of ASA24")
tree_an_hi
# Widen the opening of the tree
tree_an_hi_o <- open_tree(tree_an_hi, 10)
# Rotate the tree so that the root (break) will come to the bottom
tree_an_hi_o_rt275 <- rotate_tree(tree_an_hi_o, 275) # 270 + 10*0.5
tree_an_hi_o_rt275
ggsave("AllfoodsASA24_7x7_rt270_rd.tif", tree_an_hi_o_rt275, width=7, height=7, device='tiff', dpi=200)
# ---------------------------------------------------------------------------------------------------------------
# Generate a tree with the whole ASA24 food database.
# if there are missing foods, then create new files to add them in below under addl_foods
MakeFoodTree(nodes_fn=        "data/NodeLabelsMCT.txt",
food_database_fn="data/MCT/ASA24Database.txt",
addl_foods_fn= c("data/MCT/Soylent_codes_formatted.txt"),
num.levels = 2,  # How many levels foods to be classified
output_taxonomy_fn = "output/mct_Lv2.taxonomy.txt",  # Name your output taxonomy file
output_tree_fn=      "output/mct_Lv2.tree.nwk"       # Name your output tree
)
tree <- read.tree("output/mct_Lv2.tree.nwk")
# Use ggtree
ggtree(tree, ladderize = F, layout = 'radial') + # disable ladderizing (sorting by ggtree, CRITICAL!!!)
geom_tiplab()
# ========================================================================================
# Load source scripts
# ========================================================================================
source("lib/Food tree scripts/newick.tree.r")
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main.wd <- file.path(getwd())
# ========================================================================================
# Load source scripts
# ========================================================================================
source("lib/Food tree scripts/newick.tree.r")
source("lib/Food tree scripts/check.db.r")
source("lib/Food tree scripts/format.foods.r")
source("lib/Food tree scripts/make.food.tree.r")
MakeFoodTree <- function(nodes_fn, food_database_fn, addl_foods_fn=NULL, output_tree_fn, output_taxonomy_fn, num.levels=5)
{
fdata <- read.table(food_database_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)
nodes <- read.table(nodes_fn, header = TRUE, sep="\t", colClasses="character")
main <- fdata[,c("FoodID", "Main.food.description")]
# add additional food codes
if(!is.null(addl_foods_fn))
for(i in 1:length(addl_foods_fn)){
new.foods <- read.table(addl_foods_fn[i], header=T, sep="\t", colClasses="character")
main <- rbind(main, new.foods[,c("FoodID", "Main.food.description")])
}
# if there happen to be duplicate FoodIDs in main, remove them
main <- main[!duplicated(main$FoodID),]
flevels <- NULL
for(i in 1:num.levels)
flevels <- cbind(flevels, I(substr(main$FoodID, 1, i)))
colnames(flevels) <- paste0("L",1:num.levels)
main <- data.frame(main, flevels, stringsAsFactors=F)
# melt the data, merge to get the node names, then cast back
main.melt <- melt(main, id.vars = "FoodID", variable.name = "Level", value.name = "Level.code")
main.merge <- merge(main.melt, nodes, by = "Level.code")
main.cast <- dcast(main.merge, FoodID ~ Level, value.var = "Main.food.description")
# prepend level to all level descriptions
main.cast[is.na(main.cast)] <- ""
main.cast[,colnames(main.cast)[-1]] <- sapply(colnames(main.cast)[-1], function(colname) paste(colname, main.cast[,colname], sep="_"))
# merge back with original table to grab Food Description
main.join <- merge(main.cast, main[,c("FoodID","Main.food.description")], by="FoodID")
# create a proper newick string for the tree
newickstring <- paste("foodtreeroot", apply(main.join, 1, function(xx) paste(xx[-1], collapse="/")), sep="/")
# create a proper taxonomy string for QIIME
taxonomy <- apply(main.join, 1, function(xx) paste(xx[-1], collapse=";"))
final.table <<- data.frame(main.join, newickstring, taxonomy, stringsAsFactors=F)
#### Make and export the tree ####
foodTree <- as.Node(final.table, pathName = "newickstring")
tree <- recursiveNewickWrite(foodTree)
cat(tree, ";", sep = "", file = output_tree_fn)  # Added a semicolon so that the output_tree_fn will be loaded correctly.
#### Make and export the taxonomy file ####
export <- final.table %>% select(FoodID, taxonomy, Main.food.description)
export$Main.food.description <- gsub("_", " ", export$Main.food.description)
write.table(export, output_taxonomy_fn, sep = "\t", quote = FALSE, row.names = FALSE)
}
source("lib/Food tree scripts/make.food.tree.r")
source("lib/Food tree scripts/make.fiber.otu.r")
source("lib/Food tree scripts/make.dhydrt.otu.r")
source("lib/Food tree scripts/filter.db.by.diet.records.r")
# Current ASA24 database doesn't have modcodes, so de-duplicate database file,
# replace special characters with _, and create a new FoodID out of foodcode and modcode.
# It leaves all other columns intact.
FormatFoods(input_fn="lib/Food tree scripts/all.food.desc.txt",
output_fn="results/Food tree results/ASA24Database.txt")
# soylent (?)
FormatFoods(input_fn="data/Food tree data/Soylent_codes.txt",   output_fn="data/MCT/Soylent_codes_formatted.txt")
# soylent (?)
FormatFoods(input_fn="data/Food tree data/Soylent_codes.txt",   output_fn="data/Food tree data/Soylent_codes_formatted.txt")
# Format your items data.
FormatFoods(input_fn="data/Food tree data/Items_to_use.txt", output_fn="data/Food tree data/dietrecords.txt", dedupe=F)
# Format your items data.
FormatFoods(input_fn="data/Food tree data/Items_to_use.txt", output_fn="data/Food tree data/dietrecords.txt", dedupe=F)
# Current ASA24 database doesn't have modcodes, so de-duplicate database file,
# replace special characters with _, and create a new FoodID out of foodcode and modcode.
# It leaves all other columns intact.
FormatFoods(input_fn="lib/Food tree scripts/all.food.desc.txt", output_fn="results/Food tree scripts/ASA24Database.txt")
# Current ASA24 database doesn't have modcodes, so de-duplicate database file,
# replace special characters with _, and create a new FoodID out of foodcode and modcode.
# It leaves all other columns intact.
FormatFoods(input_fn="lib/Food tree scripts/all.food.desc.txt", output_fn="lib/Food tree scripts/ASA24Database.txt")
# Format your items data. Output will be saved as dietrecords.txt.
FormatFoods(input_fn="data/Food_tree_data/Items_to_use.txt", output_fn="data/Food_tree_data/dietrecords.txt", dedupe=F)
# Current ASA24 database doesn't have modcodes, so de-duplicate database file,
# replace special characters with _, and create a new FoodID out of foodcode and modcode.
# It leaves all other columns intact.
FormatFoods(input_fn="data/Food_tree_data/all.food.desc.txt", output_fn="data/Food_tree_data/ASA24Database.txt")
# FoodCode and  Main.food.description of additional foods not in ASA24. Format it for use.
FormatFoods(input_fn="data/Food_tree_data/Soylent_codes.txt",   output_fn="data/Food_tree_data/Soylent_codes_formatted.txt")
# Format your items data. Output will be saved as dietrecords.txt.
FormatFoods(input_fn="data/Food_tree_data/Items_to_use.txt", output_fn="data/Food_tree_data/dietrecords.txt", dedupe=F)
# ---------------------------------------------------------------------------------------------------------------
# Generate a tree with the whole ASA24 food database.
# if there are missing foods, then create new files to add them in below under addl_foods
MakeFoodTree(nodes_fn=        "data/Food_tree_data/NodeLabelsMCT.txt",
food_database_fn="data/Food_tree_data/ASA24Database.txt",
addl_foods_fn= c("data/Food_tree_data/Soylent_codes_formatted.txt"),
num.levels = 2,  # How many levels foods to be classified
output_taxonomy_fn = "results/Food_tree_results/mct_Lv2.taxonomy.txt",  # Name your output taxonomy file
output_tree_fn=      "results/Food_tree_results/mct_Lv2.tree.nwk"       # Name your output tree
)
tree <- read.tree("results/Food_tree_results/mct_Lv2.tree.nwk")
# Use ggtree
ggtree(tree, ladderize = F, layout = 'radial') + # disable ladderizing (sorting by ggtree, CRITICAL!!!)
geom_tiplab()
# ---------------------------------------------------------------------------------------------------------------
# Limit to just the foods reported in your study (formatted dietrecords.txt as the input)
filter.db.by.diet.records(food_database_fn = "data/Food_tree_data/ASA24Database.txt",
food_records_fn  = "data/Food_tree_data/dietrecords.txt",   # output of FormatFoods above.
output_fn = "data/Food_tree_data/MCTdatabase.txt")
# make a food tree with the reduced data.
MakeFoodTree(nodes_fn=         "data/NodeLabelsMCT.txt",
food_database_fn= "data/Food_tree_data/MCTdatabase.txt",
addl_foods_fn=    "data/Food_tree_data/Soylent_codes_formatted.txt",
num.levels = 4,
output_taxonomy_fn = "results/Food_tree_results/mct.reduced_4Lv.taxonomy.txt",
output_tree_fn=      "results/Food_tree_results/mct.reduced_4Lv.tree.nwk"
)
# ---------------------------------------------------------------------------------------------------------------
# Limit to just the foods reported in your study (formatted dietrecords.txt as the input)
filter.db.by.diet.records(food_database_fn = "data/Food_tree_data/ASA24Database.txt",
food_records_fn  = "data/Food_tree_data/dietrecords.txt",   # output of FormatFoods above.
output_fn = "data/Food_tree_data/MCTdatabase.txt")
# make a food tree with the reduced data.
MakeFoodTree(nodes_fn=         "data/Food_tree_data/NodeLabelsMCT.txt",
food_database_fn= "data/Food_tree_data/MCTdatabase.txt",
addl_foods_fn=    "data/Food_tree_data/Soylent_codes_formatted.txt",
num.levels = 4,
output_taxonomy_fn = "results/Food_tree_results/mct.reduced_4Lv.taxonomy.txt",
output_tree_fn=      "results/Food_tree_results/mct.reduced_4Lv.tree.nwk"
)
tree <- read.tree("results/Food_tree_results/mct.reduced_4Lv.tree.nwk")
# Use ggtree
ggtree(tree, ladderize = F, layout = 'radial') + # disable ladderizing (sorting by ggtree, CRITICAL!!!)
geom_tiplab()
# Use ggtree
ggtree(tree, ladderize = F, layout = 'radial') + # disable ladderizing (sorting by ggtree, CRITICAL!!!)
geom_tiplab(NULL)
# Use ggtree
ggtree(tree, ladderize = F, layout = 'radial')  # disable ladderizing (sorting by ggtree, CRITICAL!!!)
# Makes the standard food otu table with data in gram weights of food
MakeFoodOtu(food_records_fn=  "data/Food_tree_data/dietrecords.txt",
food_record_id =  "X.SampleID",                       # Specify the ID of your participants
food_taxonomy_fn= "results/Food_tree_results/mct.reduced.taxonomy.txt",  # Name your output tax file.
output_fn =       "results/Food_tree_results/mct.food.otu.txt")          # Name your output otu file.
# Makes the standard food otu table with data in gram weights of food
MakeFoodOtu(food_records_fn=  "data/Food_tree_data/dietrecords.txt",
food_record_id =  "X.SampleID",                       # Specify the ID of your participants
food_taxonomy_fn= "results/Food_tree_results/mct.reduced.taxonomy.txt",  # Name your output tax file.
output_fn =       "results/Food_tree_results/mct.food.otu.txt")          # Name your output otu file.
# Makes a food otu table with data in grams of fiber per food
MakeFiberOtu(food_records_fn=  "data/Food_tree_data/dietrecords.txt",
food_record_id =  "X.SampleID",
food_taxonomy_fn= "results/Food_tree_results/mct.reduced.taxonomy.txt",
output_fn =       "results/Food_tree_results/mct.fiber.otu.txt")
source("lib/Food tree scripts/make.food.tree.r")
source("lib/Food tree scripts/make.food.otu.r")
source("lib/Food tree scripts/make.fiber.otu.r")
# Makes the standard food otu table with data in gram weights of food
MakeFoodOtu(food_records_fn=  "data/Food_tree_data/dietrecords.txt",
food_record_id =  "X.SampleID",                       # Specify the ID of your participants
food_taxonomy_fn= "results/Food_tree_results/mct.reduced.taxonomy.txt",  # Name your output tax file.
output_fn =       "results/Food_tree_results/mct.food.otu.txt")          # Name your output otu file.
# Makes the standard food otu table with data in gram weights of food
MakeFoodOtu(food_records_fn=  "data/Food_tree_data/dietrecords.txt",
food_record_id =  "X.SampleID",                       # Specify the ID of your participants
food_taxonomy_fn= "results/Food_tree_results/mct.reduced_4Lv.taxonomy.txt",  # Specify your taxonomy file produced by MakeFoodTree.
output_fn =       "results/Food_tree_results/mct.reduced_food.otu.txt")              # Name your output otu file.
# make a food tree with the reduced data.
MakeFoodTree(nodes_fn=         "data/Food_tree_data/NodeLabelsMCT.txt",
food_database_fn= "data/Food_tree_data/MCTdatabase.txt",
addl_foods_fn=    "data/Food_tree_data/Soylent_codes_formatted.txt",
num.levels = 3,
output_taxonomy_fn = "results/Food_tree_results/mct.reduced_3Lv.taxonomy.txt",
output_tree_fn=      "results/Food_tree_results/mct.reduced_3Lv.tree.nwk"
)
# Makes a food otu table with data in grams of fiber per food
MakeFiberOtu(food_records_fn=  "data/Food_tree_data/dietrecords.txt",
food_record_id =  "X.SampleID",
food_taxonomy_fn= "results/Food_tree_results/mct.reduced_4Lv.taxonomy.txt",
output_fn =       "results/Food_tree_results/mct.reduced_4Lv.fiber.otu.txt")
# Makes a food otu table as dehydrated grams per kcal
MakeDhydrtOtu(food_records_fn=  "data/Food_tree_data/dietrecords.txt",
food_record_id =  "X.SampleID",
food_taxonomy_fn= "results/Food_tree_results/mct.reduced_4Lv.taxonomy.txt",
output_fn =       "results/Food_tree_results/mct.reduced_4Lv.dhydrt.otu.txt")
# Makes the standard food otu table with data in gram weights of food.
MakeFoodOtu(food_records_fn=  "data/Food_tree_data/dietrecords.txt",
food_record_id =  "X.SampleID",                       # Specify the ID of your participants
food_taxonomy_fn= "results/Food_tree_results/mct.reduced_3Lv.taxonomy.txt",  # Specify your taxonomy file produced by MakeFoodTree.
output_fn =       "results/Food_tree_results/mct.reduced_3Lv.food.otu.txt")  # Name your output otu file.
# Makes the standard food otu table with data in gram weights of food.
MakeFoodOtu(food_records_fn=  "data/Food_tree_data/dietrecords.txt",
food_record_id =  "X.SampleID",                       # Specify the ID of your participants
food_taxonomy_fn= "results/Food_tree_results/mct.reduced_4Lv.taxonomy.txt",  # Specify your taxonomy file produced by MakeFoodTree.
output_fn =       "results/Food_tree_results/mct.reduced_4Lv.food.otu.txt")  # Name your output otu file.
