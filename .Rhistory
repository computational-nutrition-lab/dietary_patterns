}
mymean
for(i in 1:3){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
myarray = tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean)
mymean[[i]] <- myarray
}
mymean
for(i in 1:3){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
myarray = tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean)
mydf <- myarray
mymean[[i]] <- mydf
}
mymean
myvar <- list("Var1", "Var2", "Var3")
myvar <- c("Var1", "Var2", "Var3")
myvar
mymean <- data.frame(User=NA, names(myvar))
mymean <- data.frame(User=NA, myvar)
mymean
varonly <- df[, -1]
varonly
mymean <- data.frame(User=NA, names(varonly))
mymean
mymean <- data.frame(rbind(User=NA, colnames(varonly)))
mymean
for(i in 1:3){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
myarray = tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean)
mydf <- myarray
mymean[[i]] <- mydf
}
df
for(i in 1:3){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
myarray = tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean)
mydf <- myarray
mydf
}
for(i in 1:3){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
myarray = tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean)
mydf <- myarray
print(mydf)
}
colnames(mydf)
for(i in 1:3){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
myarray = tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean)
mydf <- data.frame(myarray)
colnames(mydf)
print(mydf)
}
for(i in 1:3){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
myarray = tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean)
mydf <- data.frame(myarray)
# colnames(mydf)
print(mydf)
}
colnames(mydf)
for(i in 1:3){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
myarray = tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean)
mydf <- data.frame(myarray)
colnames(mydf) <- myvar[i]
print(mydf)
}
eachusers = c("aa", "bb", "cc")
eachusers = c("aa", "bb", "cc")
myusers <- data.frame(row.names = eachusers)
myusers
myusers <- data.frame(row.names = eachusers, Var0 = NA)
myusers <- data.frame(row.names = eachusers, Var0 = c(1,2,3))
myusers
for(i in 1:3){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
resarray = tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean)
resdf <- data.frame(resarray)
colnames(resdf) <- myvar[i]
myusers <- cbind(myusers, mydf)
print(mydf)
print(myusers)
}
eachusers = c("aa", "bb", "cc")
myusers <- data.frame(row.names = eachusers, Var0 = c(1,2,3))
myvar <- c("Var1", "Var2", "Var3")
varonly <- df[, -1]
for(i in 1:3){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
resarray = tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean)
resdf <- data.frame(resarray)
colnames(resdf) <- myvar[i]
print(resdf)
myusers <- cbind(myusers, resdf)
print(myusers)
}
myusers
# With an empty dataframe... ------------------------------------------------------
eachusers = c("aa", "bb", "cc")
myusers <- data.frame(row.names = eachusers)
myvar <- c("Var1", "Var2", "Var3")
varonly <- df[, -1]
mymean[[1]]
for(i in 1:length(myvar)){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
resarray = tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean)
resdf <- data.frame(resarray)
colnames(resdf) <- myvar[i]
print(resdf)
myusers <- cbind(myusers, resdf)
print(myusers)
}
myusers
# With an empty dataframe... This one works, too!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
eachusers = c("aa", "bb", "cc")
meansbyusersdf <- data.frame(row.names = eachusers)
myvar <- c("Var1", "Var2", "Var3")
for(i in 1:length(myvar)){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
resarray = tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean)
resdf <- data.frame(resarray)
colnames(resdf) <- myvar[i]
print(resdf)
meansbyusersdf <- cbind(meansbyusersdf, resdf)
print(meansbyusersdf)
}
myusers
meansbyusersdf
colnames(by_start_end)[-1]
myvar <- colnames(by_start_end)[-1]
unique(by_start_end[, 1])
category_by = unique(by_start_end[, 1])
category_by
meansbycategorydf <- data.frame(row.names = category_by)
meansbycategorydf
# Function to take average by a specified column.
AverageBy <- function(data, by, start.col, end.col){
library(dplyr)
# Column Variables of "totals" as a dataframe.
colvars <- names(data)
# Get the first ID
start.col <- match(start.col, colvars)
# Get the last ID
end.col <- match(end.col, colvars)
# Subset the 'by' column and the columns in the start-end range.
by_start_end <<- data[, c(which(colnames(data) == by), start.col:end.col)]
# Define which variablese to take means. and a list to save restuls
myvar <- colnames(by_start_end)[-1]
# Define the category entries to calculate means for.
category_by = unique(by_start_end[, 1])
# Create a dataframe with the rownames corresponding to the category entries to calculate means for.
meansbycategorydf <- data.frame(row.names = category_by)
# Calculate means for each colnames in myvar, and save them in mymeans.
for(i in 1:length(myvar)){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
resarray = tapply(X = by_start_end[, i+1], INDEX = as.factor(by_start_end[, 1]), FUN = mean)
resdf <- data.frame(resarray)   # save the results (array) as a dataframe.
colnames(resdf) <- myvar[i]     # name the column with the variable.
print(resdf)
meansbycategorydf <- cbind(meansbycategorydf, resdf)   # add the new resdf to the existing result meansbycategorydf.
print(meansbycategorydf)
}
meansbycategorydf
# for(i in 1:length(myvar)){
#   mymeans[[i]] <<- by_start_end %>%
#     group_by( get(by) ) %>%                      # by UserName
#     summarize(usersmean = mean(get(myvar[i])))   # calculate means for the ith variable.
#                                                  #   get() returns the content in between quotation marks
#   # mymeans[[i]]$vnames = myvar[i]               # add a column with the variable name (omit if unnecessary)
#   names(mymeans[i]) <- myvar[i]                # name the element of the list by your variable name
# }
}
# ---------------------------------------------------------------------------------------------------------------
AverageBy(data=totals, by="UserName", start.col = "PROT", end.col = "B12_ADD")
# Function to take average by a specified column.
AverageBy <- function(data, by, start.col, end.col){
library(dplyr)
# Column Variables of "totals" as a dataframe.
colvars <- names(data)
# Get the first ID
start.col <- match(start.col, colvars)
# Get the last ID
end.col <- match(end.col, colvars)
# Subset the 'by' column and the columns in the start-end range.
by_start_end <<- data[, c(which(colnames(data) == by), start.col:end.col)]
# Define which variablese to take means. and a list to save restuls
myvar <- colnames(by_start_end)[-1]
# Define the category entries to calculate means for.
category_by = unique(by_start_end[, 1])
# Create a dataframe with the rownames corresponding to the category entries to calculate means for.
meansbycategorydf <- data.frame(row.names = category_by)
# Calculate means for each colnames in myvar, and save them in mymeans.
for(i in 1:length(myvar)){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
resarray = tapply(X = by_start_end[, i+1], INDEX = as.factor(by_start_end[, 1]), FUN = mean)
resdf <- data.frame(resarray)   # save the results (array) as a dataframe.
colnames(resdf) <- myvar[i]     # name the column with the variable.
# print(resdf)
meansbycategorydf <- cbind(meansbycategorydf, resdf)   # add the new resdf to the existing result meansbycategorydf.
# print(meansbycategorydf)
}
meansbycategorydf
# for(i in 1:length(myvar)){
#   mymeans[[i]] <<- by_start_end %>%
#     group_by( get(by) ) %>%                      # by UserName
#     summarize(usersmean = mean(get(myvar[i])))   # calculate means for the ith variable.
#                                                  #   get() returns the content in between quotation marks
#   # mymeans[[i]]$vnames = myvar[i]               # add a column with the variable name (omit if unnecessary)
#   names(mymeans[i]) <- myvar[i]                # name the element of the list by your variable name
# }
}
# ---------------------------------------------------------------------------------------------------------------
AverageBy(data=totals, by="UserName", start.col = "PROT", end.col = "B12_ADD")
library(dplyr)
# Function to take average by a specified column.
AverageBy <- function(data, by, start.col, end.col){
library(dplyr)
# Column Variables of "totals" as a dataframe.
colvars <- names(data)
# Get the first ID
start.col <- match(start.col, colvars)
# Get the last ID
end.col <- match(end.col, colvars)
# Subset the 'by' column and the columns in the start-end range.
by_start_end <<- data[, c(which(colnames(data) == by), start.col:end.col)]
# Define which variablese to take means. and a list to save restuls
myvar <- colnames(by_start_end)[-1]
# Define the category entries to calculate means for.
category_by = unique(by_start_end[, 1])
# Create a dataframe with the rownames corresponding to the category entries to calculate means for.
meansbycategorydf <- data.frame(row.names = category_by)
# Calculate means for each colnames in myvar, and save them in mymeans.
for(i in 1:length(myvar)){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
resarray = tapply(X = by_start_end[, i+1], INDEX = as.factor(by_start_end[, 1]), FUN = mean)
resdf <- data.frame(resarray)   # save the results (array) as a dataframe.
colnames(resdf) <- myvar[i]     # name the column with the variable.
# print(resdf)
meansbycategorydf <- cbind(meansbycategorydf, resdf)   # add the new resdf to the existing result meansbycategorydf.
# print(meansbycategorydf)
}
# meansbycategorydf
# for(i in 1:length(myvar)){
#   mymeans[[i]] <<- by_start_end %>%
#     group_by( get(by) ) %>%                      # by UserName
#     summarize(usersmean = mean(get(myvar[i])))   # calculate means for the ith variable.
#                                                  #   get() returns the content in between quotation marks
#   # mymeans[[i]]$vnames = myvar[i]               # add a column with the variable name (omit if unnecessary)
#   names(mymeans[i]) <- myvar[i]                # name the element of the list by your variable name
# }
}
# ---------------------------------------------------------------------------------------------------------------
AverageBy(data=totals, by="UserName", start.col = "PROT", end.col = "B12_ADD")
dim(meansbycategorydf)
meansbycategorydf
# ---------------------------------------------------------------------------------------------------------------
AverageBy(data=totals, by="UserName", start.col = "PROT", end.col = "B12_ADD")
meansbycategorydf
# Function to take average by a specified column.
AverageBy <<- function(data, by, start.col, end.col){
library(dplyr)
# Column Variables of "totals" as a dataframe.
colvars <<- names(data)
# Get the first ID
start.col <<- match(start.col, colvars)
# Get the last ID
end.col <<- match(end.col, colvars)
# Subset the 'by' column and the columns in the start-end range.
by_start_end <<- data[, c(which(colnames(data) == by), start.col:end.col)]
# Define which variablese to take means. and a list to save restuls
myvar <<- colnames(by_start_end)[-1]
# Define the category entries to calculate means for.
category_by <<- unique(by_start_end[, 1])
# Create a dataframe with the rownames corresponding to the category entries to calculate means for.
meansbycategorydf <<- data.frame(row.names = category_by)
# Calculate means for each colnames in myvar, and save them in mymeans.
for(i in 1:length(myvar)){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
resarray <<- tapply(X = by_start_end[, i+1], INDEX = as.factor(by_start_end[, 1]), FUN = mean)
resdf <<- data.frame(resarray)   # save the results (array) as a dataframe.
colnames(resdf) <<- myvar[i]     # name the column with the variable.
# print(resdf)
meansbycategorydf <<- cbind(meansbycategorydf, resdf)   # add the new resdf to the existing result meansbycategorydf.
# print(meansbycategorydf)
}
# meansbycategorydf
# for(i in 1:length(myvar)){
#   mymeans[[i]] <<- by_start_end %>%
#     group_by( get(by) ) %>%                      # by UserName
#     summarize(usersmean = mean(get(myvar[i])))   # calculate means for the ith variable.
#                                                  #   get() returns the content in between quotation marks
#   # mymeans[[i]]$vnames = myvar[i]               # add a column with the variable name (omit if unnecessary)
#   names(mymeans[i]) <- myvar[i]                # name the element of the list by your variable name
# }
}
# ---------------------------------------------------------------------------------------------------------------
AverageBy(data=totals, by="UserName", start.col = "PROT", end.col = "B12_ADD")
# Function to take average by a specified column.
AverageBy <- function(data, by, start.col, end.col){
library(dplyr)
# Column Variables of "totals" as a dataframe.
colvars <<- names(data)
# Get the first ID
start.col <<- match(start.col, colvars)
# Get the last ID
end.col <<- match(end.col, colvars)
# Subset the 'by' column and the columns in the start-end range.
by_start_end <<- data[, c(which(colnames(data) == by), start.col:end.col)]
# Define which variablese to take means. and a list to save restuls
myvar <<- colnames(by_start_end)[-1]
# Define the category entries to calculate means for.
category_by <<- unique(by_start_end[, 1])
# Create a dataframe with the rownames corresponding to the category entries to calculate means for.
meansbycategorydf <<- data.frame(row.names = category_by)
# Calculate means for each colnames in myvar, and save them in mymeans.
for(i in 1:length(myvar)){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
resarray <<- tapply(X = by_start_end[, i+1], INDEX = as.factor(by_start_end[, 1]), FUN = mean)
resdf <<- data.frame(resarray)   # save the results (array) as a dataframe.
colnames(resdf) <<- myvar[i]     # name the column with the variable.
# print(resdf)
meansbycategorydf <<- cbind(meansbycategorydf, resdf)   # add the new resdf to the existing result meansbycategorydf.
# print(meansbycategorydf)
}
# meansbycategorydf
# for(i in 1:length(myvar)){
#   mymeans[[i]] <<- by_start_end %>%
#     group_by( get(by) ) %>%                      # by UserName
#     summarize(usersmean = mean(get(myvar[i])))   # calculate means for the ith variable.
#                                                  #   get() returns the content in between quotation marks
#   # mymeans[[i]]$vnames = myvar[i]               # add a column with the variable name (omit if unnecessary)
#   names(mymeans[i]) <- myvar[i]                # name the element of the list by your variable name
# }
}
# ---------------------------------------------------------------------------------------------------------------
AverageBy(data=totals, by="UserName", start.col = "PROT", end.col = "B12_ADD")
totals
# meansbycategorydf
start.col
end.col
colvars
start.col:end.col
which(colnames(data) == by)
which(colnames(data) == paste(by)
)
by <- "UserName"
data=totals
which(colnames(data) == by)
start.col:end.col
c(which(colnames(data) == by), start.col:end.col)
data[1, c(which(colnames(data) == by), start.col:end.col)]
by_start_end <- data[1, c(which(colnames(data) == by), start.col:end.col)]
by_start_end
by_start_end <- data[, c(which(colnames(data) == by), start.col:end.col)]
myvar <<- colnames(by_start_end)[-1]
myvar
category_by <<- unique(by_start_end[, 1])
category_by
meansbycategorydf <<- data.frame(row.names = category_by)
meansbycategorydf
length(myvar)
# Function to take average by a specified column.
AverageBy <- function(data, by, start.col, end.col){
library(dplyr)
# Column Variables of "totals" as a dataframe.
colvars <<- names(data)
# Get the first ID
start.col <<- match(start.col, colvars)
# Get the last ID
end.col <<- match(end.col, colvars)
# Subset the 'by' column and the columns in the start-end range.
by_start_end <<- data[, c(which(colnames(data) == by), start.col:end.col)]
# Define which variablese to take means. and a list to save restuls
myvar <<- colnames(by_start_end)[-1]
# Define the category entries to calculate means for.
category_by <<- unique(by_start_end[, 1])
# Create a dataframe with the rownames corresponding to the category entries to calculate means for.
meansbycategorydf <<- data.frame(row.names = category_by)
# Calculate means for each colname in myvar.
for(i in 1:length(myvar)){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
resarray <<- tapply(X = by_start_end[, i+1], INDEX = as.factor(by_start_end[, 1]), FUN = mean)
resdf <<- data.frame(resarray)   # save the results (array) as a dataframe.
colnames(resdf) <<- myvar[i]     # name the column with the variable.
# print(resdf)
meansbycategorydf <<- cbind(meansbycategorydf, resdf)   # add the new resdf to the existing result meansbycategorydf.
# print(meansbycategorydf)
}
# meansbycategorydf
}
# ---------------------------------------------------------------------------------------------------------------
AverageBy(data=totals, by="UserName", start.col = "PROT", end.col = "B12_ADD")
# ---------------------------------------------------------------------------------------------------------------
AverageBy(data=totals, by="UserName", start.col = PROT, end.col = B12_ADD)
# Function to take average by a specified column.
AverageBy <- function(data, by, start.col, end.col){
library(dplyr)
# Column Variables of "totals" as a dataframe.
colvars <<- names(data)
# Get the first ID
start.col <<- match(start.col, colvars)
# Get the last ID
end.col <<- match(end.col, colvars)
# Subset the 'by' column and the columns in the start-end range.
by_start_end <<- data[, c(which(colnames(data) == by), start.col:end.col)]
# Define which variablese to take means. and a list to save restuls
myvar <<- colnames(by_start_end)[-1]
# Define the category entries to calculate means for.
category_by <<- unique(by_start_end[, 1])
# Create a dataframe with the rownames corresponding to the category entries to calculate means for.
meansbycategorydf <<- data.frame(row.names = category_by)
print(category_by)
# Calculate means for each colname in myvar.
# for(i in 1:length(myvar)){
#   # mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
#   resarray <<- tapply(X = by_start_end[, i+1], INDEX = as.factor(by_start_end[, 1]), FUN = mean)
#   resdf <<- data.frame(resarray)   # save the results (array) as a dataframe.
#   colnames(resdf) <<- myvar[i]     # name the column with the variable.
#   # print(resdf)
#   meansbycategorydf <<- cbind(meansbycategorydf, resdf)   # add the new resdf to the existing result meansbycategorydf.
# print(meansbycategorydf)}
}
# meansbycategorydf
# ---------------------------------------------------------------------------------------------------------------
AverageBy(data=totals, by="UserName", start.col = "PROT", end.col = "B12_ADD")
# Function to take average by a specified column.
AverageBy <- function(data, by, start.col, end.col){
library(dplyr)
# Column Variables of "totals" as a dataframe.
colvars <<- names(data)
# Get the first ID
start_col_number <<- match(start.col, colvars)
# Get the last ID
end_col_number <<- match(end.col, colvars)
# Subset the 'by' column and the columns in the start-end range.
by_start_end <<- data[, c(which(colnames(data) == by), start_col_number:end_col_number)]
# Define which variablese to take means. and a list to save restuls
myvar <<- colnames(by_start_end)[-1]
# Define the category entries to calculate means for.
category_by <<- unique(by_start_end[, 1])
# Create a dataframe with the rownames corresponding to the category entries to calculate means for.
meansbycategorydf <<- data.frame(row.names = category_by)
print(category_by)
# Calculate means for each colname in myvar.
# for(i in 1:length(myvar)){
#   # mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
#   resarray <<- tapply(X = by_start_end[, i+1], INDEX = as.factor(by_start_end[, 1]), FUN = mean)
#   resdf <<- data.frame(resarray)   # save the results (array) as a dataframe.
#   colnames(resdf) <<- myvar[i]     # name the column with the variable.
#   # print(resdf)
#   meansbycategorydf <<- cbind(meansbycategorydf, resdf)   # add the new resdf to the existing result meansbycategorydf.
# print(meansbycategorydf)}
}
# meansbycategorydf
# ---------------------------------------------------------------------------------------------------------------
AverageBy(data=totals, by="UserName", start.col = "PROT", end.col = "B12_ADD")
# Function to take average by a specified column.
AverageBy <- function(data, by, start.col, end.col){
library(dplyr)
# Column Variables of "totals" as a dataframe.
colvars <<- names(data)
# Get the first ID
start_col_number <<- match(start.col, colvars)
# Get the last ID
end_col_number <<- match(end.col, colvars)
# Subset the 'by' column and the columns in the start-end range.
by_start_end <<- data[, c(which(colnames(data)==by), start_col_number:end_col_number)]
# Define which variablese to take means. and a list to save restuls
myvar <<- colnames(by_start_end)[-1]
# Define the category entries to calculate means for.
category_by <<- unique(by_start_end[, 1])
# Create a dataframe with the rownames corresponding to the category entries to calculate means for.
meansbycategorydf <<- data.frame(row.names = category_by)
# Calculate means for each colname in myvar.
for(i in 1:length(myvar)){
# mymean <<- tapply(X = df[, i+1], INDEX = as.factor(df[, 1]), FUN = mean )
resarray <<- tapply(X = by_start_end[, i+1], INDEX = as.factor(by_start_end[, 1]), FUN = mean)
resdf <<- data.frame(resarray)   # save the results (array) as a dataframe.
colnames(resdf) <<- myvar[i]     # name the column with the variable.
# print(resdf)
meansbycategorydf <<- cbind(meansbycategorydf, resdf)   # add the new resdf to the existing result meansbycategorydf.
# print(meansbycategorydf)
}
}
# meansbycategorydf
# ---------------------------------------------------------------------------------------------------------------
AverageBy(data=totals, by="UserName", start.col = "PROT", end.col = "B12_ADD")
meansbycategorydf
dim(meansbycategorydf)
colnames(meansbycategorydf)
rownames(meansbycategorydf)
meansbycategorydf[, 1:2]
by_start_end %>% group_by(UserName) %>% summarise(mymean = mean(PROT))
protmean = by_start_end %>% group_by(UserName) %>% summarise(mymean = mean(PROT))
is(protmean)
protmeann = as.data.frame(protmean)
protmeann
head(protmeann,10)
meansbycategorydf[, 1:2]
meansbycategorydf[10, 1:2]
head(protmeann,10)
meansbycategorydf[1:10, 1:2]
head(protmeann,10)
protmean = by_start_end %>% group_by(UserName) %>% summarise(mymean = mean(TFAT))
protmeann = as.data.frame(protmean)
head(protmeann,10)
protmean = by_start_end %>% group_by(UserName) %>% summarise(mymean = mean(B12_ADD))
protmeann = as.data.frame(protmean)
head(protmeann,10)
meansbycategorydf[1:10, c(1,64)]
