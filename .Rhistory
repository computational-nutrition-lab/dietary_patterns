# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t") # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
as.data.frame(table(mydata$V1))
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t")
write.table(V1table, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
# mycol
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t", row.names = F)
#### RESUME FROM HERE #####
setwd("~/GitHub/dietary_patterns")
# ========================================================================================
# Load source scripts
# ========================================================================================
source("lib/Food_tree_scripts/newick.tree.r")
source("lib/Food_tree_scripts/check.db.r")
source("lib/Food_tree_scripts/format.foods.r")
source("lib/Food_tree_scripts/filter.db.by.diet.records.r")
source("lib/Food_tree_scripts/make.food.tree.r")
source("lib/Food_tree_scripts/make.food.otu.r")
source("lib/Food_tree_scripts/make.fiber.otu.r")
source("lib/Food_tree_scripts/make.dhydrt.otu.r")
# check if there is any food item reported by people but are missing in the database.
check.db(food_database_fn = "eg_data/NHANES1516/processed/NHANESDatabase.txt",
food_records_fn =  "eg_data/NHANES/Food_D12_FC_cc_f.txt",
output_fn = "eg_data/NHANES/Food_D12_FC_cc_f_missing.txt")
# What does the output look like?
rrr = read.table("eg_data/NHANES/Food_D12_FC_cc_f_missing.txt", sep="\t", header=T)
head(rrr)
# Make a food tree with all the possible foods
MakeFoodTree(nodes_fn="data/Food_tree_data/NodeLabelsMCT.txt", # can use this for now.
addl_foods_fn =   NULL,
num.levels = 2,
food_database_fn= "eg_data/NHANES/Food_D12_FC_cc_f.txt",
output_tree_fn=      "results/Food_tree_NHANES/Food_D12_FC_cc_f_Lv2.txt",
output_taxonomy_fn = "results/Food_tree_NHANES/Food_D12_FC_cc_f_Lv2.taxonomy.txt"
)
# ========================================================================================
# Load source scripts
# ========================================================================================
source("lib/viz_food_tree.r")
# --------------------------------------------------------------------------------------------------------------
# Viz food tree.
source("lib/viz_food_tree.r")
# Load your ggtree object.
tree <- read.tree("results/Food_tree_NHANES/Food_D12_FC_cc_f_Lv2.txt")
# Use ggtree to plot the tree. It is critical to have 'ladderize=F' argument to preserve your L1 order.
mytreeplot <- ggtree(tree, ladderize=F, layout = 'radial') +
geom_tiplab()
mytreeplot
# Without the tip labels.
mytreeplot <- ggtree(tree, ladderize = F, layout = 'radial')
mytreeplot
# ---------------------------------------------------------------------------------------------------------------
# Prepare node labels of L1 for plotting. It assumes that there are 9 L1 levels.
PrepFoodTreePlots(input.tree=tree)
# Create a color-coded and annotated food tree with 9 L1 levels.
# Choose either 'circular' or 'radial' for layout.
# It is OK to see some warning messages about Coordinate system and scale for 'y' already being present.
VizFoodTree(input.tree=tree, layout="radial")
# Look at the color-coded and annotated food tree, saved as tree_an_hi_o_rt.
tree_an_hi_o_rt
# Make a food tree with all the possible foods
MakeFoodTree(nodes_fn="data/Food_tree_data/NodeLabelsMCT.txt", # can use this for now.
addl_foods_fn =   NULL,
num.levels = 2,
food_database_fn= "eg_data/NHANES1516/processed/NHANESDatabase.txt",
output_tree_fn=      "results/Food_tree_NHANES/NHANESDatabase_Lv2.txt",
output_taxonomy_fn = "results/Food_tree_NHANES/NHANESDatabase_Lv2.taxonomy.txt"
)
# --------------------------------------------------------------------------------------------------------------
# Limit to just the foods reported in your study (formatted dietrecords.txt as the input)
wwww = read.table("eg_data/NHANES/Food_D12_FC_cc_f.txt", sep="\t", header=T)
dim(www)
dim(wwww)
head(wwww, 1)
FilterDbByDietRecords(food_database_fn = "eg_data/NHANES1516/processed/NHANESDatabase.txt",
food_records_fn  = "eg_data/NHANES/Food_D12_FC_cc_f.txt",   # output of FormatFoods.
output_fn = "eg_data/NHANES1516/processed/NHANES/Food_D12_FC_cc_f_red.txt")
FilterDbByDietRecords(food_database_fn = "eg_data/NHANES1516/processed/NHANESDatabase.txt",
food_records_fn  = "eg_data/NHANES/Food_D12_FC_cc_f.txt",   # output of FormatFoods.
output_fn =        "eg_data/NHANES/Food_D12_FC_cc_f_red.txt")
yyy = read.table("eg_data/NHANES/Food_D12_FC_cc_f_red.txt", sep="\t", header=T)
# Maybe I can create food tree out of it regardless...
MakeFoodTree(nodes_fn="data/Food_tree_data/NodeLabelsMCT.txt", # can use this for now.
addl_foods_fn = NULL,
num.levels = 2,
food_database_fn= "eg_data/NHANES/Food_D12_FC_cc_f_red.txt",  # This one is reduced....???
output_tree_fn=      "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv2.txt",
output_taxonomy_fn = "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv2.taxonomy.txt"
)
# Load your ggtree object.
tree <- read.tree("results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv2.txt")
# ---------------------------------------------------------------------------------------------------------------
# Prepare node labels of L1 for plotting. It assumes that there are 9 L1 levels.
PrepFoodTreePlots(input.tree=tree)
# Create a color-coded and annotated food tree with 9 L1 levels.
# Choose either 'circular' or 'radial' for layout.
# It is OK to see some warning messages about Coordinate system and scale for 'y' already being present.
VizFoodTree(input.tree=tree, layout="radial")
# Look at the color-coded and annotated food tree, saved as tree_an_hi_o_rt.
tree_an_hi_o_rt
# Make a food tree with all the possible foods
MakeFoodTree(nodes_fn="data/Food_tree_data/NodeLabelsMCT.txt", # can use this for now.
addl_foods_fn =   NULL,
num.levels = 2,
food_database_fn= "eg_data/NHANES1516/processed/NHANESDatabase.txt",
output_tree_fn=      "results/Food_tree_NHANES/NHANESDatabase_Lv2.txt",
output_taxonomy_fn = "results/Food_tree_NHANES/NHANESDatabase_Lv2.taxonomy.txt"
)
# Load your ggtree object.
tree <- read.tree("results/Food_tree_NHANES/NHANESDatabase_Lv2.txt")
# Without the tip labels.
mytreeplot <- ggtree(tree, ladderize = F, layout = 'radial')
mytreeplot
# ---------------------------------------------------------------------------------------------------------------
# Prepare node labels of L1 for plotting. It assumes that there are 9 L1 levels.
PrepFoodTreePlots(input.tree=tree)
# Create a color-coded and annotated food tree with 9 L1 levels.
# Choose either 'circular' or 'radial' for layout.
# It is OK to see some warning messages about Coordinate system and scale for 'y' already being present.
VizFoodTree(input.tree=tree, layout="radial")
# Look at the color-coded and annotated food tree, saved as tree_an_hi_o_rt.
tree_an_hi_o_rt
# Maybe I can create food tree out of it regardless...
MakeFoodTree(nodes_fn="data/Food_tree_data/NodeLabelsMCT.txt", # can use this for now.
addl_foods_fn = NULL,
num.levels = 3,
food_database_fn= "eg_data/NHANES/Food_D12_FC_cc_f_red.txt",  # This one is reduced....???
output_tree_fn=      "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv3.txt",
output_taxonomy_fn = "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv3.taxonomy.txt"
)
tree <- read.tree("results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv3.txt")
PrepFoodTreePlots(input.tree=tree)
# Create a color-coded and annotated food tree with 9 L1 levels.
# Choose either 'circular' or 'radial' for layout.
# It is OK to see some warning messages about Coordinate system and scale for 'y' already being present.
VizFoodTree(input.tree=tree, layout="radial")
# Look at the color-coded and annotated food tree, saved as tree_an_hi_o_rt.
tree_an_hi_o_rt
# Maybe I can create food tree out of it regardless...
MakeFoodTree(nodes_fn="data/Food_tree_data/NodeLabelsMCT.txt", # can use this for now.
addl_foods_fn = NULL,
num.levels = 4,
food_database_fn= "eg_data/NHANES/Food_D12_FC_cc_f_red.txt",  # This one is reduced....???
output_tree_fn=      "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv4.txt",
output_taxonomy_fn = "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv4.taxonomy.txt"
)
tree <- read.tree("results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv4.txt")
PrepFoodTreePlots(input.tree=tree)
# Create a color-coded and annotated food tree with 9 L1 levels.
# Choose either 'circular' or 'radial' for layout.
# It is OK to see some warning messages about Coordinate system and scale for 'y' already being present.
VizFoodTree(input.tree=tree, layout="radial")
# Look at the color-coded and annotated food tree, saved as tree_an_hi_o_rt.
tree_an_hi_o_rt
# Maybe I can create food tree out of it regardless...
MakeFoodTree(nodes_fn="data/Food_tree_data/NodeLabelsMCT.txt", # can use this for now.
addl_foods_fn = NULL,
num.levels = 5,
food_database_fn= "eg_data/NHANES/Food_D12_FC_cc_f_red.txt",  # This one is reduced....???
output_tree_fn=      "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.txt",
output_taxonomy_fn = "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.taxonomy.txt"
)
tree <- read.tree("results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.txt")
PrepFoodTreePlots(input.tree=tree)
# Create a color-coded and annotated food tree with 9 L1 levels.
# Choose either 'circular' or 'radial' for layout.
# It is OK to see some warning messages about Coordinate system and scale for 'y' already being present.
VizFoodTree(input.tree=tree, layout="radial")
# Look at the color-coded and annotated food tree, saved as tree_an_hi_o_rt.
tree_an_hi_o_rt
# check if there is any food item reported by people but are missing in the database.
check.db(food_database_fn = "eg_data/NHANES1516/processed/NHANESDatabase.txt",
food_records_fn =  "eg_data/NHANES/Food_D12_FC_cc_f_red.txt",
output_fn =        "eg_data/NHANES/Food_D12_FC_cc_f_red_missing.txt")
# Does the output contain anything?
# Yes ===> put this missing.txt file in
rrr = read.table("eg_data/NHANES/Food_D12_FC_cc_f_red_missing.txt", sep="\t", header=T)
head(rrr)
# --------------------------------------------------------------------------------------------------------------
# Make the standard food otu table with data in gram weights of food.
MakeFoodOtu(food_records_fn=  "eg_data/NHANES/Food_D12_FC_cc_f_red.txt",
food_record_id =  "SEQN",                       # Specify the ID of your participants
food_taxonomy_fn= "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.taxonomy.txt",  # Specify your taxonomy file produced by MakeFoodTree.
output_fn =       "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.food.otu.txt")  # Name your output otu file.
View(MakeFoodOtu)
# Make the standard food otu table with data in gram weights of food.
MakeFoodOtu(food_records_fn=  "data/Food_tree_data/dietrecords.txt",
food_record_id =  "X.SampleID",                       # Specify the ID of your participants
food_taxonomy_fn= "results/Food_tree_ASA24/mct_Lv2.taxonomy_2.txt",  # Specify your taxonomy file produced by MakeFoodTree.
output_fn =       "results/Food_tree_ASA24/mct_Lv2.food.otu_2.txt")  # Name your output otu file.
# Make the standard food otu table with data in gram weights of food.
MakeFoodOtu(food_records_fn=  "data/Food_tree_data/dietrecords.txt",
food_record_id =  "X.SampleID",                       # Specify the ID of your participants
food_taxonomy_fn= "results/Food_tree_ASA24/mct_Lv2.taxonomy.txt",  # Specify your taxonomy file produced by MakeFoodTree.
output_fn =       "results/Food_tree_ASA24/mct_Lv2.food.otu_2.txt")  # Name your output otu file.
# --------------------------------------------------------------------------------------------------------------
# Make the standard food otu table with data in gram weights of food.
MakeFoodOtu(food_records_fn=  "eg_data/NHANES/Food_D12_FC_cc_f_red.txt",
food_record_id =  "SEQN",                       # Specify the ID of your participants
food_taxonomy_fn= "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.taxonomy.txt",  # Specify your taxonomy file produced by MakeFoodTree.
output_fn =       "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.food.otu.txt")  # Name your output otu file.
# Make a food otu table with data in grams of fiber per food
MakeFiberOtu(food_records_fn=  "eg_data/NHANES/Food_D12_FC_cc_f_red.txt",
food_record_id=   "SEQN",
food_taxonomy_fn= "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.taxonomy.txt",
output_fn=        "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.fiber.otu.txt")
# Make a food otu table as dehydrated grams per kcal
MakeDhydrtOtu(food_records_fn=  "eg_data/NHANES/Food_D12_FC_cc_f_red.txt",
food_record_id =  "SEQN",
food_taxonomy_fn= "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.taxonomy.txt",
output_fn =       "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.dhydrt.otu.txt")
food_records_fn=  "eg_data/NHANES/Food_D12_FC_cc_f_red.txt"
food_record_id =  "SEQN"                       # Specify the ID of your participants
food_taxonomy_fn= "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.taxonomy.txt"  # Specify your taxonomy file produced by MakeFoodTree.
output_fn =       "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.food.otu.txt"  # Name your output otu file.
# read everything in as a character to preserve numeric food codes and IDs
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)
head(diet)
diet$FoodAmt <- as.numeric(diet$FoodAmt)
head(diet)
food_records_fn=  "eg_data/NHANES/Food_D12_FC_cc_f.txt"
# read everything in as a character to preserve numeric food codes and IDs
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)
head(diet)
# read everything in as a character to preserve numeric food codes and IDs
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)
diet$FoodAmt <- as.numeric(diet$FoodAmt)
# sum total grams of each food eaten within a record
cdiet <- aggregate(diet$FoodAmt, by=list(diet[, food_record_id], diet$FoodID), FUN=sum)
colnames(cdiet) <- c(food_record_id, "FoodID", "total.grams")
colnames(cdiet)
cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = food_record_id, direction = "wide")
cdiet.w[is.na(cdiet.w)] <- 0
rownames(cdiet.w) <- cdiet.w[, 1] # make record_ids the rownames
cdiet.w <- cdiet.w[, -1]
colnames(cdiet.w) <- gsub("total.grams.", "", colnames(cdiet.w)) #rename column names to FoodIDs only
t.cdiet.w <- t(cdiet.w)
food.taxonomy <- read.table(food_taxonomy_fn, sep="\t", colClasses="character", quote="", header=T, row=1)
food.otu <- merge(t.cdiet.w, food.taxonomy, by=0)
rownames(food.otu)
# Get rid of the FoodIDs and replace it with the food tree leaf names
rownames(food.otu) <- food.otu[, "Main.food.description"]
remove.col.ix <- which(colnames(food.otu) %in% c("Main.food.description", "Row.names")) # Column numbers of the specified columns.
remove.col.ix
food.otu <- food.otu[, -remove.col.ix]
# --------------------------------------------------------------------------------------------------------------
# Make the standard food otu table with data in gram weights of food.
MakeFoodOtu(food_records_fn=  "eg_data/NHANES/Food_D12_FC_cc_f.txt", # need to supply data that have 'FoodAmt' before applying FilterDBByDietRecords.
food_record_id =  "SEQN",                       # Specify the ID of your participants
food_taxonomy_fn= "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.taxonomy.txt",  # Specify your taxonomy file produced by MakeFoodTree.
output_fn =       "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.food.otu.txt")  # Name your output otu file.
# Get rid of the FoodIDs and replace it with the food tree leaf names
rownames(food.otu) <- food.otu[, "Main.food.description"]
# food_records_fn=  "eg_data/NHANES/Food_D12_FC_cc_f_red.txt" # This doesn't have FoodAmt, that's why it gives error.
food_records_fn=  "eg_data/NHANES/Food_D12_FC_cc_f.txt"
food_record_id =  "SEQN"                       # Specify the ID of your participants
food_taxonomy_fn= "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.taxonomy.txt"  # Specify your taxonomy file produced by MakeFoodTree.
output_fn =       "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.food.otu.txt"  # Name your output otu file.
# read everything in as a character to preserve numeric food codes and IDs
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)
head(diet)
diet$FoodAmt <- as.numeric(diet$FoodAmt)
# sum total grams of each food eaten within a record
cdiet <- aggregate(diet$FoodAmt, by=list(diet[, food_record_id], diet$FoodID), FUN=sum)
colnames(cdiet) <- c(food_record_id, "FoodID", "total.grams")
cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = food_record_id, direction = "wide")
cdiet.w[is.na(cdiet.w)] <- 0
rownames(cdiet.w) <- cdiet.w[, 1] # make record_ids the rownames
cdiet.w <- cdiet.w[, -1]
colnames(cdiet.w) <- gsub("total.grams.", "", colnames(cdiet.w)) #rename column names to FoodIDs only
t.cdiet.w <- t(cdiet.w)
food.taxonomy <- read.table(food_taxonomy_fn, sep="\t", colClasses="character", quote="", header=T, row=1)
food.otu <- merge(t.cdiet.w, food.taxonomy, by=0)
# Get rid of the FoodIDs and replace it with the food tree leaf names
rownames(food.otu) <- food.otu[, "Main.food.description"]
remove.col.ix <- which(colnames(food.otu) %in% c("Main.food.description", "Row.names")) # Column numbers of the specified columns.
food.otu <- food.otu[, -remove.col.ix]
# Write "#FOODID\t" in a file specified. Creating the first row of output.
cat("#FOODID\t", file=output_fn)
# Make a food otu table with data in grams of fiber per food
MakeFiberOtu(food_records_fn=  "eg_data/NHANES/Food_D12_FC_cc_f.txt",
food_record_id=   "SEQN",
food_taxonomy_fn= "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.taxonomy.txt",
output_fn=        "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.fiber.otu.txt")
# Make a food otu table as dehydrated grams per kcal
MakeDhydrtOtu(food_records_fn=  "eg_data/NHANES/Food_D12_FC_cc_f.txt",
food_record_id =  "SEQN",
food_taxonomy_fn= "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.taxonomy.txt",
output_fn =       "results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.dhydrt.otu.txt")
# load the necessary packages.
library(phyloseq)
library(ggtree)
library(ggplot2)
# Define ggplot2 arguments and themes first.
theme1 <- theme_bw(base_size = 16) +
theme(axis.title.x=element_text(margin=margin(t = 10, r = 0, b = 0, l = 0))) +
theme(axis.title.y=element_text(margin=margin(t = 0, r = 10, b = 0, l = 0))) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(aspect.ratio = 1)
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("~/GitHub/R_Toolbox/distinct100colors.rda")
# Load the necessary scripts.
source("lib/unifrac_ordination.R")
# Food
# Load food OTU table - this is our food OTU data
food <- read.delim("results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.dhydrt.otu.txt", row.names = 1)
# food <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_4Lv.dhydrt.otu.txt", row.names = 1)
# food <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.dhydrt.otu.txt", row.names = 1)
# Format the food file and create a otu_table called OTU.
PrepFood(data=food)
# Taxonomy (tax)
tax <- read.delim("results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.taxonomy.txt")
# tax <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_4Lv.taxonomy.txt")
# tax <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Sample
meta <- read.csv( "~/GitHub/dietary_patterns/eg_data/dietstudy/food_map_txt_Metadata_2.csv",
row.names = 1, check.names = F)
head(meta)
View(PrepMeta)
View(food)
head(food)
head(food,1)
# Remove children.
# Load the demographics file, then filter by age > 18.
demog <- read.xport("eg_data/NHANES/DEMO_I.XPT")
# Load necessary packages.
library(SASxport)
# Remove children.
# Load the demographics file, then filter by age > 18.
demog <- read.xport("eg_data/NHANES/DEMO_I.XPT")
head(demog)
head(demog)
colnames(food)
head(colnames(food), 10)
# Format the metafile and save it as 'SAMPLES'.
PrepMeta(data=demog)
View(meta2)
head(tax)
head(meta)
demog <- read.xport("eg_data/NHANES/DEMO_I.XPT")
head(demog)
# Format the metafile and save it as 'SAMPLES'.
PrepMeta(data = demog)
# Sample
# MCT
meta <- read.csv( "~/GitHub/dietary_patterns/eg_data/dietstudy/food_map_txt_Metadata_2.csv", row.names = 1, check.names = F)
head(meta)
data= meta
colnames(food)
#subset metadata to the correct samples
meta2 <- data[colnames(food), ]
head(meta2)
head(meta)
head(food,1)
food[1:10, 1:10]
head(demog)
data(iris)
head(iris)
data(mpg)
head(mpg)
rownames(mpg)
data(mtcars)
rownames(mtcars)
rownames(mtcars) <- gsub(pattern=" ", replacement = "_")
rownames(mtcars) <- gsub(x= rownames(mtcars), pattern=" ", replacement = "_")
rownames(mtcars)
food = data.frame(Mazda_RX4=c(1,2,3),
Mazda_RX4_Wag =c(2,3,4),
Datsun_710 = c(4,5,6) )
colnames(food)
meta2 <- mtcars[colnames(food), ]
head(meta2)
# Food
# Load food OTU table - this is our food OTU data
food <- read.delim("results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.dhydrt.otu.txt", row.names = 1)
# food <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_4Lv.dhydrt.otu.txt", row.names = 1)
# food <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.dhydrt.otu.txt", row.names = 1)
# Format the food file and create a otu_table called OTU.
PrepFood(data=food)
head(food)
food[1:10, 1:10]
# Taxonomy (tax)
tax <- read.delim("results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.taxonomy.txt")
# tax <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_4Lv.taxonomy.txt")
# tax <- read.delim("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# NHANES
demog <- read.xport("eg_data/NHANES/DEMO_I.XPT")
# demog needs to have
head(demog)
head(meta, 1)
c("X", demog$SEQN, sep="")
paste("X", demog$SEQN, sep="")
# demog needs to have SEQN as rownames in order to use it in PrepMeta function.
rownames(demog) <- paste("X", demog$SEQN, sep="")
head(demog)
food[1:10, 1:10]
data= demog
#subset metadata to the correct samples
meta2 <- data[colnames(food), ]
head(meta2)
nrow(demog)
nrow(meta2)
PrepMeta(data=demog)
head(meta2)
# Food tree
# foodtree <- read_tree("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_4Lv.tree.nwk")
# foodtree <- read_tree("~/GitHub/dietary_patterns/results/Food_tree_results/mct.reduced_1Lv.tree.nwk")
foodtree <- read_tree("results/Food_tree_NHANES/Food_D12_FC_cc_f_red_Lv5.txt")
# It is OK to see a message that says:
# "Found more than one class "phylo" in cache; using the first, from namespace 'phyloseq'
# Also defined by 'tidytree'"
# Format food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s = tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Perform Principal Coordinate Analysis (PCoA) with weighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=T)
