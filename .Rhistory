# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# Freq table with 2 variables.===========================================================
mydata = read.table(file="clipboard", sep="\t") # sep="," for 1 column, sep="\t" for multiple columns
# write.table(mycol, "clipboard", sep="\t")
# mydata
head(mydata)
tail(mydata)
nrow(mydata)
as.data.frame(table(mydata$V1))
V1table = as.data.frame(table(mydata$V1))
write.table(V1table, "clipboard", sep="\t")
write.table(V1table, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t", row.names = F)
# Useful! Get counts of data from Excel =========================================================
# Get data (One column) from Clipboard ================================================
mycol = read.table(file="clipboard", sep=",") # sep="," for 1 column, sep="\t" for multiple columns
#write.table(mycol, "clipboard", sep="\t")
head(mycol)
nrow(mycol)
# mycol
bbb = as.data.frame(table(mycol))
# mycol
bbb = as.data.frame(table(mycol))
bbb
write.table(bbb, "clipboard", sep="\t", row.names = F)
# Load total nutrient intake of day 1 or day 2. Day 1 has more columns that can be used as metadata.
nhanes1516_totals1 <- read.xport('E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/Total_Nutrient_Day1_DR1TOT_J.XPT')
# Load necessary packages.
library(SASxport)
library(foreign)
# Set where the NHANES data and food code table are.
# it is not in the eg_data folder because it's too large to save in GitHub folder.
# setwd("E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16")
setwd("~/GitHub/dietary_patterns")
# Load necessary functions.
source("lib/load_clean_NHANES.R")
# Load total nutrient intake of day 1 or day 2. Day 1 has more columns that can be used as metadata.
nhanes1516_totals1 <- read.xport('E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/Total_Nutrient_Day1_DR1TOT_J.XPT')
nhanes1516_totals2 <- read.xport('E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/Total_Nutrient_Day2_DR2TOT_J.XPT')
# How many participants are in the total dataset?
length(unique(nhanes1516_totals1$SEQN))   # 8704 for totals day 1.
length(unique(nhanes1516_totals2$SEQN))   # 8704 for totals day 2.
# On a special diet?
table(nhanes1516_totals1$DRQSDIET)
# ---------------------------------------------------------------------------------------------------------------
# Status code - Only retain complete entries.
# Code descriptions in Analytic notes: https://wwwn.cdc.gov/Nchs/Nhanes/2017-2018/DR1IFF_J.htm#Analytic_Notes
#  1: reliable and all relevant variables associated with the 24-hour dietary recall contain a value.
table(nhanes1516_totals1$DR1DRSTZ)
table(nhanes1516_totals2$DR2DRSTZ)
# Take only DR1DRSTZ = 1
nhanes_totals_1 <- subset(nhanes1516_totals1, DR1DRSTZ == 1)
nhanes_totals_2 <- subset(nhanes1516_totals2, DR2DRSTZ == 1)
table(nhanes_totals_1$DR1DRSTZ)
# How many participants selected?
length(unique(nhanes_totals_1$SEQN))
length(unique(nhanes_totals_2$SEQN))
matched = merge(x=nhanes_totals_2, y=nhanes_totals_1, by = "SEQN", all.x = T)
length(unique(matched$SEQN)) # So, day 1 data is all included in Day 2 data.
colnames(nhanes_totals_1)
colnames(nhanes_totals_2)
head(nhanes_totals_1, 1)
table(nhanes_totals_1$DRDINT)
table(nhanes_totals_2$DRDINT)
d <- read.table(text=
'Name     Month  Rate1     Rate2
Aira       1      12        23
Aira       2      18        73
Aira       3      19        45
Ben        1      53        19
Ben        2      22        87
Ben        3      19        45
Cat        1      22        87
Cat        2      67        43
Cat        3      45        32', header=TRUE)
aggregate(d[, 3:4], list(d$Name), mean)
aggregate(d[, 3:4], mean)
aggregate(d[, 3:4], FUN=mean)
aggregate(d[, 3:4], by=d$Name, FUN=mean)
aggregate(d[, 3:4], by=list(d$Name), FUN=mean)
d[, "Rate*"]
df <- data.frame(1:3, 3:1, 11:13, 13:11, rep(1, 3))
df
names(df) <- c("FullColName1", "FullColName2", "FullColName3",
"PartString1()","PartString2()")
df
df[grepl("[[:punct:]]", names(df))]
checkExpression <- function(dataset,str){
cols <- grepl(paste0("^",str),colnames(dataset),ignore.case = TRUE)
subset(dataset,select=colnames(dataset)[cols])
}
checkExpression(dataset = df, str = "Past")
checkExpression(dataset = df, str = "Part")
checkExpression(dataset = df, str = "()")
checkExpression(dataset = df, str = "(")
checkExpression <- function(dataset, starting.str){
cols <- grepl(paste0("^", starting.str),colnames(dataset), ignore.case = TRUE)
subset(dataset, select=colnames(dataset)[cols])
}
checkExpression(dataset = df, starting.str = "")
checkExpression(dataset = df, starting.str = "Full")
CheckExpression <- function(dataset, starting.str){
cols <- grepl(paste0("^", starting.str),colnames(dataset), ignore.case = TRUE)
subset(dataset, select=colnames(dataset)[cols])
}
rm(checkExpression)
colnames(nhanes_totals_1)
CheckExpression(dataset = nhanes_totals_1, starting.str = "DR1")
droneonly = CheckExpression(dataset = nhanes_totals_1, starting.str = "DR1")
colnames(droneonly)
droneonly = CheckExpression(dataset = nhanes_totals_1, starting.str = "DR1T")
colnames(nhanes_totals_1)
colnames(droneonly)
gsub(colnames(droneonly), pattern = "DR1T", replacement = "")
colnames(droneonly) <- gsub(colnames(droneonly), pattern = "DR1T", replacement = "")
colnames(droneonly)
droneonly$Day <- 1
head(droneonly)
# Pick up only the columns that start with "DR2T"
drtwoonly = CheckExpression(dataset = nhanes_totals_2, starting.str = "DR2T")
colnames(drtwoonly)
colnames(droneonly)
# Pick up only the columns that start with "DR1T"
droneonly = CheckExpression(dataset = nhanes_totals_1, starting.str = "DR1T")
colnames(droneonly)
colnames(drtwoonly)
# Remove "DR2T" from the column names
colnames(drtwoonly) <- gsub(colnames(drtwoonly), pattern = "DR2T", replacement = "")
drtwoonly$Day <- Day2
drtwoonly$Day <- "Day2"
head(drtwoonly)
CheckExpression <- function(dataset, starting.str){
cols <- grepl(c("SEQN", paste0("^", starting.str)), colnames(dataset), ignore.case = TRUE)
subset(dataset, select=colnames(dataset)[cols])
}
# Pick up only the columns that start with "DR1T"
droneonly = CheckExpression(dataset = nhanes_totals_1, starting.str = "DR1T")
