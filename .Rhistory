# cc is the correlation matrix produced when variables are collapsed by correlation.
SaveCorrMatrix(x=cc, out.fn = "results/PCA_results/2 days 50 ind/NHANES_2days_totals_QCed_sampled_1000ind_corr_matrix.txt")
# ========================================================================================
# Perform Principal Component Analysis.
# ========================================================================================
#
# ---------------------------------------------------------------------------------------------------------------
# Name your input data.
# Your input data should be a data frame with variables with non-zero variance.
pca_input <- selected_variables
dim(pca_input)
# Perform PCA with the subset data, scaled.
scaled_pca <- prcomp(x=pca_input, scale = T)
screep
# Create a scree plot.
screep <- LineScreePlot(pca.data = pca_input, pca.result = scaled_pca)
screep
ggsave("results/PCA_results/2 days 50 ind/2days_1000ind_screep.png", screep, device="png", width=5, height=5, dpi=200)
# Create a biplot.
# A biplot with the individuals as black dots and variables labelled.
biplotdots <- BiplotDots(pca.result = scaled_pca, pca.data = pca_input, alpha = 0.5)
biplotdots
# Create a biplot.
# A biplot with the individuals as black dots and variables labelled.
biplotdots <- BiplotDots(pca.result = scaled_pca, pca.data = pca_input, alpha = 0.5)
biplotdots
ggsave("results/PCA_results/2 days 50 ind/2days_1000ind_biplotdots.png", biplotdots, device="png", width=5, height=5, dpi=200)
# A biplot with the individuals labeled.
biplotlabeled <- BiplotLabeled(pca.result=scaled_pca, pca.data=pca_input, individuals.label = T)
biplotlabeled
ggsave("results/PCA_results/2 days 50 ind/2days_1000ind_biplotlabeled.png", biplotlabeled, device="png", width=5, height=5, dpi=200)
# A biplot with the individuals labeled without the variables' arrows.
biplotlabeledwoarrows <- BiplotLabeledwoArrows(pca.result=scaled_pca, pca.data=pca_input,
individuals.label=T)
biplotlabeledwoarrows
ggsave("results/PCA_results/2 days 50 ind/2days_1000ind_biplotlabeledwoarrows.png", biplotlabeledwoarrows, device="png", width=5, height=5, dpi=200)
# Plot the directions of the variables.
directions <- BiplotLabeled(pca.result=scaled_pca, pca.data=pca_input, individuals.label=F)
directions
ggsave("results/PCA_results/2 days 50 ind/2days_1000ind_directions.png", directions, device="png", width=5, height=5, dpi=200)
# Plot the contribution of the variables to a given PC.
# Variables' labels aligned on the X axis.
loadings_aligned <- LoadingsPlot(pca.result=scaled_pca,  whichPC="PC1",
positive.color="green2", negative.color="grey70", labels.aligned= TRUE)
loadings_aligned
# ---------------------------------------------------------------------------------------------------------------
# Save the variance explained by each PC as a .txt file.
# Change the file name as necessary.
SaveVarExplained(pca.data = pca_input, pca.result = scaled_pca,
out.fn = "results/PCA_results/2 days 50 ind/2days_PC_var_explained_1000ind.txt")
# ---------------------------------------------------------------------------------------------------------------
# Calculate loadings of each PC to the variables and
# save it as a txt file in the results folder.
# Change the file name as necessary.
SaveLoadings(pca.result=scaled_pca,
out.fn = "results/PCA_results/2 days 50 ind/2days_PC_loadings_1000ind.txt")
SaveInputAndPCs(input = "eg_data/NHANES/NHANES_2days_totals_QCed_1000sampled.txt",
pca.results = scaled_pca,
out.fn = "results/PCA_results/2 days 50 ind/ind1000_2days_totalsinput_QCed_PCs.txt")
# Load necessary packages.
library(SASxport)
library(foreign)
# Set where the NHANES data and food code table are.
# it is not in the eg_data folder because it's too large to save in GitHub folder.
# setwd("E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16")
setwd("~/GitHub/dietary_patterns")
# Load necessary functions.
source("lib/load_clean_NHANES.R")
# Remove children.
# Load the demographics file, then filter by age > 18.
demo <- sasxport.get("eg_data/NHANES/DEMO_I.XPT")
# Remove children.
# Load the demographics file, then filter by age > 18.
demo <- read.xport("eg_data/NHANES/DEMO_I.XPT")
head(demo)
adults <- demo[demo$ridageyr >= 18, ]
adults <- demo[demo$RIDAGEYR >= 18, ]
# Retain those with complete data (STZ==1)
# DR1DRSTZ == 1: reliable and all relevant variables associated with the 24-hour dietary recall contain a value.
# Code descriptions in Analytic notes: https://wwwn.cdc.gov/Nchs/Nhanes/2017-2018/DR1IFF_J.htm#Analytic_Notes
food1 <- subset(Food_D1, DR1DRSTZ == 1)
# Import items data Day 1, add food item descriptions, and save it as a txt file.
# LIKELY IT WILL BE A HUGE FILE.
ImportNHANESFoodItems(data.name="E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/Interview_IndFoods_Day1_DR1IFF_I.XPT",
food.code.column = "DR1IFDCD",
food.code.table = foodcodetable_f,
out.fn = "eg_data/NHANES/Interview_IndFoods_Day1_DR1IFF_I_d.txt") # 'd' stands for food descriptions
# Format the food table and save it as a .txt file.
PrepareFoodCodeTable(raw.food.code.table = "eg_data/NHANES/FoodCodes_DRXFCD_I.XPT",
out.fn =              "eg_data/NHANES/FoodCodes_DRXFCD_I_f.txt")
# Load the formatted food code table.
foodcodetable_f <- read.table("eg_data/NHANES/FoodCodes_DRXFCD_I_f.txt", sep="\t", header=T)
# Import items data Day 1, add food item descriptions, and save it as a txt file.
# LIKELY IT WILL BE A HUGE FILE.
ImportNHANESFoodItems(data.name="E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/Interview_IndFoods_Day1_DR1IFF_I.XPT",
food.code.column = "DR1IFDCD",
food.code.table = foodcodetable_f,
out.fn = "eg_data/NHANES/Interview_IndFoods_Day1_DR1IFF_I_d.txt") # 'd' stands for food descriptions
# Load the saved food items file.
Food_D1 <- read.table("eg_data/NHANES/Interview_IndFoods_Day1_DR1IFF_I_d.txt", sep="\t", header=T)
head(Food_D1,2)
# Import items data Day 2, add food item descriptions, and save it as a txt file.
ImportNHANESFoodItems(data.name="E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/Interview_IndFoods_Day2_DR2IFF_I.XPT",
food.code.column = "DR2IFDCD",
food.code.table = foodcodetable_f,
out.fn = "eg_data/NHANES/Interview_IndFoods_Day2_DR2IFF_I_d.txt")
# Add food item description and save it as a txt file.
Food_D2 <- read.table("eg_data/NHANES/Interview_IndFoods_Day2_DR2IFF_I_d.txt", sep="\t", header=T)
# Remove children.
# Load the demographics file, then filter by age > 18.
demo <- read.xport("eg_data/NHANES/DEMO_I.XPT")
adults <- demo[demo$RIDAGEYR >= 18, ]
# Retain those with complete data (STZ==1)
# DR1DRSTZ == 1: reliable and all relevant variables associated with the 24-hour dietary recall contain a value.
# Code descriptions in Analytic notes: https://wwwn.cdc.gov/Nchs/Nhanes/2017-2018/DR1IFF_J.htm#Analytic_Notes
food1 <- subset(Food_D1, DR1DRSTZ == 1)
food2 <- subset(Food_D2, DR2DRSTZ == 1)
# Retain those that have both day 1 and day 2 data.
food1names <- unique(food1$seqn)
food1names
# Retain those that have both day 1 and day 2 data.
food1names <- unique(food1$SEQN)
food2names <- unique(food2$SEQN)
food1names
keepnames <- food1names[food1names %in% food2names]
keepnames_adults <- keepnames[keepnames %in% adults$seqn]
keepnames_adults <- keepnames[keepnames %in% adults$SEQN]
food1names %in% food2names
keepnames2 <- food2names[food2names %in% food1names]
identical(keepnames, keepnames2)
# Retain those who reported more than 1 food item per day.
# make a day varabile before we bind these together
food1$Day = 1
food2$Day = 2
# copied from abby's code
food12 <- rbind(food1, food2)
data(mpg)
table(mpg$manufacturer, mpg$cyl)
table(mpg$manufacturer, mpg$cyl)[,1]
# look for people with no foods
sum(table(food1$SEQN, food1$Day)[,1] == 1) # 2 people with only one food reported
# look for people with no foods
table(food1$SEQN, food1$Day)[, 1] # 2 people with only one food reported
# look for people with no foods
sum(table(food1$SEQN)[, 1] == 1) # 2 people with only one food reported
table(food1$SEQN)
table1 = table(food1$SEQN)
head(table1)
is(table1)
table1 = as.data.frame(table(food1$SEQN))
is(table1)
head(table1)
table11 = table1[order(table1$Freq, decreasing = F), ]
head(table11)
adults
keepnames_adults
# Retain those who reported more than 1 food item per day.
sum(table(food12$seqn, food12$Day)[, 1] == 1)
# Retain those who reported more than 1 food item per day.
sum(table(food1$SEQN, food1$Day)[, 1] == 1)
# Retain those who reported more than 1 food item per day.
freqtable <- as.data.frame(table(food1$SEQN))
onlyonefood1 <- freqtable[freqtable$Freq == 1]
onlyonefood1 <- freqtable[freqtable$Freq == 1, ]
onlyonefood1
onlyonefood1 <- freqtable[freqtable$Freq == 1, ][, 1]
onlyonefood1
onlyonefood1 <- freqtable[freqtable$Freq == 1, ]
onlyonefood1[, 1]
is(onlyonefood1)
onlyonefood1 <- freqtable[freqtable$Freq == 1, ][, 1]
is(onlyonefood1)
onlyonefood1 <- freqtable[freqtable$Freq == 1, ]
onlyonefood1
colnames(onlyonefood1)[1]
colnames(onlyonefood1)[1] <- "SEQN"
onlyonefood1
onlyonefood1 <- freqtable[freqtable$Freq > 1, ]
multiplefood1 <- freqtable[freqtable$Freq > 1, ]
colnames(multiplefood1)[1] <- "SEQN"
multiplefood1
multiplefood1[, 1]
keepnames_adults
keepnames
keepnames_adults_mult <- keepnames_adults[keepnames_adults$SEQN %in% multiplefood1$SEQN]
keepnames_adults_mult <- keepnames_adults[keepnames_adults %in% multiplefood1$SEQN]
multiplefood1$SEQN
length(multiplefood1$SEQN)
length(keepnames_adults)
length(multiplefood1$SEQN)
keepnames_adults_mult <- keepnames_adults[keepnames_adults %in% multiplefood1$SEQN]
length(keepnames_adults_mult)
keepnames_adults_mult1 <- keepnames_adults[keepnames_adults %in% multiplefood1$SEQN]
freqtable2 <- as.data.frame(table(food2$SEQN))
freqtable2
multiplefood2 <- freqtable2[freqtable2$Freq > 1, ]
colnames(multiplefood2)[1] <- "SEQN"
keepnames_adults_mult12 <- keepnames_adults_mult1[keepnames_adults_mult1 %in% multiplefood2$SEQN]
length(keepnames_adults_mult12)
length(keepnames_adults_mult1)
keepnames_adults_mult2 <- keepnames_adults[keepnames_adults %in% multiplefood2$SEQN]
length(keepnames_adults_mult2)
keepnames_adults_mult1 <- keepnames_adults[keepnames_adults %in% multiplefood1$SEQN]
length(keepnames_adults_mult1)
# make a day variable before we bind these together
food1$Day = 1
food2$Day = 2
# Day 1
# Import the list of variables present in Day 1.
day1variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_Day1.txt', header=F)
# Day 1
# Import the list of variables present in Day 1.
day1variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_Day1.txt', header=F)
# Day 1
# Import the list of variables present in Day 1.
day1variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_Day1.txt', header=F)
head(day1variables)
# Which variables to pick up from the totals data
names_to_use <- names(food1) %in% day1variables$V1
names_to_use
names(food1)
# pick up only the specified variables
food1_subset <- food1[, names_to_use]
# Remove "DR1T", "DR1" from the column names
colnames(food1_subset) <- gsub(colnames(food1_subset), pattern = "DR1I", replacement = "")
colnames(food1_subset) <- gsub(colnames(food1_subset), pattern = "DR1", replacement = "")
# Check
head(food1_subset, 1)
# Check
head(food1_subset, 1)
dim(food1)
# Retain those with complete data (STZ==1)
# DR1DRSTZ == 1: reliable and all relevant variables associated with the 24-hour dietary recall contain a value.
# Code descriptions in Analytic notes: https://wwwn.cdc.gov/Nchs/Nhanes/2017-2018/DR1IFF_J.htm#Analytic_Notes
food1 <- subset(Food_D1, DR1DRSTZ == 1)
dim(food1)
# Take only those in keepnames_adults_mult1.
food1_1 <- food1[food1$SEQN %in% keepnames_adults_mult1, ]
dim(food1_1)
unique(food1_1$SEQN)
length(unique(food1_1$SEQN))
length(unique(food1$SEQN))
length(unique(food1_1$SEQN))
# Do the same for food2
freqtable2 <- as.data.frame(table(food2$SEQN))
multiplefood2 <- freqtable2[freqtable2$Freq > 1, ]
colnames(multiplefood2)[1] <- "SEQN"
keepnames_adults_mult2 <- keepnames_adults[keepnames_adults %in% multiplefood2$SEQN]
length(keepnames_adults)
length(multiplefood1$SEQN)
length(keepnames_adults_mult1)
length(keepnames_adults_mult2)
food2_1 <- food2[food2$SEQN %in% keepnames_adults_mult2, ]
length(unique(food2_1$SEQN))
# Create a vector of SEQN of those that have both day 1 and day 2 data.
food1names <- unique(food1_1$SEQN)
food2names <- unique(food2_1$SEQN)
keepnames <- food1names[food1names %in% food2names]
keepnames2 <- food1names[food2names %in% food1names]
# Create a vector of SEQN of those that have both day 1 and day 2 data.
food1names <- unique(food1_1$SEQN)
food2names <- unique(food2_1$SEQN)
keepnames <- food1names[food1names %in% food2names]
identical(food2names, keepnames)
keepnames12 <- food1names[food1names %in% food2names]
# make a day variable before we bind these together
food1$Day = 1
food2$Day = 2
# Take only those in keepnames_adults_mult1.
food1 <- food1[food1$SEQN %in% keepnames_adults_mult1, ]
food2 <- food2[food2$SEQN %in% keepnames_adults_mult2, ]
length(unique(food2$SEQN))
# Create a vector of SEQN of those that have both day 1 and day 2 data.
food1names <- unique(food1$SEQN)
food2names <- unique(food2$SEQN)
keepnames12 <- food1names[food1names %in% food2names]
colnames(food1)
# Which variables to pick up from the totals data
var_to_use <- names(food1) %in% day1variables$V1
var_to_use
# pick up only the specified variables
food1 <- food1[, var_to_use]
# Remove "DR1T", "DR1" from the column names
colnames(food1) <- gsub(colnames(food1), pattern = "DR1I", replacement = "")
colnames(food1) <- gsub(colnames(food1), pattern = "DR1", replacement = "")
# Check
head(food1, 1)
# Check
head(food1, 2)
# Do the same for Day 2
day2variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_Day2.txt', header=F)
# Which variables to pick up from the totals data
var_to_use <- names(food2) %in% day2variables$V1
# pick up only the specified variables
food2 <- food2[, var_to_use]
# Remove "DR1T", "DR1" from the column names
colnames(food2) <- gsub(colnames(food2), pattern = "DR2I", replacement = "")
colnames(food2) <- gsub(colnames(food2), pattern = "DR2", replacement = "")
# Check
head(food2, 1)
# Do the columns of food1 and food2 match?
identical(colnames(food1), colnames(food2))
unique(food12$SEQN)
# Bind food1 and food2
food12 <- rbind(food1, food2)
length(unique(food12$SEQN))
length(keepnames12)
food12 <- food12[food12$SEQN %in% keepnames12, ]
length(keepnames12)
length(unique(food12$SEQN))
keepnames12
aaa = data.frame(keepnames=keepnames12, ind=unique(food12$SEQN))
head(aaa)#$keepnames
identical(aaa$keepnames, aaa$ind)
# Day 1
# Import the list of variables present in Day 1.
day1variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_Day1.txt', header=F)
# Which variables to pick up from the food data
var_to_use <- names(food1) %in% day1variables$V1
# pick up only the specified variables
# food1 <- food1[, var_to_use]
food1 <- food1[food1$SEQN %in% keepnames12, var_to_use]
# Remove "DR1T", "DR1" from the column names
colnames(food1) <- gsub(colnames(food1), pattern = "DR1I", replacement = "")
# Day 1
# Import the list of variables present in Day 1.
day1variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_Day1.txt', header=F)
# Which variables to pick up from the food data
var_to_use <- names(food1) %in% day1variables$V1
# pick up only the specified variables
food1 <- food1[, var_to_use]
# Remove "DR1T", "DR1" from the column names
colnames(food1) <- gsub(colnames(food1), pattern = "DR1I", replacement = "")
colnames(food1) <- gsub(colnames(food1), pattern = "DR1", replacement = "")
# Day 1
# Import the list of variables present in Day 1.
day1variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_Day1.txt', header=F)
# Which variables to pick up from the food data
var_to_use <- names(food1) %in% day1variables$V1
var_to_use
# Retain those with complete data (STZ==1)
# DR1DRSTZ == 1: reliable and all relevant variables associated with the 24-hour dietary recall contain a value.
# Code descriptions in Analytic notes: https://wwwn.cdc.gov/Nchs/Nhanes/2017-2018/DR1IFF_J.htm#Analytic_Notes
food1 <- subset(Food_D1, DR1DRSTZ == 1)
food2 <- subset(Food_D2, DR2DRSTZ == 1)
# Create a vector of SEQN of those who reported more than 1 food item per day.
freqtable1 <- as.data.frame(table(food1$SEQN))
multiplefood1 <- freqtable1[freqtable1$Freq > 1, ]
colnames(multiplefood1)[1] <- "SEQN"
# Create a vector of SEQN of those who reported more than 1 food item per day.
freqtable1 <- as.data.frame(table(food1$SEQN))
freqtable1_m <- freqtable1[freqtable1$Freq > 1, ]
colnames(freqtable1_m)[1] <- "SEQN"
keepnames_adults_mult1 <- keepnames_adults[keepnames_adults %in% freqtable1_m$SEQN]
# Take only those in keepnames_adults_mult1.
food1 <- food1[food1$SEQN %in% keepnames_adults_mult1, ]
freqtable2_m <- freqtable2[freqtable2$Freq > 1, ]
colnames(freqtable2_m)[1] <- "SEQN"
keepnames_adults_mult2 <- keepnames_adults[keepnames_adults %in% freqtable2_m$SEQN]
food2 <- food2[food2$SEQN %in% keepnames_adults_mult2, ]
length(unique(food2$SEQN))
length(unique(food1$SEQN))
length(freqtable1_m$SEQN)
length(freqtable2_m$SEQN)
length(keepnames_adults_mult1)
length(keepnames_adults_mult2)
# Create a vector of SEQN of those that have both day 1 and day 2 data.
food1names <- unique(food1$SEQN)
food2names <- unique(food2$SEQN)
keepnames12 <- food1names[food1names %in% food2names]
colnames(food1)
# Combine day 1 and day 2 data.
# Make a day variable
food1$Day = 1
food2$Day = 2
# Day 1
# Import the list of variables present in Day 1.
day1variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_Day1.txt', header=F)
head(day1variables)
# Which variables to pick up from the food data
var_to_use <- names(food1) %in% day1variables$V1
# pick up only the specified variables
food1 <- food1[, var_to_use]
# Remove "DR1T", "DR1" from the column names
colnames(food1) <- gsub(colnames(food1), pattern = "DR1I", replacement = "")
colnames(food1) <- gsub(colnames(food1), pattern = "DR1", replacement = "")
# Check
head(food1, 1)
# Do the same for Day 2
day2variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_Day2.txt', header=F)
var_to_use2 <- names(food2) %in% day2variables$V1
food2 <- food2[, var_to_use2]
colnames(food2) <- gsub(colnames(food2), pattern = "DR2I", replacement = "")
colnames(food2) <- gsub(colnames(food2), pattern = "DR2", replacement = "")
head(food2, 1)
# Do the columns of food1 and food2 match?
identical(colnames(food1), colnames(food2))
# Bind food1 and food2
food12 <- rbind(food1, food2)
# Pick up only those in keepnames12.
food12 <- food12[food12$SEQN %in% keepnames12, ]
length(keepnames12)
length(unique(food12$SEQN))
head(food12, 1)
adults <- demo[demo$RIDAGEYR >= 18, ]
# Retain those with complete data (STZ==1)
# DR1DRSTZ == 1: reliable and all relevant variables associated with the 24-hour dietary recall contain a value.
# Code descriptions in Analytic notes: https://wwwn.cdc.gov/Nchs/Nhanes/2017-2018/DR1IFF_J.htm#Analytic_Notes
food1 <- subset(Food_D1, DR1DRSTZ == 1)
food2 <- subset(Food_D2, DR2DRSTZ == 1)
# Create a vector of SEQN of those who reported more than 1 food item per day.
freqtable1 <- as.data.frame(table(food1$SEQN))
freqtable1_m <- freqtable1[freqtable1$Freq > 1, ]
colnames(freqtable1_m)[1] <- "SEQN"
keepnames_adults_mult1 <- keepnames_adults[keepnames_adults %in% freqtable1_m$SEQN]
# Take only those in keepnames_adults_mult1.
food1 <- food1[food1$SEQN %in% keepnames_adults_mult1, ]
# Do the same for food2
freqtable2 <- as.data.frame(table(food2$SEQN))
freqtable2_m <- freqtable2[freqtable2$Freq > 1, ]
colnames(freqtable2_m)[1] <- "SEQN"
keepnames_adults_mult2 <- keepnames_adults[keepnames_adults %in% freqtable2_m$SEQN]
food2 <- food2[food2$SEQN %in% keepnames_adults_mult2, ]
length(keepnames_adults)
length(freqtable2_m$SEQN)
length(keepnames_adults_mult1)
length(keepnames_adults_mult2)
length(unique(food1$SEQN))
# Create a vector of SEQN of those that have both day 1 and day 2 data.
food1names <- unique(food1$SEQN)
food2names <- unique(food2$SEQN)
keepnames12 <- food1names[food1names %in% food2names]
# Combine day 1 and day 2 data.
# Day 1
# Import the list of variables present in Day 1.
day1variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_Day1.txt', header=F)
# Which variables to pick up from the food data
var_to_use1 <- names(food1) %in% day1variables$V1
# pick up only the specified variables
food1 <- food1[, var_to_use1]
# Remove "DR1T", "DR1" from the column names
colnames(food1) <- gsub(colnames(food1), pattern = "DR1I", replacement = "")
colnames(food1) <- gsub(colnames(food1), pattern = "DR1", replacement = "")
# Check
head(food1, 1)
# Do the same for Day 2
day2variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_Day2.txt', header=F)
var_to_use2 <- names(food2) %in% day2variables$V1
food2 <- food2[, var_to_use2]
colnames(food2) <- gsub(colnames(food2), pattern = "DR2I", replacement = "")
colnames(food2) <- gsub(colnames(food2), pattern = "DR2", replacement = "")
head(food2, 1)
# Do the columns of food1 and food2 match?
identical(colnames(food1), colnames(food2))
# Make a day variable
food1$Day = 1
food2$Day = 2
# Bind food1 and food2
food12 <- rbind(food1, food2)
head(food12)
tail(food12)
sum(table(food12$SEQN)[,1] <4)
sum(table(unique(food12$SEQN))[,1] <4)
table(unique(food12$SEQN)
)
table(food12$SEQN, food12$Day)
sum(table(food12$SEQN, food12$Day) <4)
sum(table(food12$SEQN, food12$Day)[,1] <4)
sum(table(food12$SEQN, food12$Day)[,1] <2)
sum(table(food12$SEQN, food12$Day)[,2] <2)
aaa = table(food12$SEQN, food12$Day)
aaa = as.data.frame(table(food12$SEQN, food12$Day))
head(aaa[order(aaa$Freq), ])
head(aaa[order(aaa$Freq), ], 10)
table(food12$Day)
food12[SEQN==86563, ]
select(food12, SEQN==86563)
subset(food12, SEQN==86563)
subset(food12, SEQN==86563)[, Day]
subset(food12, SEQN==86563)[, 'Day']
food1names %in% food2names
length(keepnames12)
#
# dietary pattern/special diet map
library(dplyr)
# Load total nutrient intake of day 1 or day 2. Day 1 has more columns that can be used as metadata.
nhanes1516_totals1 <- read.xport('E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/Total_Nutrient_Day1_DR1TOT_J.XPT')
# Take only DR1DRSTZ = 1
nhanes_totals_1 <- subset(nhanes1516_totals1, DR1DRSTZ == 1)
diet_type_map <- nhanes_totals_1 %>% select(seqn, drqsdiet, drqsdt1, drqsdt2, drqsdt3, drqsdt4, drqsdt5, drqsdt6, drqsdt7, drqsdt8, drqsdt9, drqsdt10, drqsdt11, drqsdt12, drqsdt91)
diet_type_map <- nhanes_totals_1 %>% select(SEQN, DRQSDIET, DRQSDT1, DRQSDT2, DRQSDT3, DRQSDT4, DRQSDT5, DRQSDT6, DRQSDT7, DRQSDT8, DRQSDT9, DRQSDT10, DRQSDT11, DRQSDT12, DRQSDT91)
diet_type_map <- diet_type_map[diet_type_map$SEQN %in% keepnames12, ]
head(diet_type_map)
diet_type_map <- nhanes_totals_1 %>% select(SEQN, DRQSDIET, DRQSDT1, DRQSDT2, DRQSDT3, DRQSDT4, DRQSDT5, DRQSDT6, DRQSDT7, DRQSDT8, DRQSDT9, DRQSDT10, DRQSDT11, DRQSDT12, DRQSDT91)
head(diet_type_map)
head(keepnames12)
tail(keepnames12)
head(nhanes_totals_1$SEQN)
tail(nhanes_totals_1$SEQN)
head(Food_D1,2)
head(food_D1$SEQN)
head(Food_D1$SEQN)
tail(Food_D1$SEQN)
head(diet_type_map)
tail(keepnames12)
head(keepnames12)
tail(keepnames12)
head(nhanes_totals_1$SEQN)
tail(nhanes_totals_1$SEQN)
head(Food_D1$SEQN)
tail(Food_D1$SEQN)
head(keepnames12)
