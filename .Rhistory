food12 <- food12[food12$SEQN %in% keepnames_adults,]
# look for people with no foods
sum(table(food12$SEQN, food12$Day)[,1] == 1) # No people with only one food reported
sum(table(food12$SEQN, food12$Day)[,2] == 1)  # 4 people with only one food reported
# dietary pattern/special diet map
# diet_type_map <- tots1 %>% select(SEQN, drqsdiet, drqsdt1, drqsdt2, drqsdt3, drqsdt4, drqsdt5, drqsdt6, drqsdt7, drqsdt8, drqsdt9, drqsdt10, drqsdt11, drqsdt12, drqsdt91)
diet_type_map <- tots1 %>% select(SEQN, DRQSDIET, DRQSDT1, DRQSDT2, DRQSDT3, DRQSDT4, DRQSDT5, DRQSDT6, DRQSDT7, DRQSDT8, DRQSDT9, DRQSDT10, DRQSDT11, DRQSDT12, DRQSDT91)
diet_type_map <- diet_type_map[diet_type_map$SEQN %in% keepnames_adults,]
# demographics map
demo <- demo[demo$SEQN %in% keepnames_adults, ]
head(demo, 1)
# food12
table(food12$Day)
dim(food12)
food12$Day # there should not be any NAs in Day column...
tail(food12$Main.food.description)
source("lib/prep_data_for_clustering.R")
# Load necessary functions.
source("lib/load_clean_NHANES.R")
View(PrepareFoodCodeTable)
source("lib/Food_tree_scripts/format.foods.r")
# read in food description files
# foodcodes <- sasxport.get("data/NHANES/DRXFCD_G.XPT")
foodcodes <- read.xport("eg_data/NHANES/FoodCodes_DRXFCD_I.XPT")
head(foodcodes)
colnames(foodcodes)
names(foodcodes)[names(foodcodes) == "DRXFDCD"] <- "FoodCode"
names(foodcodes)[names(foodcodes) == "DRXFCLD"] <- "Main.food.description"
colnames(foodcodes)
FormatFoods(input_fn = foodcodes, output_fn = "Formattedfoodcodes.txt" , dedupe=F)
# Save foodcodes with modified columnnames so that it can be used further downstream.
write.table("eg_data/NHANES1516/nhanes1516.foodcodes.txt", foodcodes, sep="\t", quote=F, row.names=F)
# Save foodcodes with modified columnnames so that it can be used further downstream.
write.table(foodcodes, "eg_data/NHANES1516/nhanes1516.foodcodes.txt", sep="\t", quote=F, row.names=F)
# Take care of spcecial characters.
FormatFoods(input_fn = "eg_data/NHANES1516/nhanes1516.foodcodes.txt", output_fn = "Formattedfoodcodes.txt", dedupe=F)
# Take care of spcecial characters.
FormatFoods(input_fn = "eg_data/NHANES1516/nhanes1516.foodcodes.txt", output_fn = "eg_data/NHANES1516/nhanes1516.foodcodes_f.txt", dedupe=F)
# Load the formatted foods
formattedfoodcode <- read.table("eg_data/NHANES1516/nhanes1516.foodcodes_f.txt", sep="\t", header=T)
head(Food_D1,1)
head(foodcodetable_f)
# Load the formatted food code table.
foodcodetable_f <- read.table("eg_data/NHANES/FoodCodes_DRXFCD_I_f.txt", sep="\t", header=T)
head(foodcodetable_f)
# Format the food table and save it as a .txt file.
PrepareFoodCodeTable(raw.food.code.table = "eg_data/NHANES/FoodCodes_DRXFCD_I.XPT",
out.fn =              "eg_data/NHANES/FoodCodes_DRXFCD_I_f.txt")
# Load the formatted food code table.
foodcodetable_f <- read.table("eg_data/NHANES/FoodCodes_DRXFCD_I_f.txt", sep="\t", header=T)
head(foodcodetable_f)
head(Food_D1,1)
# ---------------------------------------------------------------------------------------------------------------
# Load FPED15-16, needed for the AddFoodCat function.
FPED <- read.table("eg_data/NHANES/FPED/FPED_1516_forR.txt", sep="\t", header=T)
head(FPED, 1)
colnames(FPED)[1] <- "Food_code" # Important! Change the food code column name as Food_code.
# Format the food table and save it as a .txt file.
PrepareFoodCodeTable(raw.food.code.table = "eg_data/NHANES/FoodCodes_DRXFCD_I.XPT",
out.fn =              "eg_data/NHANES/FoodCodes_DRXFCD_I_f.txt")
# Load the formatted food code table.
foodcodetable_f <- read.table("eg_data/NHANES/FoodCodes_DRXFCD_I_f.txt", sep="\t", header=T)
head(foodcodetable_f, 1)
# ---------------------------------------------------------------------------------------------------------------
# Load FPED15-16, needed for the AddFoodCat function.
FPED <- read.table("eg_data/NHANES/FPED/FPED_1516_forR.txt", sep="\t", header=T)
head(FPED, 1)
colnames(FPED)[1] <- "Food_code" # Important! Change the food code column name as Food_code.
# ---------------------------------------------------------------------------------------------------------------
# Import items data Day 1, add food item descriptions, and save it as a txt file.
# LIKELY IT WILL BE A HUGE FILE.
ImportNHANESFoodItems(data.name="E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/DR1IFF_I.XPT",
food.code.column = "DR1IFDCD",
food.code.table = foodcodetable_f,
out.fn = "eg_data/NHANES/Interview_IndFoods_Day1_DR1IFF_I_d.txt") # 'd' stands for food descriptions
# Load the saved food items file.
Food_D1 <- read.table("eg_data/NHANES/Interview_IndFoods_Day1_DR1IFF_I_d.txt", sep="\t", header=T)
head(Food_D1,1)
head(FPED, 1)
# Add the food category info and serving for each item. #### WILL TAKE A FEW MOMENTS. ####
AddFoodCat(input.food= Food_D1,
fped= FPED,
grams= "DR1IGRMS",
out.fn= "eg_data/NHANES/Food_D1_FC.txt")
# ---------------------------------------------------------------------------------------------------------------
# Import items data Day 1, add food item descriptions, and save it as a txt file.
# LIKELY IT WILL BE A HUGE FILE.
ImportNHANESFoodItems(data.name="E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/DR1IFF_I.XPT",
food.code.column = "DR1IFDCD",
food.code.table = foodcodetable_f,
out.fn = "eg_data/NHANES/DR1IFF_I_d.txt") # 'd' stands for food descriptions
# Load the saved food items file.
Food_D1 <- read.table("eg_data/NHANES/DR1IFF_I_d.txt", sep="\t", header=T)
head(Food_D1,1)
# Add the food category info and serving for each item. #### WILL TAKE A FEW MOMENTS. ####
AddFoodCat(input.food= Food_D1,
fped= FPED,
grams= "DR1IGRMS",
out.fn= "eg_data/NHANES/Food_D1_FC.txt")
# ---------------------------------------------------------------------------------------------------------------
# Import items data Day 2, add food item descriptions, and save it as a txt file.
# Import items data Day 2, add food item descriptions, and save it as a txt file.
ImportNHANESFoodItems(data.name="E:/MSU OneDrive 20210829/UMinn/20_NHANES/2015-16/Data/DR2IFF_I.XPT",
food.code.column = "DR2IFDCD",
food.code.table = foodcodetable_f,
out.fn = "eg_data/NHANES/DR2IFF_I_d.txt")
# Add food item description and save it as a txt file.
Food_D2 <- read.table("eg_data/NHANES/DR2IFF_I_d.txt", sep="\t", header=T)
# Day 2. Add the food items info and serving for each item. #### WILL TAKE A FEW MOMENTS. ####
AddFoodCat(input.food= Food_D2,
fped= FPED,
grams= "DR2IGRMS",
out.fn= "eg_data/NHANES/Food_D2_FC.txt")
# ===============================================================================================================
# Load the Food_Dx_FC which has food category data!
# ===============================================================================================================
# Food Day 1 with Food Category *** WILL BE A HUGE TABLE. ***
Food_D1_FC <- read.table("eg_data/NHANES/Food_D1_FC.txt", sep="\t", header=T)
dim(Food_D1_FC)
colnames(Food_D1_FC)
head(Food_D1_FC$originalrownames)
# Food Day 2 with Food Category *** WILL BE A HUGE TABLE. ***
Food_D2_FC <- read.table("eg_data/NHANES/Food_D2_FC.txt", sep="\t", header=T)
dim(Food_D2_FC)
colnames(Food_D2_FC)
tail(Food_D2_FC)
table(Food_D2_FC$DR2DRSTZ) # 1902 rows are incomplete.
# Try using FormatFoods
FormatFoods(input_fn="eg_data/NHANES/Food_D1_FC.txt", output_fn= "eg_data/NHANES/Food_D1_FC_f.txt")
# Result
Food_D1_FC_f <- read.table("eg_data/NHANES/Food_D1_FC_f.txt", sep="\t", header=T)
head(Food_D1_FC_f)
View(FormatFoods)
colnames(Food_D1_FC)
# names(food1)[names(food1) == "dr1ifdcd"] <- "FoodCode"
names(Food_D1_FC)[names(Food_D1_FC) == "DR1IFDCD"] <- "FoodCode"
# First, need to change the colnames
colnames(Food_D1_FC)
head(Food_D1_FC,2)
names(Food_D2_FC)[names(Food_D2_FC) == "DR2IFDCD"] <- "FoodCode"
# names(food1)[names(food1) == "DR1MC"] <- "ModCode"  # No such column.
# names(food2)[names(food2) == "DR2MC"] <- "ModCode"
names(Food_D1_FC)[names(Food_D1_FC) == "DR1IGRMS"] <- "FoodAmt"
names(Food_D2_FC)[names(Food_D2_FC) == "DR2IGRMS"] <- "FoodAmt"
head(Food_D1_FC,2)
head(Food_D2_FC,2)
names(Food_D1_FC)[names(Food_D1_FC) == "DRXFCLD"] <- "Main.food.description"
names(Food_D2_FC)[names(Food_D2_FC) == "DRXFCLD"] <- "Main.food.description"
head(Food_D2_FC,2)
head(Food_D1_FC,2)
# Save after changing the columnnames.
write.table(Food_D1_FC, "eg_data/NHANES/Food_D1_FC_cc.txt", sep="\t", header=T)
# Save after changing the columnnames.
write.table(Food_D1_FC, "eg_data/NHANES/Food_D1_FC_cc.txt", sep="\t", row.names=F, quote=F)
# Try using FormatFoods
FormatFoods(input_fn="eg_data/NHANES/Food_D1_FC_cc.txt", output_fn= "eg_data/NHANES/Food_D1_FC_cc_f.txt")
# Result
Food_D1_FC_f <- read.table("eg_data/NHANES/Food_D1_FC_cc_f.txt", sep="\t", header=T)
head(Food_D1_FC_f)
head(Food_D1_FC_f$FoodID)
head(Food_D1_FC_f$Food_code)
head(Food_D1_FC_f$FoodCode)
identical(Food_D1_FC_f$Food_code, Food_D1_FC_f$FoodCode)
tail(Food_D1_FC_f$Food_code)
tail(Food_D1_FC_f$FoodCode)
Food_D1_FC_f$codediff <- Food_D1_FC_f$Food_code - Food_D1_FC_f$FoodCode
plot(Food_D1_FC_f$codediff)
max(Food_D1_FC_f$codediff)
min(Food_D1_FC_f$codediff)
source("lib/Food_tree_scripts/newick.tree.r")
source("lib/Food_tree_scripts/check.db.r")
source("lib/Food_tree_scripts/format.foods.r")
source("lib/Food_tree_scripts/filter.db.by.diet.records.r")
source("lib/Food_tree_scripts/make.food.tree.r")
source("lib/Food_tree_scripts/make.food.otu.r")
source("lib/Food_tree_scripts/make.fiber.otu.r")
source("lib/Food_tree_scripts/make.dhydrt.otu.r")
# This is the input. food items file.
qqq = read.table("E:/MSU OneDrive 20210829/UMinn/Food_tree_unused/data/NHANES/processed/individual.foods.from.NHANES_2007-2010.txt", sep="\t", header=T)
head(qqq,1)
# check if there is any food item reported by people but are missing in the database.
check.db(food_database_fn = "eg_data/NHANES1516/processed/NHANESDatabase.txt",
food_records_fn =  "eg_data/NHANES/Food_D1_FC_cc_f.txt",
output_fn = "eg_data/NHANES/Food_D1_FC_cc_f_missing.txt")
MakeFoodTree(nodes_fn="data/Food_tree_data/NodeLabelsMCT.txt", # can use this for now.
addl_foods_fn =   NULL,
food_database_fn= "eg_data/NHANES/Food_D1_FC_cc_f.txt",
output_tree_fn=      "results/Food_tree_NHANES/Food_D1_FC_cc_f_Lv2.txt",
output_taxonomy_fn = "results/Food_tree_NHANES/Food_D1_FC_cc_f_Lv2.taxonomy.txt",
num.levels = 2
)
names(Food_D2_FC)[names(Food_D2_FC) == "DRXFCLD"] <- "Main.food.description"
write.table(Food_D2_FC, "eg_data/NHANES/Food_D2_FC_cc.txt", sep="\t", row.names=F, quote=F)
FormatFoods(input_fn="eg_data/NHANES/Food_D2_FC_cc.txt", output_fn= "eg_data/NHANES/Food_D2_FC_cc_f.txt")
Food_D2_FC_f <- read.table("eg_data/NHANES/Food_D2_FC_cc_f.txt", sep="\t", header=T)
head(Food_D2_FC_f)
foodcodes <- rbind(Food_D1_FC_f[, c('Foodcodes', 'DRXFCSD', "Main.food.description")],
Food_D2_FC_f[, c('Foodcodes', 'DRXFCSD', "Main.food.description")])
View(foodcodes)
foodcodes <- rbind(Food_D1_FC_f[, c('FoodCode', 'DRXFCSD', "Main.food.description")],
Food_D2_FC_f[, c('FoodCode', 'DRXFCSD', "Main.food.description")])
dim(foodcodes)
dim(Food_D1_FC_f)
dim(Food_D2_FC_f)
head(foodcodes)
length(unique(foodcodes$FoodCode))
length(unique(foodcodes$FoodCode))
# Remove children.
# Load the demographics file, then filter by age > 18.
demog <- read.xport("eg_data/NHANES/DEMO_I.XPT")
adults <- demog[demog$RIDAGEYR >= 18, ]
Food_D2_FC_cc_f <- read.table("eg_data/NHANES/Food_D2_FC_cc_f.txt", sep="\t", header=T)
# Result
Food_D1_FC_cc_f <- read.table("eg_data/NHANES/Food_D1_FC_cc_f.txt", sep="\t", header=T)
head(Food_D1_FC_cc_f)
head(Food_D1_FC_cc_f$FoodID)
head(Food_D2_FC_cc_f)
head(Food_D2_FC_cc_f$FoodID)
colnames(Food_D1_FC_cc_f)
# Remove children.
# Load the demographics file, then filter by age > 18.
demog <- read.xport("eg_data/NHANES/DEMO_I.XPT")
adults <- demog[demog$RIDAGEYR >= 18, ]
# Retain those with complete data (STZ==1)
# DR1DRSTZ == 1: reliable and all relevant variables associated with the 24-hour dietary recall contain a value.
# Code descriptions in Analytic notes: https://wwwn.cdc.gov/Nchs/Nhanes/2017-2018/DR1IFF_J.htm#Analytic_Notes
food1 <- subset(Food_D1_FC_cc_f, DR1DRSTZ == 1)
food2 <- subset(Food_D2_FC_cc_f, DR2DRSTZ == 1)
food1names <- unique(food1$SEQN)
food2names <- unique(food2$SEQN)
keepnames <- food1names[food1names %in% food2names]
keepnames_adults <- keepnames[keepnames %in% adults$SEQN]
# Keep those who reported more than 1 food item per day.
freqtable1 <- as.data.frame(table(food1$SEQN))
freqtable1
freqtable1_m <- freqtable1[freqtable1$Freq > 1, ]
colnames(freqtable1_m)[1] <- "SEQN"
keepnames_adults_mult1 <- keepnames_adults[keepnames_adults %in% freqtable1_m$SEQN]
# Take only the participants whose names are in keepnames_adults_mult1.
food1b <- food1[food1$SEQN %in% keepnames_adults_mult1, ]
# Do the same for food2
freqtable2 <- as.data.frame(table(food2$SEQN))
freqtable2_m <- freqtable2[freqtable2$Freq > 1, ]
colnames(freqtable2_m)[1] <- "SEQN"
keepnames_adults_mult2 <- keepnames_adults[keepnames_adults %in% freqtable2_m$SEQN]
food2b <- food2[food2$SEQN %in% keepnames_adults_mult2, ]
# Create a vector of SEQN of those that have both day 1 and day 2 data.
food1bnames <- unique(food1b$SEQN)
# Retain those with complete data (STZ==1)
# DR1DRSTZ == 1: reliable and all relevant variables associated with the 24-hour dietary recall contain a value.
# Code descriptions in Analytic notes: https://wwwn.cdc.gov/Nchs/Nhanes/2017-2018/DR1IFF_J.htm#Analytic_Notes
food1 <- subset(Food_D1_FC_cc_f, DR1DRSTZ == 1)
food1names <- unique(food1$SEQN)
food2names <- unique(food2$SEQN)
keepnames <- food1names[food1names %in% food2names]
keepnames <- food1names[food1names %in% food2names]
keepnames_adults <- keepnames[keepnames %in% adults$SEQN]
# Keep those who reported more than 1 food item per day.
freqtable1 <- as.data.frame(table(food1$SEQN))
head(adults)
unique(adults$SEQN)
length(unique(adults$SEQN))
food1names <- unique(food1$SEQN)
# Retain those with complete data (STZ==1)
# DR1DRSTZ == 1: reliable and all relevant variables associated with the 24-hour dietary recall contain a value.
# Code descriptions in Analytic notes: https://wwwn.cdc.gov/Nchs/Nhanes/2017-2018/DR1IFF_J.htm#Analytic_Notes
food1 <- subset(Food_D1_FC_cc_f, DR1DRSTZ == 1)
food2 <- subset(Food_D2_FC_cc_f, DR2DRSTZ == 1)
food1names <- unique(food1$SEQN)
food2 <- subset(Food_D2_FC_cc_f, DR2DRSTZ == 1)
food2names <- unique(food2$SEQN) #
keepnames <- food1names[food1names %in% food2names]
food1names %in% food2names
keepnames_adults <- keepnames[keepnames %in% adults$SEQN]
# Keep those who reported more than 1 food item per day.
freqtable1 <- as.data.frame(table(food1$SEQN))
freqtable1_m <- freqtable1[freqtable1$Freq > 1, ]
freqtable1_m
colnames(freqtable1_m)[1] <- "SEQN"
keepnames_adults_mult1 <- keepnames_adults[keepnames_adults %in% freqtable1_m$SEQN]
# Take only the participants whose names are in keepnames_adults_mult1.
food1b <- food1[food1$SEQN %in% keepnames_adults_mult1, ]
# Do the same for food2
freqtable2 <- as.data.frame(table(food2$SEQN))
freqtable2_m <- freqtable2[freqtable2$Freq > 1, ]
colnames(freqtable2_m)[1] <- "SEQN"
keepnames_adults_mult2 <- keepnames_adults[keepnames_adults %in% freqtable2_m$SEQN]
food2b <- food2[food2$SEQN %in% keepnames_adults_mult2, ]
head(food2b)
# Create a vector of SEQN of those that have both day 1 and day 2 data.
food1bnames <- unique(food1b$SEQN)
food2bnames <- unique(food2b$SEQN)
food2bnames <- unique(food2b$SEQN)
# Combine day 1 and day 2 data.
# Day 1
# Import the list of variables to be picked up in Day 1.
# day1variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_Day1.txt', header=F)  # OLD, before adding food category data.
day1variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_FC_Day1.txt', header=F)
tail(day1variables)
# Which variables to pick up from the food data
var_to_use1 <- names(food1b) %in% day1variables$V1
var_to_use1
# pick up only the specified variables
food1c <- food1b[, var_to_use1]
# Remove "DR1T", "DR1" from the column names
colnames(food1c) <- gsub(colnames(food1c), pattern = "DR1I", replacement = "")
colnames(food1c) <- gsub(colnames(food1c), pattern = "DR1",  replacement = "")
# Check
head(food1c, 1)
# Do the same for Day 2
# day2variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_Day2.txt', header=F) # OLD, before adding food category data.
day2variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_FC_Day2.txt', header=F)
var_to_use2 <- names(food2b) %in% day2variables$V1
food2c <- food2b[, var_to_use2]
colnames(food2c) <- gsub(colnames(food2c), pattern = "DR2I", replacement = "")
colnames(food2c) <- gsub(colnames(food2c), pattern = "DR2", replacement = "")
head(food2c, 1)
# Make a day variable before combining
food1c$Day <- 1
food2c$Day <- 2
# Ensure the columns of food1c and food2c match before joining them.
identical(colnames(food1c), colnames(food2c))
# Combine food1 and food2 as a longtable.
food12c <- rbind(food1c, food2c)
length(keepnames12)
hhh = as.data.frame(table(food12d$SEQN, food12d$Day))
table(hhh$Var2)
head(hhh[order(hhh$Freq), ], 10)
length(keepnames_adults)
nrow(food1)
head(food1)
dim(Food_D1,1)
dim(Food_D1)
unique(Food_D1$SEQN)
length(unique(Food_D1$SEQN))
dim(Food_D2)
length(unique(Food_D2$SEQN)) #8505 people
dim(Food_D1_FC)
length(unique(Food_D1_FC$SEQN))
dim(Food_D1_FC)
length(unique(Food_D1_FC$SEQN))
dim(Food_D1_FC)
dim(Food_D1)
length(unique(Food_D1_FC$SEQN))
dim(Food_D1_FC_cc_f)
length(unique(Food_D1_FC_cc_f$SEQN))
head(Food_D1_FC$Main.food.description)
head(Food_D1_FC_cc_f$Main.food.description)
# Save after changing the columnnames.
write.table(Food_D1_FC, "eg_data/NHANES/Food_D1_FC_cc.txt", sep="\t", row.names=F, quote=F)
write.table(Food_D2_FC, "eg_data/NHANES/Food_D2_FC_cc.txt", sep="\t", row.names=F, quote=F)
# Try using FormatFoods
FormatFoods(input_fn="eg_data/NHANES/Food_D1_FC_cc.txt", output_fn= "eg_data/NHANES/Food_D1_FC_cc_f.txt")
FormatFoods(input_fn="eg_data/NHANES/Food_D2_FC_cc.txt", output_fn= "eg_data/NHANES/Food_D2_FC_cc_f.txt")
# Result
Food_D1_FC_cc_f <- read.table("eg_data/NHANES/Food_D1_FC_cc_f.txt", sep="\t", header=T)
dim(Food_D1_FC_cc_f)
length(unique(Food_D1_FC$Food_code))
length(unique(Food_D1_FC_cc_fC$Food_code))
length(unique(Food_D1_FC_cc_f$Food_code))
dim(Food_D1_FC$Food_code)
length(Food_D1_FC$Food_code)
length(Food_D1_FC_cc_f$Food_code)
# Try using FormatFoods
FormatFoods(input_fn="eg_data/NHANES/Food_D1_FC_cc.txt", output_fn= "eg_data/NHANES/Food_D1_FC_cc_f.txt", dedupe=F)
length(Food_D1_FC$Food_code)
# Result
Food_D1_FC_cc_f <- read.table("eg_data/NHANES/Food_D1_FC_cc_f.txt", sep="\t", header=T)
dim(Food_D1_FC_cc_f)
FormatFoods(input_fn="eg_data/NHANES/Food_D2_FC_cc.txt", output_fn= "eg_data/NHANES/Food_D2_FC_cc_f.txt", dedupe=F)
length(Food_D1_FC$Food_code)
length(unique(Food_D1_FC$Food_code))
length(Food_D1_FC_cc_f$Food_code)
length(unique(Food_D1_FC_cc_f$Food_code))
# Result
Food_D1_FC_cc_f <- read.table("eg_data/NHANES/Food_D1_FC_cc_f.txt", sep="\t", header=T)
dim(Food_D1_FC_cc_f)
colnames(Food_D1_FC_cc_f)
length(unique(Food_D1_FC_cc_f$SEQN))
length(unique(Food_D2_FC_cc_f$SEQN))
Food_D2_FC_cc_f <- read.table("eg_data/NHANES/Food_D2_FC_cc_f.txt", sep="\t", header=T)
head(Food_D2_FC_cc_f)
length(unique(Food_D2_FC_cc_f$SEQN))
# Remove children.
# Load the demographics file, then filter by age > 18.
demog <- read.xport("eg_data/NHANES/DEMO_I.XPT")
adults <- demog[demog$RIDAGEYR >= 18, ]
length(unique(adults$SEQN)) # 5992 adults
# Retain those with complete data (STZ==1)
# DR1DRSTZ == 1: reliable and all relevant variables associated with the 24-hour dietary recall contain a value.
# Code descriptions in Analytic notes: https://wwwn.cdc.gov/Nchs/Nhanes/2017-2018/DR1IFF_J.htm#Analytic_Notes
food1 <- subset(Food_D1_FC_cc_f, DR1DRSTZ == 1)
food2 <- subset(Food_D2_FC_cc_f, DR2DRSTZ == 1)
head(food1)
food1names <- unique(food1$SEQN) #2786 adults
food2names <- unique(food2$SEQN) #2521 adults
keepnames <- food1names[food1names %in% food2names]  #1329
keepnames_adults <- keepnames[keepnames %in% adults$SEQN] #
# Keep those who reported more than 1 food item per day.
freqtable1 <- as.data.frame(table(food1$SEQN))
freqtable1_m <- freqtable1[freqtable1$Freq > 1, ]
colnames(freqtable1_m)[1] <- "SEQN"
keepnames_adults_mult1 <- keepnames_adults[keepnames_adults %in% freqtable1_m$SEQN] #457
# Take only the participants whose names are in keepnames_adults_mult1.
food1b <- food1[food1$SEQN %in% keepnames_adults_mult1, ] # 1618 rows
# Do the same for food2
freqtable2 <- as.data.frame(table(food2$SEQN))
freqtable2_m <- freqtable2[freqtable2$Freq > 1, ]
colnames(freqtable2_m)[1] <- "SEQN"
keepnames_adults_mult2 <- keepnames_adults[keepnames_adults %in% freqtable2_m$SEQN] #497
food2b <- food2[food2$SEQN %in% keepnames_adults_mult2, ] #1710 rows
head(food2b)
# Create a vector of SEQN of those that have both day 1 and day 2 data.
food1bnames <- unique(food1b$SEQN)
food2bnames <- unique(food2b$SEQN)
keepnames12 <- food1bnames[food1bnames %in% food2bnames]
# Combine day 1 and day 2 data.
# Day 1
# Import the list of variables to be picked up in Day 1.
# day1variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_Day1.txt', header=F)  # OLD, before adding food category data.
day1variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_FC_Day1.txt', header=F)
tail(day1variables)
dim(food1b)
dim(food1c)
# Which variables to pick up from the food data
var_to_use1 <- names(food1b) %in% day1variables$V1
# pick up only the specified variables
food1c <- food1b[, var_to_use1]
# Remove "DR1T", "DR1" from the column names
colnames(food1c) <- gsub(colnames(food1c), pattern = "DR1I", replacement = "")
colnames(food1c) <- gsub(colnames(food1c), pattern = "DR1",  replacement = "")
# Check
head(food1c, 1)
# Do the same for Day 2
# day2variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_Day2.txt', header=F) # OLD, before adding food category data.
day2variables <- read.table('eg_data/NHANES/NHANES_Food_VarNames_FC_Day2.txt', header=F)
var_to_use2 <- names(food2b) %in% day2variables$V1
food2c <- food2b[, var_to_use2]
colnames(food2c) <- gsub(colnames(food2c), pattern = "DR2I", replacement = "")
colnames(food2c) <- gsub(colnames(food2c), pattern = "DR2", replacement = "")
head(food2c, 1)
dim(food1b)
dim(food1c)
colnames(food1c)
colnames(food1b)
# Make a day variable before combining
food1b$Day <- 1
food2b$Day <- 2
# Ensure the columns of food1c and food2c match before joining them.
identical(colnames(food1b), colnames(food2b))
colnames(food1b)
# Remove "DR1I", "DR1" from the column names
colnames(food1e) <- gsub(colnames(food1b), pattern = "DR1I", replacement = "")
# Rename these...
food1e <- food1b
food2e <- food2b
colnames(food1b)
# Remove "DR1I", "DR1" from the column names
colnames(food1e) <- gsub(colnames(food1e), pattern = "DR1I", replacement = "")
colnames(food1e) <- gsub(colnames(food1e), pattern = "DR1",  replacement = "")
colnames(food1e)
colnames(food2e)
colnames(food2e) <- gsub(colnames(food2e), pattern = "DR2I", replacement = "")
colnames(food2e)
colnames(food2e) <- gsub(colnames(food2e), pattern = "DR2",  replacement = "")
colnames(food2e)
table(food2e$DAY)
identical(colnames(food1e), colnames(food2e))
df = data.frame(one= colnames(food1e), two = colnames(food2e))
View(df)
identical(colnames(food1e)[5:131], colnames(food2e)[5:131])
# Rename these...
food1e <- food1b
food2e <- food2b
# Remove "DR1I", "DR1" from the column names
colnames(food1e) <- gsub(colnames(food1e), pattern = "DR1I", replacement = "")
colnames(food1e) <- gsub(colnames(food1e), pattern = "DR1",  replacement = "")
colnames(food2e) <- gsub(colnames(food2e), pattern = "DR2I", replacement = "")
colnames(food2e) <- gsub(colnames(food2e), pattern = "DR2",  replacement = "")
identical(colnames(food1e)[5:131], colnames(food2e)[5:131])
identical(colnames(food1e), colnames(food2e))
colnames(food1e)
colnames(food2e)
# Rename these...
food1e <- food1b
food2e <- food2b
# Remove "DR1I", "DR1" from the column names
colnames(food1e) <- gsub(colnames(food1e), pattern = "^DR1I", replacement = "")
colnames(food1e) <- gsub(colnames(food1e), pattern = "^DR1",  replacement = "")
colnames(food1e)
colnames(food2e) <- gsub(colnames(food2e), pattern = "^DR2I", replacement = "")
colnames(food2e) <- gsub(colnames(food2e), pattern = "^DR2",  replacement = "")
colnames(food2e)
identical(colnames(food1e), colnames(food2e))
# Combine food1 and food2 as a longtable.
food12e <- rbind(food1e, food2e)
# Pick up only the individuals listed in keepnames12.
food12f <- food12e[food12e$SEQN %in% keepnames12, ]
head(food12f, 2)
# food12f has all information (SEQN, nutrients, food categories, food.description, day etc.)
# Save. It will be a HUGE file.
write.table(food12f, "eg_data/NHANES/Food_D12_FC_cc_f.txt", sep="\t", row.names=F, quote=F)
# Some checking -- to be removed.
length(unique(food12f$SEQN))
sum(table(food12f$SEQN, food12f$Day)[,1] <2) # how many has <2 food entries? Should be zero.
sum(table(food12f$SEQN, food12f$Day)[,2] <2) # how many has <2 food entries? Should be zero.
hhh = as.data.frame(table(food12f$SEQN, food12f$Day))
head(hhh, 10)
table(hhh$Var2)
head(hhh[order(hhh$Freq), ], 10)
tail(hhh[order(hhh$Freq), ], 10)
subset(food12f, SEQN==86563)[, 'Day'] # Participant No. 86563 reported only 1 food/day. Should be nonexistent.
