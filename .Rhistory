setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main.wd <- file.path(getwd())
# Load example data files ===============================================================
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main.wd <- file.path(getwd())
# Import source code to run the analyses to follow.
source("lib/load_and_check.R")
# Load example data files ===============================================================
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
# Load the totals data.
totals <- read.table("Totals_to_use.txt",  sep = "\t", header = T)
SubsetColumns <- function(data, start.col, end.col){
# Column Variables of "totals" dataframe.
colvars <- names(data)
# Get the first ID
start.col <- match(start.col, colvars)
# Get the second ID
end.col <- match(end.col, colvars)
# Subset range
subsetted <<- data[, start.col:end.col]
# Print what was loaded.
cat("'subsetted' contains the following", length(colnames(subsetted)), "columns.", "\n")
print(colnames(subsetted))
}
# ---------------------------------------------------------------------------------------------------------------
SubsetColumns(data = totals, start.col = "PROT", end.col = "B12_ADD")
dim(subsetted)
# Subset nutrition data.
# The columns "PROT" and "B12_ADD" and all columns in between will be selected.
#   Edit the start_col and/or end_col if different from the default.
SubsetTotals(data = totals, start.col = "PROT", end.col = "B12_ADD")
# Subset nutrition data.
# The columns "PROT" and "B12_ADD" and all columns in between will be selected.
#   Edit the start_col and/or end_col if different from the default.
SubsetColumns(data = totals, start.col = "PROT", end.col = "B12_ADD")
# Pick up only the columns with non-zero variance, in order to do PCA.
subsetted_non0var <- subsetted[, which(apply(subsetted, 2, var) != 0)]
dim(subsetted)
dim(subsetted_non0var)
# Perform PCA with all the nutrients, scaled.
scaled_pca <- prcomp(x = subsetted_non0var, scale = T)
which(apply(subsetted, 2, var) = 0)
which(apply(subsetted, 2, var = 0))
apply(subsetted, 2, var)
which(apply(subsetted, 2, var) == 0))
subsetted
which(apply(subsetted, 2, var) = 0))
subsetted[, which(apply(subsetted, 2, var) = 0)]
subsetted[, which(apply(subsetted, 2, var) == 0)]
which(apply(subsetted, 2, var) == 0)
# Keep only the columns with non-zero variance in order to perform PCA.
KeepNonZeroVarColumns <- function(data = subsetted){
subsetted_non0var <- subsetted[, which(apply(subsetted, 2, var) != 0)]
# Print which column(s) were removed.
cat("The following column(s) in ", data, " had zero variance and were removed.", "\n")
print(which(apply(subsetted, 2, var) == 0))
}
# Pick up only the columns with non-zero variance, in order to do PCA.
KeepNonZeroVarColumns(data = subsetted)
# Keep only the columns with non-zero variance in order to perform PCA.
KeepNonZeroVarColumns <- function(data = subsetted){
subsetted_non0var <<- subsetted[, which(apply(subsetted, 2, var) != 0)]
# Print which column(s) were removed.
if(ncol(subsetted) == ncol(subsetted_non0var)){
cat("No columns were removed.", "\n")
}
if(ncol(subsetted) != ncol(subsetted_non0var)){
cat("The following column(s) in ", data, " had zero variance and were removed.", "\n")
print(which(apply(subsetted, 2, var) == 0))
}
}
subsetted
subsetted[, which(apply(subsetted, 2, var) == 0)]
# Pick up only the columns with non-zero variance, in order to do PCA.
KeepNonZeroVarColumns(data = subsetted)
SpecifyDataDirectory(directory.name = "eg_data/salt/")
# If totals data is a csv:
totals <- read.csv(list.files(pattern = '\\Totals.csv$'))
# Come back to the main directory
setwd(main.wd)
# Subset nutrition data.
# The columns "PROT" and "B12_ADD" and all columns in between will be selected.
#   Edit the start_col and/or end_col if different from the default.
SubsetColumns(data = totals, start.col = "PROT", end.col = "B12_ADD")
# Pick up only the columns with non-zero variance, in order to do PCA.
KeepNonZeroVarColumns(data = subsetted)
which(apply(subsetted, 2, var) == 0)
paste0(which(apply(subsetted, 2, var) == 0))
# Keep only the columns with non-zero variance in order to perform PCA.
KeepNonZeroVarColumns <- function(data = subsetted){
subsetted_non0var <<- subsetted[, which(apply(subsetted, 2, var) != 0)]
# Print which column(s) were removed.
if(ncol(subsetted) == ncol(subsetted_non0var)){
cat("No columns were removed.", "\n")
}
if(ncol(subsetted) != ncol(subsetted_non0var)){
cat("The following column(s) in ", data, " had zero variance and were removed.", "\n")
paste0(which(apply(subsetted, 2, var) == 0))
}
}
# Pick up only the columns with non-zero variance, in order to do PCA.
KeepNonZeroVarColumns(data = subsetted)
# Keep only the columns with non-zero variance in order to perform PCA.
KeepNonZeroVarColumns <- function(data = subsetted){
subsetted_non0var <<- subsetted[, which(apply(subsetted, 2, var) != 0)]
# Print which column(s) were removed.
if(ncol(subsetted) == ncol(subsetted_non0var)){
cat("No columns were removed.", "\n")
}
if(ncol(subsetted) != ncol(subsetted_non0var)){
cat("The following column(s) in ", paste(data), " had zero variance and were removed.", "\n")
paste0(which(apply(subsetted, 2, var) == 0))
}
}
paste(totals)
deparse(substitute(totals))
# Keep only the columns with non-zero variance in order to perform PCA.
KeepNonZeroVarColumns <- function(data = subsetted){
subsetted_non0var <<- subsetted[, which(apply(subsetted, 2, var) != 0)]
# Print which column(s) were removed.
if(ncol(subsetted) == ncol(subsetted_non0var)){
cat("No columns were removed.", "\n")
}
if(ncol(subsetted) != ncol(subsetted_non0var)){
cat("The following column(s) in ", deparse(substitute(data)), " had zero variance and were removed.", "\n")
paste0(which(apply(subsetted, 2, var) == 0))
}
}
# Pick up only the columns with non-zero variance, in order to do PCA.
KeepNonZeroVarColumns(data = subsetted)
# Keep only the columns with non-zero variance in order to perform PCA.
KeepNonZeroVarColumns <- function(data = subsetted){
subsetted_non0var <<- subsetted[, which(apply(subsetted, 2, var) != 0)]
# Print which column(s) were removed.
if(ncol(subsetted) == ncol(subsetted_non0var)){
cat("No columns were removed.", "\n")
}
if(ncol(subsetted) != ncol(subsetted_non0var)){
cat("The following column(s) in ", deparse(substitute(data)), " had zero variance and were removed.", "\n")
print(which(apply(subsetted, 2, var) == 0))
}
}
# Pick up only the columns with non-zero variance, in order to do PCA.
KeepNonZeroVarColumns(data = subsetted)
# Load example totals data ===============================================================
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
# Load the totals.csv
totals <- read.table("Totals_to_use.txt",  sep = "\t", header = T)
# Come back to the main directory
setwd(main.wd)
# ========================================================================================
#
# ========================================================================================
# Specify the plot theme and base font size to use.
ggplot2::theme_set(theme_bw(base_size = 14))
# Subset nutrition data.
# The columns "PROT" and "B12_ADD" and all columns in between will be selected.
#   Edit the start_col and/or end_col if different from the default.
SubsetColumns(data = totals, start.col = "PROT", end.col = "B12_ADD")
# ========================================================================================
#
# ========================================================================================
# Specify the plot theme and base font size to use.
ggplot2::theme(theme_bw(base_size = 14))
# Subset nutrition data.
# The columns "PROT" and "B12_ADD" and all columns in between will be selected.
#   Edit the start_col and/or end_col if different from the default.
SubsetColumns(data = totals, start.col = "PROT", end.col = "B12_ADD")
# Pick up only the columns with non-zero variance, in order to do PCA.
# The removed columns will be shown if any.
KeepNonZeroVarColumns(data = subsetted)
# Perform PCA with all the nutrients, scaled.
scaled_pca <- prcomp(x = subsetted_non0var, scale = T)
# Create a scree plot.
LineScreePlot(pca.result = scaled_pca)
LineScreePlot <- function(pca.result = scaled_pca){
# Calculate the variance explained for each PC.
var_explained_df <- data.frame(PC = rep(1:length(colnames(subsetted_non0var))),
var_explained = (pca.result$sdev)^2/sum((pca.result$sdev)^2))
# Subset the first 10 PCs
first10PCs <- var_explained_df[1:10, ]
# Create a scree plot.
require(ggplot2)
ggplot(first10PCs, aes(x = PC, y = var_explained*100)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Number of PCs",
y = "Variance explained by PCs (%)") +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ) ) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
theme(aspect.ratio = 0.9)
}
# Create a scree plot.
LineScreePlot(pca.result = scaled_pca)
# ========================================================================================
#
# ========================================================================================
# Specify the plot theme and base font size to use.
ggplot2::theme(theme_bw(base_size = 14))
# ========================================================================================
#
# ========================================================================================
# Specify the plot theme and base font size to use.
ggplot2::theme_set(theme_bw(base_size = 14))
# ========================================================================================
#
# ========================================================================================
# Specify the plot theme and base font size to use.
library(ggplot2)
ggplot2::theme_set(theme_bw(base_size = 14))
# Perform PCA with all the nutrients, scaled.
scaled_pca <- prcomp(x = subsetted_non0var, scale = T)
# Create a scree plot.
LineScreePlot(pca.result = scaled_pca)
# Create a biplot.
# A biplot with the individuals as black dots.
Biplot_dots(  pca.result = scaled_pca, pca.data = nutrients)
BiplotDots <- function(pca.result = scaled_pca, pca.data = subsetted_non0var){
require(ggfortify)
autoplot(object = pca.result, data = pca.data,
loadings = T, loadings.label = T, loadings.colour = 'pink',
loadings.label.size=3) +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ) ) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
theme(aspect.ratio = 1)
}
BiplotDots <- function(pca.result = scaled_pca, pca.data = subsetted_non0var){
require(ggfortify)
autoplot(object = pca.result, data = pca.data,
loadings = T, loadings.label = T, loadings.colour = 'pink',
loadings.label.size=3) +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ) ) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
theme(aspect.ratio = 1)
}
# ---------------------------------------------------------------------------------------------------------------
BiplotDots(pca.result = scaled_pca)
# ---------------------------------------------------------------------------------------------------------------
# Create a biplot with the individuals labeled.
BiplotLabeled <- function(pca.result = scaled_pca, pca.data = subsetted_non0var, individuals.label = TRUE){
require(ggfortify)
autoplot(object = pca.result, data = pca.data,
label = individuals.label, label.size = 3, shape =FALSE,
loadings = T, loadings.label = T, loadings.colour = 'pink',
loadings.label.size=3) +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(axis.title.x = element_text(margin=margin(t = 10, r = 0, b = 0, l = 0) ) ) +
theme(axis.title.y = element_text(margin=margin(t = 0, r = 10, b = 0, l = 0) ) ) +
theme(aspect.ratio = 1)
}
# ---------------------------------------------------------------------------------------------------------------
BiplotLabeled(pca.result = scaled_pca, individuals.label = TRUE)
# Name your main directory for future use.
main.wd <- file.path(getwd())
# Import source code to run the analyses to follow.
source("lib/load_and_check.R")
source("lib/PCA.R")
# Load example totals data ===============================================================
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/dietstudy/")
# Load the totals.csv
totals <- read.table("Totals_to_use.txt",  sep = "\t", header = T)
# Come back to the main directory
setwd(main.wd)
# ========================================================================================
#
# ========================================================================================
# Specify the plot theme and base font size to use.
library(ggplot2)
ggplot2::theme_set(theme_bw(base_size = 14))
# Subset nutrition data.
# The columns "PROT" and "B12_ADD" and all columns in between will be selected.
#   Edit the start_col and/or end_col if different from the default.
SubsetColumns(data = totals, start.col = "PROT", end.col = "B12_ADD")
# Pick up only the columns with non-zero variance, in order to do PCA.
# The removed columns will be shown if any.
KeepNonZeroVarColumns(data = subsetted)
# Perform PCA with all the nutrients, scaled.
scaled_pca <- prcomp(x = subsetted_non0var, scale = T)
# Create a scree plot.
LineScreePlot(pca.result = scaled_pca)
# Create a biplot.
# A biplot with the individuals as black dots.
Biplot_dots(   pca.result = scaled_pca, pca.data = subsetted_non0var)
# Create a biplot.
# A biplot with the individuals as black dots.
BiplotDots(   pca.result = scaled_pca, pca.data = subsetted_non0var)
# A biplot with the individuals labeled.
BiplotLabeled(pca.result = scaled_pca, pca.data = subsetted_non0var, individuals.label = TRUE)
# Create a biplot.
# A biplot with the individuals as black dots.
BiplotDots(   pca.result = scaled_pca, pca.data = subsetted_non0var)
# A biplot with the individuals labeled.
BiplotLabeled(pca.result = scaled_pca, pca.data = subsetted_non0var, individuals.label = TRUE)
# Subset nutrition data.
# The columns specified as start.col, end.col, and all columns in between will be selected.
# Nutrient analysis --> start.col = "PROT",    end.col = "B12_ADD"
# Nutrient analysis --> start.col = "F_TOTAL", end.col = "A_DRINKS"
SubsetColumns(data = totals, start.col = "F_TOTAL", end.col = "A_DRINKS")
# Pick up only the columns with non-zero variance, in order to do PCA.
# The removed columns will be shown if any.
KeepNonZeroVarColumns(data = subsetted)
# Perform PCA with all the nutrients, scaled.
scaled_pca <- prcomp(x = subsetted_non0var, scale = T)
# Create a scree plot.
LineScreePlot(pca.result = scaled_pca)
# Create a biplot.
# A biplot with the individuals as black dots.
BiplotDots(   pca.result = scaled_pca, pca.data = subsetted_non0var)
# A biplot with the individuals labeled.
BiplotLabeled(pca.result = scaled_pca, pca.data = subsetted_non0var, individuals.label = TRUE)
